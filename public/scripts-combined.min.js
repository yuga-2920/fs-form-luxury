const Config = {
GOOGLE_SHEETS_URL: 'https:
SHEET_NAME: 'フォーム回答',
IMAGE_FOLDER_NAME: 'フォーム画像'
};
window.Config = Config;
window.imageMapping = {
avoidItems: {
male: {
'logo': { name: 'ロゴ', image: 'images/avoid-logo.webp' },
'animal-pattern': { name: 'アニマル柄', image: 'images/avoid-animal-pattern.webp' },
'bold-print': { name: '総柄', image: 'images/avoid-bold-print.webp' },
'complex-pattern': { name: '複雑な模様', image: 'images/avoid-complex-pattern.webp' },
'flashy-decoration': { name: '派手な装飾', image: 'images/avoid-flashy-decoration.webp' },
'bright-color': { name: '明るすぎる色', image: 'images/avoid-bright-color.webp' },
'rough-texture': { name: 'ざらざらした質感', image: 'images/avoid-rough-texture.webp' },
'synthetic': { name: '合成素材感', image: 'images/avoid-synthetic.webp' },
'oversized': { name: 'オーバーサイズ', image: 'images/avoid-oversized.webp' },
'tight': { name: 'タイトすぎる', image: 'images/avoid-tight.webp' },
'thin-material': { name: '薄すぎる素材', image: 'images/avoid-thin-material.webp' },
'sporty-casual': { name: 'スポーティ・カジュアル', image: 'images/avoid-sporty-casual.webp' },
'other': { name: 'その他', image: 'images/avoid-other.webp' }
},
female: {
'logo': { name: 'ロゴ', image: 'images/avoid-logo.webp' },
'animal-pattern': { name: 'アニマル柄', image: 'images/avoid-animal-pattern.webp' },
'bold-print': { name: '総柄', image: 'images/avoid-bold-print.webp' },
'complex-pattern': { name: '複雑な模様', image: 'images/avoid-complex-pattern.webp' },
'flashy-decoration': { name: '派手な装飾', image: 'images/avoid-flashy-decoration.webp' },
'bright-color': { name: '明るすぎる色', image: 'images/avoid-bright-color.webp' },
'rough-texture': { name: 'ざらざらした質感', image: 'images/avoid-rough-texture.webp' },
'synthetic': { name: '合成素材感', image: 'images/avoid-synthetic.webp' },
'oversized': { name: 'オーバーサイズ', image: 'images/avoid-oversized.webp' },
'tight': { name: 'タイトすぎる', image: 'images/avoid-tight.webp' },
'thin-material': { name: '薄すぎる素材', image: 'images/avoid-thin-material.webp' },
'frills-lace': { name: 'フリル・レース', image: 'images/avoid-frills-lace.webp' },
'excessive-exposure': { name: '露出過多', image: 'images/avoid-excessive-exposure.webp' },
'mini-length': { name: 'ミニ丈', image: 'images/avoid-mini-length.webp' },
'high-heels': { name: 'ハイヒール', image: 'images/avoid-high-heels.webp' },
'other': { name: 'その他', image: 'images/avoid-other.webp' }
}
},
attractiveStyles: {
male: {
'suit': { name: 'スーツ', image: 'images/style-suit.webp' },
'casual': { name: 'カジュアル', image: 'images/style-casual.webp' },
'elegant': { name: 'エレガント', image: 'images/style-elegant.webp' },
'mode': { name: 'モード', image: 'images/style-mode.webp' },
'street': { name: 'ストリート', image: 'images/style-street.webp' },
'american-casual': { name: 'アメリカンカジュアル', image: 'images/style-american-casual.webp' },
'sports': { name: 'スポーツMIX', image: 'images/style-sports.webp' },
'trad': { name: 'トラッド', image: 'images/style-trad.webp' },
'natural': { name: 'ナチュラル', image: 'images/style-natural.webp' },
'minimal': { name: 'ミニマル', image: 'images/style-minimal.webp' },
'outdoor': { name: 'アウトドア', image: 'images/style-outdoor.webp' },
'utility': { name: 'ユーティリティ', image: 'images/style-utility.webp' }
},
female: {
'elegant': { name: 'エレガント', image: 'images/style-elegant-f.webp' },
'urban-conservative': { name: 'アーバンコンサバ', image: 'images/style-urban-conservative.webp' },
'feminine': { name: 'フェミニン', image: 'images/style-feminine.webp' },
'mode': { name: 'モード', image: 'images/style-mode-f.webp' },
'natural': { name: 'ナチュラル', image: 'images/style-natural-f.webp' },
'casual': { name: 'カジュアル', image: 'images/style-casual-f.webp' },
'sporty': { name: 'スポーティ', image: 'images/style-sporty.webp' },
'street': { name: 'ストリート', image: 'images/style-street-f.webp' },
'utility': { name: 'ユーティリティ', image: 'images/style-utility-f.webp' },
'french-casual': { name: 'フレンチカジュアル', image: 'images/style-french-casual.webp' },
'minimal': { name: 'ミニマル', image: 'images/style-minimal-f.webp' },
'vintage': { name: 'ヴィンテージ', image: 'images/style-vintage.webp' }
}
},
stylePatterns: {
male: {
suit: {
name: 'スーツ/トラッド',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'suit-1', name: 'スーツ1', image: 'images/pattern-suit-1.webp' },
{ id: 'suit-2', name: 'スーツ2', image: 'images/pattern-suit-2.webp' },
{ id: 'suit-3', name: 'スーツ3', image: 'images/pattern-suit-3.webp' }
]
}
]
},
casual: {
name: 'カジュアル',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'casual-1', name: 'カジュアル1', image: 'images/pattern-casual-1.webp' },
{ id: 'casual-2', name: 'カジュアル2', image: 'images/pattern-casual-2.webp' },
{ id: 'casual-3', name: 'カジュアル3', image: 'images/pattern-casual-3.webp' }
]
}
]
},
elegant: {
name: 'エレガント',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'elegant-1', name: 'エレガント1', image: 'images/pattern-elegant-1.webp' },
{ id: 'elegant-2', name: 'エレガント2', image: 'images/pattern-elegant-2.webp' },
{ id: 'elegant-3', name: 'エレガント3', image: 'images/pattern-elegant-3.webp' }
]
}
]
},
mode: {
name: 'モード',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'mode-1', name: 'モード1', image: 'images/pattern-mode-1.webp' },
{ id: 'mode-2', name: 'モード2', image: 'images/pattern-mode-2.webp' },
{ id: 'mode-3', name: 'モード3', image: 'images/pattern-mode-3.webp' }
]
}
]
},
street: {
name: 'ストリート',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'street-1', name: 'ストリート1', image: 'images/pattern-street-1.webp' },
{ id: 'street-2', name: 'ストリート2', image: 'images/pattern-street-2.webp' },
{ id: 'street-3', name: 'ストリート3', image: 'images/pattern-street-3.webp' }
]
}
]
},
'american-casual': {
name: 'アメリカンカジュアル',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'amecas-1', name: 'アメカジ1', image: 'images/pattern-amecas-1.webp' },
{ id: 'amecas-2', name: 'アメカジ2', image: 'images/pattern-amecas-2.webp' },
{ id: 'amecas-3', name: 'アメカジ3', image: 'images/pattern-amecas-3.webp' }
]
}
]
},
minimal: {
name: 'ミニマル',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'minimal-1', name: 'ミニマル1', image: 'images/pattern-minimal-1.webp' },
{ id: 'minimal-2', name: 'ミニマル2', image: 'images/pattern-minimal-2.webp' },
{ id: 'minimal-3', name: 'ミニマル3', image: 'images/pattern-minimal-3.webp' }
]
}
]
}
},
female: {
elegant: {
name: 'エレガント',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'elegant-f-1', name: 'エレガント1', image: 'images/pattern-elegant-f-1.webp' },
{ id: 'elegant-f-2', name: 'エレガント2', image: 'images/pattern-elegant-f-2.webp' },
{ id: 'elegant-f-3', name: 'エレガント3', image: 'images/pattern-elegant-f-3.webp' }
]
}
]
},
'urban-conservative': {
name: 'アーバンコンサバ',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'urban-1', name: 'アーバン1', image: 'images/pattern-urban-1.webp' },
{ id: 'urban-2', name: 'アーバン2', image: 'images/pattern-urban-2.webp' },
{ id: 'urban-3', name: 'アーバン3', image: 'images/pattern-urban-3.webp' }
]
}
]
},
feminine: {
name: 'フェミニン',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'feminine-1', name: 'フェミニン1', image: 'images/pattern-feminine-1.webp' },
{ id: 'feminine-2', name: 'フェミニン2', image: 'images/pattern-feminine-2.webp' },
{ id: 'feminine-3', name: 'フェミニン3', image: 'images/pattern-feminine-3.webp' }
]
}
]
},
mode: {
name: 'モード',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'mode-f-1', name: 'モード1', image: 'images/pattern-mode-f-1.webp' },
{ id: 'mode-f-2', name: 'モード2', image: 'images/pattern-mode-f-2.webp' },
{ id: 'mode-f-3', name: 'モード3', image: 'images/pattern-mode-f-3.webp' }
]
}
]
},
natural: {
name: 'ナチュラル',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'natural-f-1', name: 'ナチュラル1', image: 'images/pattern-natural-f-1.webp' },
{ id: 'natural-f-2', name: 'ナチュラル2', image: 'images/pattern-natural-f-2.webp' },
{ id: 'natural-f-3', name: 'ナチュラル3', image: 'images/pattern-natural-f-3.webp' }
]
}
]
},
casual: {
name: 'カジュアル',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'casual-f-1', name: 'カジュアル1', image: 'images/pattern-casual-f-1.webp' },
{ id: 'casual-f-2', name: 'カジュアル2', image: 'images/pattern-casual-f-2.webp' },
{ id: 'casual-f-3', name: 'カジュアル3', image: 'images/pattern-casual-f-3.webp' }
]
}
]
},
sporty: {
name: 'スポーティ',
rows: [
{
name: 'パターン1',
patterns: [
{ id: 'sporty-f-1', name: 'スポーティ1', image: 'images/pattern-sporty-f-1.webp' },
{ id: 'sporty-f-2', name: 'スポーティ2', image: 'images/pattern-sporty-f-2.webp' },
{ id: 'sporty-f-3', name: 'スポーティ3', image: 'images/pattern-sporty-f-3.webp' }
]
}
]
}
}
}
};
window.rebuildAttractiveStylesGrid = function(gender) {
console.log('rebuildAttractiveStylesGrid called with gender:', gender);
};
window.initializeGenderIntegratedStylePatterns = function() {
console.log('initializeGenderIntegratedStylePatterns called');
};
window.updateFormContent = function(gender) {
console.log('updateFormContent called with gender:', gender);
const avoidItemsContainer = document.querySelector('.avoid-items-grid');
if (avoidItemsContainer && window.imageMapping && window.imageMapping.avoidItems) {
const genderData = window.imageMapping.avoidItems[gender] || window.imageMapping.avoidItems.male;
avoidItemsContainer.innerHTML = '';
Object.entries(genderData).forEach(([key, data]) => {
const label = document.createElement('label');
label.className = 'checkbox-option avoid-item';
label.innerHTML = `
<input type="checkbox" name="avoidItems" value="${key}" ${key === 'other' ? 'id="avoid-other"' : ''}>
<div class="avoid-item-content">
<img src="${data.image}" alt="${data.name}" class="avoid-item-image">
<span class="avoid-item-name">${data.name}</span>
</div>
`;
avoidItemsContainer.appendChild(label);
});
}
};
window.handleEvaluation = function(uniqueId, evaluation, patternId) {
console.log('handleEvaluation called:', uniqueId, evaluation, patternId);
};
const imageMapping = {
attractiveStyles: {
male: {
suit: {
name: "スーツ/トラッド",
image: "images/style-male-suit-1.webp",
},
mode: {
name: "モード",
image: "images/style-male-mode-1.webp",
},
elegant: {
name: "エレガント/シック",
image: "images/attractive-classic1.webp",
},
minimal: {
name: "ミニマム/シンプル",
image: "images/style-minimal-1.webp",
},
street: {
name: "ストリート/スポーティー",
image: "images/pattern-street1.webp",
},
searf: {
name: "サーフ",
image: "images/style-searf-1.webp",
},
"american-casual": {
name: "アメカジ",
image: "images/style-amecas-1.webp",
},
},
female: {
mode: {
name: "モード",
image: "images/style-female-mode-1.webp",
},
elegant: {
name: "エレガント/シック",
image: "images/style-female-elegant-1.webp",
},
"urban-conservative": {
name: "アーバン/コンサバティブ",
image: "images/style-female-urban-conservative-1.webp",
},
feminine: {
name: "フェミニン",
image: "images/style-female-feminine-1.webp",
},
sporty: {
name: "スポーティー",
image: "images/style-female-sporty-1.webp",
},
bohemian: {
name: "ボヘミアン",
image: "images/style-female-bohemian-1.webp",
},
"cool-rock": {
name: "クール/ロック",
image: "images/style-female-cool-rock-1.webp",
},
"vibrant-color": {
name: "華やか／カラー",
image: "images/style-female-vibrant-color-1.webp",
},
natural: {
name: "ナチュラル",
image: "images/style-female-natural-1.webp",
},
},
},
avoidItems: {
male: {
ight: {
name: "タイトすぎる",
image: "images/avoid-tight.webp",
},
oversized: {
name: "オーバーサイズ",
image: "images/avoid-oversized.webp",
},
logo: {
name: "ロゴが大きい",
image: "images/avoid-logo.webp",
},
"bright-color": {
name: "派手な色",
image: "images/avoid-bright-color.webp",
},
synthetic: {
name: "化学繊維",
image: "images/avoid-synthetic.webp",
},
"bold-print": {
name: "派手な柄",
image: "images/avoid-bold-print.webp",
},
"animal-pattern": {
name: "アニマル柄",
image: "images/avoid-animal-pattern.webp",
},
"complex-pattern": {
name: "複雑な柄",
image: "images/avoid-complex-pattern.webp",
},
},
female: {
ight: {
name: "タイトすぎる",
image: "images/avoid-tight.webp",
},
oversized: {
name: "オーバーサイズ",
image: "images/avoid-oversized.webp",
},
logo: {
name: "ロゴが大きい",
image: "images/avoid-logo.webp",
},
"bright-color": {
name: "派手な色",
image: "images/avoid-bright-color.webp",
},
synthetic: {
name: "化学繊維",
image: "images/avoid-syntheticfdas.webp",
},
"bold-print": {
name: "派手な柄",
image: "images/avoid-bold-print.webp",
},
"animal-pattern": {
name: "アニマル柄",
image: "images/avoid-animal-pattern.webp",
},
"complex-pattern": {
name: "複雑な柄",
image: "images/avoid-complex-pattern.webp",
},
"mini-length": {
name: "ミニ丈",
image: "images/avoid-mini-length.webp",
},
"excessive-exposure": {
name: "露出が多い",
image: "images/avoid-excessive-exposure.webp",
},
"frills-lace": {
name: "フリル/レース",
image: "images/avoid-frills-lace.webp",
},
"high-heels": {
name: "高いヒール",
image: "images/avoid-high-heels.webp",
},
"thin-material": {
name: "薄い素材",
image: "images/avoid-thin-material.webp",
},
ruffles: {
name: "ラッフル",
image: "images/avoid-ruffles.webp",
},
"animal-pattern": {
name: "アニマル柄",
image: "images/avoid-animal-pattern.webp",
},
"bold-print": {
name: "派手な柄",
image: "images/avoid-bold-print.webp",
},
},
},
clothingItems: {
male: {
suits: {
name: "スーツ",
image: "images/item-suits.webp",
},
shirts: {
name: "シャツ",
image: "images/item-shirts.webp",
},
shirts: {
name: "Tシャツ",
image: "images/item-tshirts.webp",
},
polos: {
name: "ポロシャツ",
image: "images/item-polos.webp",
},
knitwear: {
name: "ニット・セーター",
image: "images/item-knitwear.webp",
},
hoodies: {
name: "パーカー",
image: "images/item-hoodies.webp",
},
jeans: {
name: "ジーンズ",
image: "images/item-jeans.webp",
},
chinos: {
name: "チノパン",
image: "images/item-chinos.webp",
},
shorts: {
name: "ショートパンツ",
image: "images/item-shorts.webp",
},
jackets: {
name: "ジャケット",
image: "images/item-jackets.webp",
},
coats: {
name: "コート",
image: "images/item-coats.webp",
},
sneakers: {
name: "スニーカー",
image: "images/item-sneakers.webp",
},
boots: {
name: "ブーツ",
image: "images/item-boots.webp",
},
"leather-shoes": {
name: "革靴",
image: "images/item-leather-shoes.webp",
},
},
female: {
dresses: {
name: "ワンピース",
image: "images/item-dresses.webp",
},
blouses: {
name: "ブラウス",
image: "images/item-blouses.webp",
},
shirts: {
name: "Tシャツ",
image: "images/item-tshirts-female.webp",
},
knitwear: {
name: "ニット・セーター",
image: "images/item-knitwear-female.webp",
},
cardigans: {
name: "カーディガン",
image: "images/item-cardigans.webp",
},
skirts: {
name: "スカート",
image: "images/item-skirts.webp",
},
pants: {
name: "パンツ",
image: "images/item-pants-female.webp",
},
jeans: {
name: "ジーンズ",
image: "images/item-jeans-female.webp",
},
jackets: {
name: "ジャケット",
image: "images/item-jackets-female.webp",
},
coats: {
name: "コート",
image: "images/item-coats-female.webp",
},
pumps: {
name: "パンプス",
image: "images/item-pumps.webp",
},
sneakers: {
name: "スニーカー",
image: "images/item-sneakers-female.webp",
},
sandals: {
name: "サンダル",
image: "images/item-sandals.webp",
},
boots: {
name: "ブーツ",
image: "images/item-boots-female.webp",
},
},
},
scenes: {
male: {
business: {
name: "ビジネスシーン",
image: "images/scene-business-male.webp",
},
casual: {
name: "カジュアルシーン",
image: "images/scene-casual-male.webp",
},
formal: {
name: "フォーマルシーン",
image: "images/scene-formal-male.webp",
},
},
female: {
business: {
name: "ビジネスシーン",
image: "images/scene-business-female.webp",
},
casual: {
name: "カジュアルシーン",
image: "images/scene-casual-female.webp",
},
formal: {
name: "フォーマルシーン",
image: "images/scene-formal-female.webp",
},
},
},
placeholders: {
male: "images/placeholder-male.webp",
female: "images/placeholder-female.webp",
},
stylePatterns: {
male: {
suit: [
{
id: "male-suit-1",
name: "３ピーススーツのクラシックスタイル",
image: "style-male-suit-1.webp",
},
{
id: "male-suit-2",
name: "ダブルジャケット",
image: "style-male-suit-2.webp",
},
{
id: "male-suit-3",
name: "Tシャツとセットアップスタイル",
image: "style-male-suit-3.webp",
},
{
id: "male-suit-4",
name: "シャツスタイル",
image: "style-male-suit-4.webp",
},
{
id: "male-suit-5",
name: "スマートカジュアル",
image: "style-male-suit-5.webp",
},
{
id: "male-suit-6",
name: "クラシック２ピーススーツ",
image: "style-male-suit-6.webp",
},
{
id: "male-suit-7",
name: "セパレートスタイル",
image: "style-male-suit-7.webp",
},
{
id: "male-suit-8",
name: "ジャケット×デニムの大人カジュアルコーデ",
image: "style-male-suit-8.webp",
},
{
id: "male-suit-9",
name: "シャツスタイル",
image: "style-male-suit-9.webp",
},
{
id: "male-suit-10",
name: "スマートカジュアル",
image: "style-male-suit-10.webp",
},
{
id: "male-suit-11",
name: "英国紳士スタイル",
image: "style-male-suit-11.webp",
},
{
id: "male-suit-12",
name: "セパレートスタイル",
image: "style-male-suit-12.webp",
},
{
id: "male-suit-13",
name: "セパレートスタイル",
image: "style-male-suit-13.webp",
},
{
id: "male-suit-14",
name: "シャツスタイル",
image: "style-male-suit-14.webp",
},
{
id: "male-suit-15",
name: "スマートカジュアル",
image: "style-male-suit-15.webp",
},
],
mode: [
{
id: "male-mode-1",
name: "エレガントモード",
image: "style-male-mode-1.webp",
},
{
id: "male-mode-2",
name: "ハイエンドストリート",
image: "style-male-mode-2.webp",
},
{
id: "male-mode-3",
name: "ストリートミックス",
image: "style-male-mode-3.webp",
},
{
id: "male-mode-4",
name: "ストリートミックス",
image: "style-male-mode-4.webp",
},
{
id: "male-mode-5",
name: "カジュアルモード",
image: "style-male-mode-5.webp",
},
{
id: "male-mode-6",
name: "エレガントモード",
image: "style-male-mode-6.webp",
},
{
id: "male-mode-7",
name: "ハイエンドストリート",
image: "style-male-mode-7.webp",
},
{
id: "male-mode-8",
name: "ストリートミックス",
image: "style-male-mode-8.webp",
},
{
id: "male-mode-9",
name: "カジュアルモード",
image: "style-male-mode-9.webp",
},
{
id: "male-mode-10",
name: "カジュアルモード",
image: "style-male-mode-10.webp",
},
{
id: "male-mode-11",
name: "ハイエンドストリート",
image: "style-male-mode-11.webp",
},
{
id: "male-mode-12",
name: "ハイエンドストリート",
image: "style-male-mode-12.webp",
},
{
id: "male-mode-13",
name: "ストリートミックス",
image: "style-male-mode-13.webp",
},
{
id: "male-mode-14",
name: "カジュアルモード",
image: "style-male-mode-14.webp",
},
{
id: "male-mode-15",
name: "カジュアルモード",
image: "style-male-mode-15.webp",
},
],
elegant: [
{
id: "male-elegant-1",
name: "エレガントクラシック",
image: "style-male-elegant-1.webp",
},
{
id: "male-elegant-2",
name: "エレガントクラシック",
image: "style-male-elegant-2.webp",
},
{
id: "male-elegant-3",
name: "エレガントモード",
image: "style-male-elegant-3.webp",
},
{
id: "male-elegant-4",
name: "エレガントモード",
image: "style-male-elegant-4.webp",
},
{
id: "male-elegant-5",
name: "カジュアルミックス",
image: "style-male-elegant-5.webp",
},
{
id: "male-elegant-6",
name: "エレガントクラシック",
image: "style-male-elegant-6.webp",
},
{
id: "male-elegant-7",
name: "エレガントクラシック",
image: "style-male-elegant-7.webp",
},
{
id: "male-elegant-8",
name: "エレガントモード",
image: "style-male-elegant-8.webp",
},
{
id: "male-elegant-9",
name: "エレガントモード",
image: "style-male-elegant-9.webp",
},
{
id: "male-elegant-10",
name: "カジュアルミックス",
image: "style-male-elegant-10.webp",
},
{
id: "male-elegant-11",
name: "エレガントモード",
image: "style-male-elegant-11.webp",
},
{
id: "male-elegant-12",
name: "エレガントモード",
image: "style-male-elegant-12.webp",
},
{
id: "male-elegant-13",
name: "エレガントクラシック",
image: "style-male-elegant-13.webp",
},
{
id: "male-elegant-14",
name: "カジュアルミックス",
image: "style-male-elegant-14.webp",
},
{
id: "male-elegant-15",
name: "カジュアルミックス",
image: "style-male-elegant-15.webp",
},
],
minimal: [
{
id: "male-minimal-1",
name: "綺麗めシンプル",
image: "style-male-minimal-1.webp",
},
{
id: "male-minimal-2",
name: "モードミックス",
image: "style-male-minimal-2.webp",
},
{
id: "male-minimal-3",
name: "リラックス",
image: "style-male-minimal-3.webp",
},
{
id: "male-minimal-4",
name: "カジュアルシンプル",
image: "style-male-minimal-4.webp",
},
{
id: "male-minimal-5",
name: "カジュアルスポーティー",
image: "style-male-minimal-5.webp",
},
{
id: "male-minimal-6",
name: "綺麗めシンプル",
image: "style-male-minimal-6.webp",
},
{
id: "male-minimal-7",
name: "リラックスモード",
image: "style-male-minimal-7.webp",
},
{
id: "male-minimal-8",
name: "リラックス",
image: "style-male-minimal-8.webp",
},
{
id: "male-minimal-9",
name: "カジュアル",
image: "style-male-minimal-9.webp",
},
{
id: "male-minimal-10",
name: "カジュアルスポーティー",
image: "style-male-minimal-10.webp",
},
{
id: "male-minimal-11",
name: "エレガントリラックス",
image: "style-male-minimal-11.webp",
},
{
id: "male-minimal-12",
name: "リラックスモード",
image: "style-male-minimal-12.webp",
},
{
id: "male-minimal-13",
name: "綺麗めシンプル",
image: "style-male-minimal-13.webp",
},
{
id: "male-minimal-14",
name: "カジュアル",
image: "style-male-minimal-14.webp",
},
{
id: "male-minimal-15",
name: "カジュアルスポーティー",
image: "style-male-minimal-15.webp",
},
],
street: [
{
id: "male-street-1",
name: "オーバーシルエット",
image: "style-male-street-1.webp",
},
{
id: "male-street-2",
name: "アメカジミックス",
image: "style-male-street-2.webp",
},
{
id: "male-street-3",
name: "シャツで綺麗めストリート",
image: "style-male-street-3.webp",
},
{
id: "male-street-4",
name: "スポーティーモード",
image: "style-male-street-4.webp",
},
{
id: "male-street-5",
name: "モノトーンカジュアル",
image: "style-male-street-5.webp",
},
{
id: "male-street-6",
name: "オーバーシルエット",
image: "style-male-street-6.webp",
},
{
id: "male-street-7",
name: "アメカジミックス",
image: "style-male-street-7.webp",
},
{
id: "male-street-8",
name: "スポーティー",
image: "style-male-street-8.webp",
},
{
id: "male-street-9",
name: "アウトドア",
image: "style-male-street-9.webp",
},
{
id: "male-street-10",
name: "アウトドア",
image: "style-male-street-10.webp",
},
{
id: "male-street-11",
name: "オーバーシルエット",
image: "style-male-street-11.webp",
},
{
id: "male-street-12",
name: "ショート丈・ハイウエスト",
image: "style-male-street-12.webp",
},
{
id: "male-street-13",
name: "ショートパンツの脚見せスタイル",
image: "style-male-street-13.webp",
},
{
id: "male-street-14",
name: "スポーティー",
image: "style-male-street-14.webp",
},
{
id: "male-street-15",
name: "ショートパンツの脚見せスタイル",
image: "style-male-street-15.webp",
},
],
searf: [
{
id: "male-searf-1",
name: "サマーニットのゆったりスタイル",
image: "style-male-searf-1.webp",
},
{
id: "male-searf-2",
name: "シャツ合わせのリラックススタイル",
image: "style-male-searf-2.webp",
},
{
id: "male-searf-3",
name: "ビタミンカラーでアクティブサーフ",
image: "style-male-searf-3.webp",
},
{
id: "male-searf-4",
name: "柔らかい印象の大人サーフ",
image: "style-male-searf-4.webp",
},
{
id: "male-searf-5",
name: "セットアップ合わせ",
image: "style-male-searf-5.webp",
},
{
id: "male-searf-6",
name: "柄シャツがポップなボヘミアンサーフ",
image: "style-male-searf-6.webp",
},
{
id: "male-searf-7",
name: "白基調の爽やかスタイル",
image: "style-male-searf-7.webp",
},
{
id: "male-searf-8",
name: "白・ブルーの爽やかスタイル",
image: "style-male-searf-8.webp",
},
{
id: "male-searf-9",
name: "ロングシャツで縦ラインのシルエット",
image: "style-male-searf-9.webp",
},
{
id: "male-searf-10",
name: "シャツ合わせのリラックススタイル",
image: "style-male-searf-10.webp",
},
{
id: "male-searf-11",
name: "柄シャツがポップなボヘミアンサーフ",
image: "style-male-searf-11.webp",
},
{
id: "male-searf-12",
name: "サマーニットのゆったりスタイル",
image: "style-male-searf-12.webp",
},
{
id: "male-searf-13",
name: "シャツ合わせのリラックススタイル",
image: "style-male-searf-13.webp",
},
{
id: "male-searf-14",
name: "モノトーンなモードサーフ",
image: "style-male-searf-14.webp",
},
{
id: "male-searf-15",
name: "シャツ合わせのリラックススタイル",
image: "style-male-searf-15.webp",
},
],
"american-casual": [
{
id: "male-amecas-1",
name: "カモフラ柄がポイントのワークミックス",
image: "style-male-amecas-1.webp",
},
{
id: "male-amecas-2",
name: "ワークミックス",
image: "style-male-amecas-2.webp",
},
{
id: "male-amecas-3",
name: "大人カジュアル",
image: "style-male-amecas-3.webp",
},
{
id: "male-amecas-4",
name: "ミリタリー",
image: "style-male-amecas-4.webp",
},
{
id: "male-amecas-5",
name: "ヘリテージ",
image: "style-male-amecas-5.webp",
},
{
id: "male-amecas-6",
name: "ルード",
image: "style-male-amecas-6.webp",
},
{
id: "male-amecas-7",
name: "バイカー",
image: "style-male-amecas-7.webp",
},
{
id: "male-amecas-8",
name: "グランジ",
image: "style-male-amecas-8.webp",
},
{
id: "male-amecas-9",
name: "カレッジ",
image: "style-male-amecas-9.webp",
},
{
id: "male-amecas-10",
name: "デニムスタイル",
image: "style-male-amecas-10.webp",
},
{
id: "male-amecas-11",
name: "ヴィンテージスポーツ",
image: "style-male-amecas-11.webp",
},
{
id: "male-amecas-12",
name: "アウトドア",
image: "style-male-amecas-12.webp",
},
{
id: "male-amecas-13",
name: "ネイティブ",
image: "style-male-amecas-13.webp",
},
{
id: "male-amecas-14",
name: "ルート66",
image: "style-male-amecas-14.webp",
},
{
id: "male-amecas-15",
name: "ラギッド",
image: "style-male-amecas-15.webp",
},
],
},
female: {
mode: [
{
id: "female-mode-1",
name: "エレガントモード",
image: "style-female-mode-1.webp",
},
{
id: "female-mode-2",
name: "エレガントモード",
image: "style-female-mode-2.webp",
},
{
id: "female-mode-3",
name: "メンズライク",
image: "style-female-mode-3.webp",
},
{
id: "female-mode-4",
name: "メンズライク",
image: "style-female-mode-4.webp",
},
{
id: "female-mode-5",
name: "カジュアルミックス",
image: "style-female-mode-5.webp",
},
{
id: "female-mode-6",
name: "エレガントモード",
image: "style-female-mode-6.webp",
},
{
id: "female-mode-7",
name: "エレガントモード",
image: "style-female-mode-7.webp",
},
{
id: "female-mode-8",
name: "エレガントモード",
image: "style-female-mode-8.webp",
},
{
id: "female-mode-9",
name: "メンズライク",
image: "style-female-mode-9.webp",
},
{
id: "female-mode-10",
name: "メンズライク",
image: "style-female-mode-10.webp",
},
{
id: "female-mode-11",
name: "エレガントモード",
image: "style-female-mode-11.webp",
},
{
id: "female-mode-12",
name: "エレガントモード",
image: "style-female-mode-12.webp",
},
{
id: "female-mode-13",
name: "ストリートミックス",
image: "style-female-mode-13.webp",
},
{
id: "female-mode-14",
name: "ストリート",
image: "style-female-mode-14.webp",
},
{
id: "female-mode-15",
name: "アーバンミックス",
image: "style-female-mode-15.webp",
},
],
elegant: [
{
id: "female-elegant-1",
name: "クラシック",
image: "style-female-elegant-1.webp",
},
{
id: "female-elegant-2",
name: "フェミニンミックス",
image: "style-female-elegant-2.webp",
},
{
id: "female-elegant-3",
name: "クール",
image: "style-female-elegant-3.webp",
},
{
id: "female-elegant-4",
name: "カジュアルミックス",
image: "style-female-elegant-4.webp",
},
{
id: "female-elegant-5",
name: "カジュアルミックス",
image: "style-female-elegant-5.webp",
},
{
id: "female-elegant-6",
name: "クリーンなイメージ",
image: "style-female-elegant-6.webp",
},
{
id: "female-elegant-7",
name: "クラシック",
image: "style-female-elegant-7.webp",
},
{
id: "female-elegant-8",
name: "クラシック",
image: "style-female-elegant-8.webp",
},
{
id: "female-elegant-9",
name: "カジュアルミックス",
image: "style-female-elegant-9.webp",
},
{
id: "female-elegant-10",
name: "アーバン",
image: "style-female-elegant-10.webp",
},
{
id: "female-elegant-11",
name: "クラシック",
image: "style-female-elegant-11.webp",
},
{
id: "female-elegant-12",
name: "フェミニンミックス",
image: "style-female-elegant-12.webp",
},
{
id: "female-elegant-13",
name: "フェミニンミックス",
image: "style-female-elegant-13.webp",
},
{
id: "female-elegant-14",
name: "カジュアルミックス",
image: "style-female-elegant-14.webp",
},
{
id: "female-elegant-15",
name: "アーバン",
image: "style-female-elegant-15.webp",
},
],
"urban-conservative": [
{
id: "female-urban-1",
name: "アーバンカジュアル",
image: "style-female-urban-conservative-1.webp",
},
{
id: "female-urban-2",
name: "ジャケットスタイル",
image: "style-female-urban-conservative-2.webp",
},
{
id: "female-urban-3",
name: "オフィススタイル",
image: "style-female-urban-conservative-3.webp",
},
{
id: "female-urban-4",
name: "セットアップ",
image: "style-female-urban-conservative-4.webp",
},
{
id: "female-urban-5",
name: "オフィスカジュアル",
image: "style-female-urban-conservative-5.webp",
},
{
id: "female-urban-6",
name: "アーバンカジュアル",
image: "style-female-urban-conservative-6.webp",
},
{
id: "female-urban-7",
name: "ジャケットスタイル",
image: "style-female-urban-conservative-7.webp",
},
{
id: "female-urban-8",
name: "オフィススタイル",
image: "style-female-urban-conservative-8.webp",
},
{
id: "female-urban-9",
name: "アーバンカジュアル",
image: "style-female-urban-conservative-9.webp",
},
{
id: "female-urban-10",
name: "アーバン",
image: "style-female-urban-conservative-10.webp",
},
{
id: "female-urban-11",
name: "コンサバティブ",
image: "style-female-urban-conservative-11.webp",
},
{
id: "female-urban-12",
name: "ジャケットスタイル",
image: "style-female-urban-conservative-12.webp",
},
{
id: "female-urban-13",
name: "オフィスカジュアル",
image: "style-female-urban-conservative-13.webp",
},
{
id: "female-urban-14",
name: "オフィスカジュアル",
image: "style-female-urban-conservative-14.webp",
},
{
id: "female-urban-15",
name: "オフィスカジュアル",
image: "style-female-urban-conservative-15.webp",
},
],
feminine: [
{
id: "female-feminine-1",
name: "アーバンミックス",
image: "style-female-feminine-1.webp",
},
{
id: "female-feminine-2",
name: "クールフェミニン",
image: "style-female-feminine-2.webp",
},
{
id: "female-feminine-3",
name: "カジュアルミックス",
image: "style-female-feminine-3.webp",
},
{
id: "female-feminine-4",
name: "女性らしい、タイトライン",
image: "style-female-feminine-4.webp",
},
{
id: "female-feminine-5",
name: "Aライン、女性らしさ",
image: "style-female-feminine-5.webp",
},
{
id: "female-feminine-6",
name: "ポップな印象のアクティブフェミニン",
image: "style-female-feminine-6.webp",
},
{
id: "female-feminine-7",
name: "大人フェミニン",
image: "style-female-feminine-7.webp",
},
{
id: "female-feminine-8",
name: "クールミックス",
image: "style-female-feminine-8.webp",
},
{
id: "female-feminine-9",
name: "ドット柄のレトロな印象の綺麗めスタイル",
image: "style-female-feminine-9.webp",
},
{
id: "female-feminine-10",
name: "カジュアルミックス",
image: "style-female-feminine-10.webp",
},
{
id: "female-feminine-11",
name: "アーバンミックス",
image: "style-female-feminine-11.webp",
},
{
id: "female-feminine-12",
name: "大人フェミニン",
image: "style-female-feminine-12.webp",
},
{
id: "female-feminine-13",
name: "クールミックス",
image: "style-female-feminine-13.webp",
},
{
id: "female-feminine-14",
name: "マーメイドライン",
image: "style-female-feminine-14.webp",
},
{
id: "female-feminine-15",
name: "Aライン・可愛らしさ",
image: "style-female-feminine-15.webp",
},
],
sporty: [
{
id: "female-sporty-1",
name: "モードミックス",
image: "style-female-sporty-1.webp",
},
{
id: "female-sporty-2",
name: "アメカジ風",
image: "style-female-sporty-2.webp",
},
{
id: "female-sporty-3",
name: "メンズライクなモードカジュアル",
image: "style-female-sporty-3.webp",
},
{
id: "female-sporty-4",
name: "オーバーシルエット",
image: "style-female-sporty-4.webp",
},
{
id: "female-sporty-5",
name: "リラックススポーティー",
image: "style-female-sporty-5.webp",
},
{
id: "female-sporty-6",
name: "モードミックス",
image: "style-female-sporty-6.webp",
},
{
id: "female-sporty-7",
name: "アメカジ風",
image: "style-female-sporty-7.webp",
},
{
id: "female-sporty-8",
name: "フレンチカジュアル",
image: "style-female-sporty-8.webp",
},
{
id: "female-sporty-9",
name: "オーバーシルエット",
image: "style-female-sporty-9.webp",
},
{
id: "female-sporty-10",
name: "リラックススポーティー",
image: "style-female-sporty-10.webp",
},
{
id: "female-sporty-11",
name: "モードミックス",
image: "style-female-sporty-11.webp",
},
{
id: "female-sporty-12",
name: "アメカジ風",
image: "style-female-sporty-12.webp",
},
{
id: "female-sporty-13",
name: "メンズライクなモードカジュアル",
image: "style-female-sporty-13.webp",
},
{
id: "female-sporty-14",
name: "メンズライク",
image: "style-female-sporty-14.webp",
},
{
id: "female-sporty-15",
name: "リラックススポーティー",
image: "style-female-sporty-15.webp",
},
],
bohemian: [
{
id: "female-bohemian-1",
name: "ワンピーススタイル",
image: "style-female-bohemian-1.webp",
},
{
id: "female-bohemian-2",
name: "大人リゾート",
image: "style-female-bohemian-2.webp",
},
{
id: "female-bohemian-3",
name: "デニムスタイル",
image: "style-female-bohemian-3.webp",
},
{
id: "female-bohemian-4",
name: "ナチュラルスタイル",
image: "style-female-bohemian-4.webp",
},
{
id: "female-bohemian-5",
name: "フェミニンミックス",
image: "style-female-bohemian-5.webp",
},
{
id: "female-bohemian-6",
name: "ワンピーススタイル",
image: "style-female-bohemian-6.webp",
},
{
id: "female-bohemian-7",
name: "オシャレレイヤード",
image: "style-female-bohemian-7.webp",
},
{
id: "female-bohemian-8",
name: "ロックスタイル",
image: "style-female-bohemian-8.webp",
},
{
id: "female-bohemian-9",
name: "女性らしいスタイル",
image: "style-female-bohemian-9.webp",
},
{
id: "female-bohemian-10",
name: "モダンミックス",
image: "style-female-bohemian-10.webp",
},
{
id: "female-bohemian-11",
name: "ワンピーススタイル",
image: "style-female-bohemian-11.webp",
},
{
id: "female-bohemian-12",
name: "大人シック",
image: "style-female-bohemian-12.webp",
},
{
id: "female-bohemian-13",
name: "デニムスタイル",
image: "style-female-bohemian-13.webp",
},
{
id: "female-bohemian-14",
name: "女性らしいスタイル",
image: "style-female-bohemian-14.webp",
},
{
id: "female-bohemian-15",
name: "カジュアルミックス",
image: "style-female-bohemian-15.webp",
},
],
"cool-rock": [
{
id: "female-cool-rock-1",
name: "個性モード",
image: "style-female-cool-rock-1.webp",
},
{
id: "female-cool-rock-2",
name: "エレガントミックス",
image: "style-female-cool-rock-2.webp",
},
{
id: "female-cool-rock-3",
name: "スカートスタイル",
image: "style-female-cool-rock-3.webp",
},
{
id: "female-cool-rock-4",
name: "ナチュラルミックス",
image: "style-female-cool-rock-4.webp",
},
{
id: "female-cool-rock-5",
name: "シンプル",
image: "style-female-cool-rock-5.webp",
},
{
id: "female-cool-rock-6",
name: "モードスタイル",
image: "style-female-cool-rock-6.webp",
},
{
id: "female-cool-rock-7",
name: "ジャケットスタイル",
image: "style-female-cool-rock-7.webp",
},
{
id: "female-cool-rock-8",
name: "スカートスタイル",
image: "style-female-cool-rock-8.webp",
},
{
id: "female-cool-rock-9",
name: "カジュアルミックス",
image: "style-female-cool-rock-9.webp",
},
{
id: "female-cool-rock-10",
name: "シンプル",
image: "style-female-cool-rock-10.webp",
},
{
id: "female-cool-rock-11",
name: "モード",
image: "style-female-cool-rock-11.webp",
},
{
id: "female-cool-rock-12",
name: "ジャケットスタイル",
image: "style-female-cool-rock-12.webp",
},
{
id: "female-cool-rock-13",
name: "スカートスタイル",
image: "style-female-cool-rock-13.webp",
},
{
id: "female-cool-rock-14",
name: "ミリタリーミックス",
image: "style-female-cool-rock-14.webp",
},
{
id: "female-cool-rock-15",
name: "シンプル",
image: "style-female-cool-rock-15.webp",
},
],
"vibrant-color": [
{
id: "female-vibrant-color-1",
name: "柄セットアップ",
image: "style-female-vibrant-color-1.webp",
},
{
id: "female-vibrant-color-2",
name: "柄シャツミックス",
image: "style-female-vibrant-color-2.webp",
},
{
id: "female-vibrant-color-3",
name: "カラーブロック",
image: "style-female-vibrant-color-3.webp",
},
{
id: "female-vibrant-color-4",
name: "Tシャツ合わせ",
image: "style-female-vibrant-color-4.webp",
},
{
id: "female-vibrant-color-5",
name: "シンプル",
image: "style-female-vibrant-color-5.webp",
},
{
id: "female-vibrant-color-6",
name: "カラージャケットスタイル",
image: "style-female-vibrant-color-6.webp",
},
{
id: "female-vibrant-color-7",
name: "デニムミックス",
image: "style-female-vibrant-color-7.webp",
},
{
id: "female-vibrant-color-8",
name: "カラーブロック",
image: "style-female-vibrant-color-8.webp",
},
{
id: "female-vibrant-color-9",
name: "Tシャツ合わせ",
image: "style-female-vibrant-color-9.webp",
},
{
id: "female-vibrant-color-10",
name: "シンプル",
image: "style-female-vibrant-color-10.webp",
},
{
id: "female-vibrant-color-11",
name: "カラージャケットスタイル",
image: "style-female-vibrant-color-11.webp",
},
{
id: "female-vibrant-color-12",
name: "カジュアルミックス",
image: "style-female-vibrant-color-12.webp",
},
{
id: "female-vibrant-color-13",
name: "カラーブロック",
image: "style-female-vibrant-color-13.webp",
},
{
id: "female-vibrant-color-14",
name: "Tシャツ合わせ",
image: "style-female-vibrant-color-14.webp",
},
{
id: "female-vibrant-color-15",
name: "シンプル",
image: "style-female-vibrant-color-15.webp",
},
],
natural: [
{
id: "female-natural-1",
name: "大人リラックス",
image: "style-female-natural-1.webp",
},
{
id: "female-natural-2",
name: "サマーニットスタイル",
image: "style-female-natural-2.webp",
},
{
id: "female-natural-3",
name: "オーバーシャツスタイル",
image: "style-female-natural-3.webp",
},
{
id: "female-natural-4",
name: "メンズライク",
image: "style-female-natural-4.webp",
},
{
id: "female-natural-5",
name: "シンプル",
image: "style-female-natural-5.webp",
},
{
id: "female-natural-6",
name: "大人リラックス",
image: "style-female-natural-6.webp",
},
{
id: "female-natural-7",
name: "サマーニットスタイル",
image: "style-female-natural-7.webp",
},
{
id: "female-natural-8",
name: "オーバーシャツスタイル",
image: "style-female-natural-8.webp",
},
{
id: "female-natural-9",
name: "メンズライク",
image: "style-female-natural-9.webp",
},
{
id: "female-natural-10",
name: "シンプル",
image: "style-female-natural-10.webp",
},
{
id: "female-natural-11",
name: "大人リラックス",
image: "style-female-natural-11.webp",
},
{
id: "female-natural-12",
name: "サマーニットスタイル",
image: "style-female-natural-12.webp",
},
{
id: "female-natural-13",
name: "オーバーシャツスタイル",
image: "style-female-natural-13.webp",
},
{
id: "female-natural-14",
name: "メンズライク",
image: "style-female-natural-14.webp",
},
{
id: "female-natural-15",
name: "シンプル",
image: "style-female-natural-15.webp",
},
],
},
},
};
if (typeof module !== "undefined" && module.exports) {
module.exports = imageMapping;
}
if (typeof window.imageMapping === "undefined") {
window.imageMapping = imageMapping;
}
class FormValidator {
constructor(formId) {
his.form = document.getElementById(formId);
his.errors = {};
his.validationRules = {
required: (value) => value && value.toString().trim() !== "",
email: (value) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value),
phone: (value) =>
/^[\d\-\+\(\)\s]+$/.test(value) &&
value.replace(/\D/g, "").length >= 10,
postal: (value) => /^\d{3}-?\d{4}$/.test(value),
minLength: (value, min) => value && value.length >= min,
maxLength: (value, max) => value && value.length <= max,
number: (value) => !isNaN(value) && isFinite(value),
date: (value) => !isNaN(Date.parse(value)),
};
his.errorMessages = {
required: "この項目は必須です",
email: "有効なメールアドレスを入力してください",
phone: "有効な電話番号を入力してください",
postal: "有効な郵便番号を入力してください（例: 123-4567）",
minLength: (min) => `${min}文字以上入力してください`,
maxLength: (max) => `${max}文字以内で入力してください`,
number: "数値を入力してください",
date: "有効な日付を入力してください",
};
his.init();
}
init() {
if (!this.form) return;
his.form.addEventListener("input", (e) => {
if (e.target.matches("input, select, textarea")) {
his.validateField(e.target);
}
});
his.form.addEventListener(
"blur",
(e) => {
if (e.target.matches("input, select, textarea")) {
his.validateField(e.target);
}
},
rue
);
his.form.addEventListener("submit", (e) => {
e.preventDefault();
if (this.validateForm()) {
his.submitForm();
} else {
his.showValidationSummary();
}
});
his.setupValidationAttributes();
}
setupValidationAttributes() {
const requiredFields = this.form.querySelectorAll(
"[required], label:has(.required) + *"
);
requiredFields.forEach((field) => {
field.setAttribute("data-validate", "required");
field.setAttribute("aria-required", "true");
});
const emailFields = this.form.querySelectorAll(
'input[type="email"], input[name*="email"]'
);
emailFields.forEach((field) => {
const rules = field.getAttribute("data-validate") || "";
field.setAttribute("data-validate", `${rules} email`.trim());
});
const phoneFields = this.form.querySelectorAll(
'input[type="tel"], input[name*="phone"], input[name*="tel"]'
);
phoneFields.forEach((field) => {
const rules = field.getAttribute("data-validate") || "";
field.setAttribute("data-validate", `${rules} phone`.trim());
});
const postalFields = this.form.querySelectorAll(
'input[name*="postal"], input[name*="zip"]'
);
postalFields.forEach((field) => {
const rules = field.getAttribute("data-validate") || "";
field.setAttribute("data-validate", `${rules} postal`.trim());
});
}
validateField(field) {
const fieldName = field.name || field.id;
const value = field.value;
const rules = field.getAttribute("data-validate");
if (!rules) return true;
const ruleList = rules.split(" ").filter((r) => r);
let isValid = true;
for (const rule of ruleList) {
if (rule === "required" && !this.validationRules.required(value)) {
his.setFieldError(field, this.errorMessages.required);
isValid = false;
break;
} else if (
rule === "email" &&
value &&
!this.validationRules.email(value)
) {
his.setFieldError(field, this.errorMessages.email);
isValid = false;
break;
} else if (
rule === "phone" &&
value &&
!this.validationRules.phone(value)
) {
his.setFieldError(field, this.errorMessages.phone);
isValid = false;
break;
} else if (
rule === "postal" &&
value &&
!this.validationRules.postal(value)
) {
his.setFieldError(field, this.errorMessages.postal);
isValid = false;
break;
}
}
if (isValid) {
his.clearFieldError(field);
}
return isValid;
}
validateForm() {
const fields = this.form.querySelectorAll("input, select, textarea");
let isValid = true;
fields.forEach((field) => {
if (!this.validateField(field)) {
isValid = false;
}
});
const checkboxGroups = this.form.querySelectorAll(
'.checkbox-group[data-required="true"]'
);
checkboxGroups.forEach((group) => {
const checkedBoxes = group.querySelectorAll(
'input[type="checkbox"]:checked'
);
if (checkedBoxes.length === 0) {
his.setGroupError(group, "少なくとも1つ選択してください");
isValid = false;
} else {
his.clearGroupError(group);
}
});
const radioGroups = this.form.querySelectorAll(
'.radio-group[data-required="true"]'
);
radioGroups.forEach((group) => {
const checkedRadio = group.querySelector('input[type="radio"]:checked');
if (!checkedRadio) {
his.setGroupError(group, "いずれか1つを選択してください");
isValid = false;
} else {
his.clearGroupError(group);
}
});
return isValid;
}
setFieldError(field, message) {
his.clearFieldError(field);
field.classList.add("error");
const errorEl = document.createElement("span");
errorEl.className = "error-message";
errorEl.textContent = message;
errorEl.setAttribute("role", "alert");
errorEl.setAttribute("aria-live", "polite");
field.parentNode.insertBefore(errorEl, field.nextSibling);
field.setAttribute("aria-invalid", "true");
field.setAttribute("aria-describedby", errorEl.id);
}
clearFieldError(field) {
field.classList.remove("error");
field.removeAttribute("aria-invalid");
field.removeAttribute("aria-describedby");
const error = field.parentNode.querySelector(".error-message");
if (error) {
error.remove();
}
}
setGroupError(group, message) {
his.clearGroupError(group);
group.classList.add("error");
const errorEl = document.createElement("span");
errorEl.className = "error-message group-error";
errorEl.textContent = message;
errorEl.setAttribute("role", "alert");
group.appendChild(errorEl);
}
clearGroupError(group) {
group.classList.remove("error");
const error = group.querySelector(".group-error");
if (error) {
error.remove();
}
}
showValidationSummary() {
const firstError = this.form.querySelector(".error");
if (firstError) {
firstError.scrollIntoView({ behavior: "smooth", block: "center" });
const focusableField = firstError.matches("input, select, textarea")
? firstError
: firstError.querySelector("input, select, textarea");
if (focusableField) {
focusableField.focus();
}
}
}
showNotification(message, type = "info") {
const existing = document.querySelector(".validation-notification");
if (existing) {
existing.remove();
}
const notification = document.createElement("div");
notification.className = `validation-notification ${type}`;
notification.setAttribute("role", "alert");
notification.innerHTML = `
<span class="notification-message">${message}</span>
<button class="notification-close" aria-label="閉じる">&times;</button>
`;
document.body.appendChild(notification);
setTimeout(() => {
notification.classList.add("fade-out");
setTimeout(() => notification.remove(), 300);
}, 5000);
notification
.querySelector(".notification-close")
.addEventListener("click", () => {
notification.remove();
});
}
async submitForm() {
const formData = new FormData(this.form);
const data = Object.fromEntries(formData.entries());
const submitBtn = this.form.querySelector('button[type="submit"]');
const originalText = submitBtn.textContent;
submitBtn.textContent = "送信中...";
submitBtn.disabled = true;
ry {
await new Promise((resolve) => setTimeout(resolve, 1500));
his.showNotification("フォームが正常に送信されました！", "success");
localStorage.setItem(
"formSubmission",
JSON.stringify({
data: data,
imestamp: new Date().toISOString(),
})
);
if (confirm("送信が完了しました。フォームをリセットしますか？")) {
his.form.reset();
window.scrollTo({ top: 0, behavior: "smooth" });
}
} catch (error) {
his.showNotification(
"送信中にエラーが発生しました。もう一度お試しください。",
"error"
);
} finally {
submitBtn.textContent = originalText;
submitBtn.disabled = false;
}
}
}
document.addEventListener("DOMContentLoaded", () => {
window.formValidator = new FormValidator("styleForm");
});
if (typeof module !== "undefined" && module.exports) {
module.exports = FormValidator;
}
class FormStateManager {
constructor(formId, options = {}) {
his.form = document.getElementById(formId);
his.storageKey = options.storageKey || "formState";
his.autoSaveInterval = options.autoSaveInterval || 5000;
his.autoSaveTimer = null;
his.isDirty = false;
his.lastSaved = null;
his.handleChange = this.handleChange.bind(this);
his.handleBeforeUnload = this.handleBeforeUnload.bind(this);
his.init();
}
init() {
if (!this.form) return;
his.loadState();
his.setupEventListeners();
his.startAutoSave();
his.addSaveIndicator();
}
setupEventListeners() {
his.form.addEventListener("input", this.handleChange);
his.form.addEventListener("change", this.handleChange);
window.addEventListener("beforeunload", this.handleBeforeUnload);
document.addEventListener("visibilitychange", () => {
if (document.hidden && this.isDirty) {
his.saveState();
}
});
}
handleChange(event) {
his.isDirty = true;
if (this.autoSaveTimer) {
clearTimeout(this.autoSaveTimer);
}
his.autoSaveTimer = setTimeout(() => {
his.saveState();
}, this.autoSaveInterval);
}
handleBeforeUnload(event) {
if (this.isDirty) {
const message = "保存されていない変更があります。ページを離れますか？";
event.preventDefault();
event.returnValue = message;
return message;
}
}
getFormData() {
const formData = new FormData(this.form);
const data = {};
for (const [key, value] of formData.entries()) {
if (data[key]) {
if (Array.isArray(data[key])) {
data[key].push(value);
} else {
data[key] = [data[key], value];
}
} else {
data[key] = value;
}
}
const checkboxes = this.form.querySelectorAll('input[type="checkbox"]');
checkboxes.forEach((checkbox) => {
if (!checkbox.checked && checkbox.name) {
if (!data[checkbox.name]) {
data[checkbox.name] = [];
}
}
});
data._metadata = {
savedAt: new Date().toISOString(),
formVersion: "1.0",
userAgent: navigator.userAgent,
};
return data;
}
saveState() {
ry {
const data = this.getFormData();
localStorage.setItem(this.storageKey, JSON.stringify(data));
sessionStorage.setItem(this.storageKey + "_backup", JSON.stringify(data));
his.isDirty = false;
his.lastSaved = new Date();
if (this.options && this.options.serverSave) {
his.saveToServer(data);
}
} catch (error) {
}
}
loadState() {
ry {
const savedData =
localStorage.getItem(this.storageKey) ||
sessionStorage.getItem(this.storageKey + "_backup");
if (!savedData) return;
const data = JSON.parse(savedData);
if (data._metadata && data._metadata.savedAt) {
const savedDate = new Date(data._metadata.savedAt);
const daysSince = (new Date() - savedDate) / (1000 * 60 * 60 * 24);
if (daysSince > 7) {
if (
confirm("保存されたデータは7日以上前のものです。読み込みますか？")
) {
his.restoreFormData(data);
} else {
his.clearState();
}
} else {
his.restoreFormData(data);
}
}
} catch (error) {
}
}
restoreFormData(data) {
Object.entries(data).forEach(([key, value]) => {
if (key === "_metadata") return;
const elements = this.form.elements[key];
if (!elements) return;
if (elements.length > 1) {
Array.from(elements).forEach((element) => {
if (element.type === "checkbox") {
element.checked = Array.isArray(value)
? value.includes(element.value)
: value === element.value;
} else if (element.type === "radio") {
element.checked = element.value === value;
}
});
} else {
const element = elements;
if (element.type === "checkbox") {
element.checked = value === "on" || value === true;
} else if (element.type === "file") {
} else {
element.value = value;
}
}
});
his.form.dispatchEvent(new Event("change", { bubbles: true }));
}
clearState() {
localStorage.removeItem(this.storageKey);
sessionStorage.removeItem(this.storageKey + "_backup");
his.isDirty = false;
}
startAutoSave() {
}
stopAutoSave() {
if (this.autoSaveTimer) {
clearTimeout(this.autoSaveTimer);
his.autoSaveTimer = null;
}
}
addSaveIndicator() {
const indicator = document.createElement("div");
indicator.id = "save-indicator";
indicator.className = "save-indicator";
}
async saveToServer(data) {
ry {
const response = await fetch("/api/save-form", {
method: "POST",
headers: {
"Content-Type": "application/json",
},
body: JSON.stringify(data),
});
if (!response.ok) {
hrow new Error("Server save failed");
}
} catch (error) {
}
}
destroy() {
his.stopAutoSave();
his.form.removeEventListener("input", this.handleChange);
his.form.removeEventListener("change", this.handleChange);
window.removeEventListener("beforeunload", this.handleBeforeUnload);
if (this.saveIndicator) {
his.saveIndicator.remove();
}
}
}
const saveIndicatorStyles = `
.save-indicator {
position: fixed;
op: 20px;
left: 50%;
ransform: translateX(-50%);
background: rgba(0, 0, 0, 0.8);
color: white;
padding: 8px 16px;
border-radius: 20px;
display: flex;
align-items: center;
gap: 8px;
font-size: 14px;
z-index: 1000;
ransition: all 0.3s ease;
}
.save-indicator.saving .save-icon::after {
content: '⏳';
}
.save-indicator.saved .save-icon::after {
content: '✓';
color: #4caf50;
}
.save-indicator.unsaved .save-icon::after {
content: '•';
color: #ff9800;
}
.save-indicator.error .save-icon::after {
content: '✗';
color: #f44336;
}
.save-indicator.cleared .save-icon::after {
content: '🗑';
}
.form-notification {
position: fixed;
bottom: 20px;
right: 20px;
padding: 12px 24px;
border-radius: 4px;
color: white;
font-size: 14px;
z-index: 1000;
animation: slideUp 0.3s ease;
}
.form-notification.info {
background-color: #2196f3;
}
.form-notification.success {
background-color: #4caf50;
}
.form-notification.error {
background-color: #f44336;
}
@keyframes slideUp {
from {
ransform: translateY(100%);
opacity: 0;
}
o {
ransform: translateY(0);
opacity: 1;
}
}
`;
const styleSheet = document.createElement("style");
styleSheet.textContent = saveIndicatorStyles;
document.head.appendChild(styleSheet);
document.addEventListener("DOMContentLoaded", () => {
window.formStateManager = new FormStateManager("styleForm", {
storageKey: "styleFormState",
autoSaveInterval: 5000,
serverSave: false,
});
});
if (typeof module !== "undefined" && module.exports) {
module.exports = FormStateManager;
}
class FormProgress {
constructor(formId) {
his.form = document.getElementById(formId);
his.sections = [];
his.currentSection = 0;
his.completedFields = new Set();
his.init();
}
init() {
if (!this.form) return;
his.sections = Array.from(this.form.querySelectorAll(".form-section"));
his.progressFill = document.querySelector(".progress-fill");
his.progressPercentage = document.querySelector(".progress-percentage");
his.fieldsCompleted = document.querySelector(".fields-completed");
his.totalFields = this.countRequiredFields();
his.setupFieldTracking();
his.setupSmoothScroll();
if (this.progressFill && this.progressPercentage && this.fieldsCompleted) {
his.updateProgress();
}
}
setupFieldTracking() {
const requiredInputs = this.form.querySelectorAll(
'[required], [data-validate*="required"]'
);
const requiredGroups = this.form.querySelectorAll(
'.checkbox-group[data-required="true"], .radio-group[data-required="true"]'
);
requiredInputs.forEach((input) => {
input.addEventListener("input", () => this.checkFieldCompletion(input));
input.addEventListener("change", () => this.checkFieldCompletion(input));
his.checkFieldCompletion(input);
});
requiredGroups.forEach((group) => {
group.addEventListener("change", () => this.checkGroupCompletion(group));
his.checkGroupCompletion(group);
});
his.setupIntersectionObserver();
}
setupIntersectionObserver() {
const options = {
root: null,
rootMargin: "-20% 0px -70% 0px",
hreshold: 0,
};
const observer = new IntersectionObserver((entries) => {
entries.forEach((entry) => {
if (entry.isIntersecting) {
const sectionIndex = this.sections.indexOf(entry.target);
if (sectionIndex !== -1) {
his.setActiveSection(sectionIndex);
}
}
});
}, options);
his.sections.forEach((section) => observer.observe(section));
}
setActiveSection(index) {
his.currentSection = index;
if (this.sectionNav) {
const navButtons = this.sectionNav.querySelectorAll(".section-nav-button");
navButtons.forEach((button, i) => {
button.classList.toggle("active", i === index);
});
}
}
checkFieldCompletion(field) {
const fieldId = field.id || field.name;
const isComplete = this.isFieldComplete(field);
if (isComplete) {
his.completedFields.add(fieldId);
} else {
his.completedFields.delete(fieldId);
}
his.updateProgress();
}
checkGroupCompletion(group) {
const groupId = group.id || group.dataset.groupName;
const isComplete = this.isGroupComplete(group);
if (isComplete) {
his.completedFields.add(groupId);
} else {
his.completedFields.delete(groupId);
}
his.updateProgress();
}
isFieldComplete(field) {
if (field.type === "checkbox" || field.type === "radio") {
return field.checked;
}
return field.value && field.value.trim() !== "";
}
isGroupComplete(group) {
if (group.classList.contains("checkbox-group")) {
return group.querySelectorAll("input:checked").length > 0;
}
if (group.classList.contains("radio-group")) {
return group.querySelector("input:checked") !== null;
}
return false;
}
countRequiredFields() {
let count = 0;
const requiredInputs = this.form.querySelectorAll(
'[required], [data-validate*="required"]'
);
requiredInputs.forEach((input) => {
if (input.type === "radio") {
const groupName = input.name;
if (!this.countedRadioGroups?.has(groupName)) {
if (!this.countedRadioGroups) this.countedRadioGroups = new Set();
his.countedRadioGroups.add(groupName);
count++;
}
} else {
count++;
}
});
count += this.form.querySelectorAll(
'.checkbox-group[data-required="true"], .radio-group[data-required="true"]'
).length;
return count;
}
updateProgress() {
if (!this.totalFields || this.totalFields === 0) return;
const completed = this.completedFields.size;
const percentage = Math.round((completed / this.totalFields) * 100);
if (this.progressFill) {
his.progressFill.style.width = `${percentage}%`;
}
if (this.progressPercentage) {
his.progressPercentage.textContent = `${percentage}%`;
}
if (this.fieldsCompleted) {
his.fieldsCompleted.textContent = completed;
}
his.updateSectionStatus();
if (percentage === 100 && this.progressFill) {
his.progressFill.classList.add("complete");
his.showCompletionMessage();
} else if (this.progressFill) {
his.progressFill.classList.remove("complete");
}
}
updateSectionStatus() {
his.sections.forEach((section, index) => {
const sectionFields = section.querySelectorAll(
'[required], [data-validate*="required"]'
);
const sectionGroups = section.querySelectorAll(
'.checkbox-group[data-required="true"], .radio-group[data-required="true"]'
);
let sectionComplete = true;
sectionFields.forEach((field) => {
if (!this.isFieldComplete(field)) {
sectionComplete = false;
}
});
sectionGroups.forEach((group) => {
if (!this.isGroupComplete(group)) {
sectionComplete = false;
}
});
if (this.sectionNav) {
const navButton = this.sectionNav.querySelector(
`[data-section="${index}"]`
);
if (navButton) {
navButton.classList.toggle("section-complete", sectionComplete);
}
}
});
}
scrollToSection(index) {
const section = this.sections[index];
if (!section) return;
const offset = 100;
const targetPosition = section.offsetTop - offset;
window.scrollTo({
op: targetPosition,
behavior: "smooth",
});
setTimeout(() => {
const firstInput = section.querySelector("input, select, textarea");
if (firstInput) {
firstInput.focus();
}
}, 500);
}
setupSmoothScroll() {
document.querySelectorAll('a[href^="#section"]').forEach((link) => {
link.addEventListener("click", (e) => {
e.preventDefault();
const sectionId = link.getAttribute("href").substring(1);
const section = document.getElementById(sectionId);
const index = this.sections.indexOf(section);
if (index !== -1) {
his.scrollToSection(index);
}
});
});
}
showCompletionMessage() {
if (this.completionShown) return;
his.completionShown = true;
const message = document.createElement("div");
message.className = "completion-message";
message.innerHTML = `
<div class="completion-content">
<div class="completion-icon">🎉</div>
<h3>フォームの入力が完了しました！</h3>
<p>すべての必須項目に入力されています。内容を確認して送信してください。</p>
<button class="completion-close">閉じる</button>
</div>
`;
document.body.appendChild(message);
setTimeout(() => {
message.classList.add("show");
}, 100);
message.querySelector(".completion-close").addEventListener("click", () => {
message.classList.remove("show");
setTimeout(() => message.remove(), 300);
});
}
}
const progressStyles = `
.progress-container {
background: var(--searface-elevated);
border: 1px solid var(--border-color);
border-radius: var(--radius-lg);
padding: 24px;
margin-bottom: 32px;
}
.progress-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 16px;
}
.progress-title {
font-size: 18px;
font-weight: 500;
color: var(--text-primary);
}
.progress-percentage {
font-size: 24px;
font-weight: 600;
color: var(--text-primary);
}
.progress-bar-wrapper {
background: rgba(255, 255, 255, 0.1);
border-radius: 10px;
height: 20px;
overflow: hidden;
margin-bottom: 12px;
}
.progress-bar {
height: 100%;
position: relative;
}
.progress-fill {
height: 100%;
background: linear-gradient(90deg, #4caf50, #66bb6a);
border-radius: 10px;
ransition: width 0.5s ease;
position: relative;
overflow: hidden;
}
.progress-fill::after {
content: '';
position: absolute;
op: 0;
left: 0;
right: 0;
bottom: 0;
background: linear-gradient(
90deg,
ransparent,
rgba(255, 255, 255, 0.3),
ransparen
);
animation: shimmer 2s infinite;
}
.progress-fill.complete {
background: linear-gradient(90deg, #ffd700, #ffed4e);
}
@keyframes shimmer {
0% { transform: translateX(-100%); }
100% { transform: translateX(100%); }
}
.progress-stats {
font-size: 14px;
color: var(--text-secondary);
}
.sticky-section-nav {
position: sticky;
op: 20px;
z-index: 100;
margin-bottom: 32px;
}
.section-nav-list {
list-style: none;
display: flex;
gap: 12px;
overflow-x: auto;
scrollbar-width: thin;
}
.section-nav-item {
flex-shrink: 0;
}
.section-nav-button {
display: flex;
align-items: center;
gap: 8px;
padding: 12px 20px;
background: rgba(255, 255, 255, 0.05);
border: 1px solid var(--border-color);
border-radius: var(--radius-md);
color: var(--text-secondary);
cursor: pointer;
ransition: all 0.3s ease;
font-size: 14px;
}
.section-nav-button:hover {
background: rgba(255, 255, 255, 0.1);
border-color: var(--primary-color);
color: var(--text-primary);
ransform: translateY(-2px);
}
.section-nav-button.active {
background: var(--primary-color);
color: var(--background-color);
border-color: var(--primary-color);
}
.section-nav-button.section-complete .status-incomplete {
display: none;
}
.section-nav-button:not(.section-complete) .status-complete {
display: none;
}
.nav-number {
font-weight: 600;
font-size: 16px;
}
.nav-title {
font-weight: 400;
}
.nav-status {
margin-left: auto;
}
.status-complete {
color: #4caf50;
}
.completion-message {
position: fixed;
op: 0;
left: 0;
right: 0;
bottom: 0;
background: rgba(0, 0, 0, 0.8);
display: flex;
align-items: center;
justify-content: center;
z-index: 2000;
opacity: 0;
ransition: opacity 0.3s ease;
}
.completion-message.show {
opacity: 1;
}
.completion-content {
background: var(--searface-elevated);
border: 2px solid var(--accent-gold);
border-radius: var(--radius-xl);
padding: 48px;
ext-align: center;
max-width: 500px;
ransform: scale(0.9);
ransition: transform 0.3s ease;
}
.completion-message.show .completion-content {
ransform: scale(1);
}
.completion-icon {
font-size: 72px;
margin-bottom: 24px;
}
.completion-content h3 {
font-size: 24px;
margin-bottom: 16px;
color: var(--text-primary);
}
.completion-content p {
font-size: 16px;
color: var(--text-secondary);
margin-bottom: 32px;
}
.completion-close {
padding: 12px 32px;
style-male-mode-1.webp
color: var(--background-color);
border: none;
border-radius: var(--radius-md);
font-size: 16px;
font-weight: 500;
cursor: pointer;
ransition: all 0.3s ease;
}
.completion-close:hover {
ransform: translateY(-2px);
box-shadow: 0 4px 12px rgba(212, 175, 55, 0.3);
}
@media (max-width: 768px) {
.section-nav-list {
flex-wrap: nowrap;
}
.section-nav-button {
font-size: 12px;
padding: 10px 16px;
}
.nav-title {
display: none;
}
}
`;
const progressStyleSheet = document.createElement("style");
progressStyleSheet.textContent = progressStyles;
document.head.appendChild(progressStyleSheet);
document.addEventListener("DOMContentLoaded", () => {
window.formProgress = new FormProgress("styleForm");
});
if (typeof module !== "undefined" && module.exports) {
module.exports = FormProgress;
}
function getBrandPreferences() {
const preferences = {
liked: [],
disliked: [],
};
const brandItems = document.querySelectorAll(".brand-selection-item");
brandItems.forEach((item) => {
const brand = item.dataset.brand;
const hiddenInput = item.querySelector('input[type="hidden"]');
const value = hiddenInput.value;
if (value === "like") {
preferences.liked.push(brand);
} else if (value === "dislike") {
preferences.disliked.push(brand);
}
});
return preferences;
}
function setBrandPreferences(preferences) {
if (!preferences) return;
document.querySelectorAll(".brand-select-btn").forEach((btn) => {
btn.classList.remove("selected");
});
if (preferences.liked && Array.isArray(preferences.liked)) {
preferences.liked.forEach((brand) => {
const likeBtn = document.querySelector(
`.brand-select-btn.like[data-brand="${brand}"]`
);
if (likeBtn) {
likeBtn.click();
}
});
}
if (preferences.disliked && Array.isArray(preferences.disliked)) {
preferences.disliked.forEach((brand) => {
const dislikeBtn = document.querySelector(
`.brand-select-btn.dislike[data-brand="${brand}"]`
);
if (dislikeBtn) {
dislikeBtn.click();
}
});
}
}
if (typeof module !== "undefined" && module.exports) {
module.exports = {
getBrandPreferences,
setBrandPreferences,
};
}
(function () {
function handleBrandButtonClick(e) {
const button = e.target.closest(".brand-select-btn");
if (!button) return;
e.preventDefault();
e.stopPropagation();
const brand = button.dataset.brand;
const preference = button.dataset.preference;
const brandItem = button.closest(".brand-selection-item");
if (!brandItem) {
return;
}
const hiddenInput = brandItem.querySelector('input[type="hidden"]');
const otherPreference = preference === "like" ? "dislike" : "like";
const otherButton = brandItem.querySelector(
`.brand-select-btn.${otherPreference}`
);
if (button.classList.contains("selected")) {
button.classList.remove("selected");
if (hiddenInput) hiddenInput.value = "";
} else {
button.classList.add("selected");
if (otherButton) otherButton.classList.remove("selected");
if (hiddenInput) hiddenInput.value = preference;
}
updateBrandItemState(
brandItem,
preference,
button.classList.contains("selected")
);
if (window.formStateManager && hiddenInput) {
window.formStateManager.handleChange({ target: hiddenInput });
}
}
function updateBrandItemState(brandItem, preference, isSelected) {
brandItem.classList.remove("brand-liked", "brand-disliked");
if (isSelected) {
if (preference === "like") {
brandItem.classList.add("brand-liked");
} else {
brandItem.classList.add("brand-disliked");
}
}
}
function initializeExistingButtons() {
const brandItems = document.querySelectorAll(".brand-selection-item");
brandItems.forEach((item) => {
const hiddenInput = item.querySelector('input[type="hidden"]');
if (hiddenInput && hiddenInput.value) {
const preference = hiddenInput.value;
const button = item.querySelector(`.brand-select-btn.${preference}`);
if (button && !button.classList.contains("selected")) {
button.classList.add("selected");
updateBrandItemState(item, preference, true);
}
}
});
}
window.getBrandPreferences = function () {
const preferences = {
liked: [],
disliked: [],
};
const brandItems = document.querySelectorAll(".brand-selection-item");
brandItems.forEach((item) => {
const brand = item.dataset.brand;
const hiddenInput = item.querySelector('input[type="hidden"]');
const value = hiddenInput ? hiddenInput.value : "";
if (value === "like") {
preferences.liked.push(brand);
} else if (value === "dislike") {
preferences.disliked.push(brand);
}
});
return preferences;
};
window.setBrandPreferences = function (preferences) {
if (!preferences) return;
document.querySelectorAll(".brand-select-btn.selected").forEach((btn) => {
btn.classList.remove("selected");
});
document.querySelectorAll(".brand-selection-item").forEach((item) => {
item.classList.remove("brand-liked", "brand-disliked");
const hiddenInput = item.querySelector('input[type="hidden"]');
if (hiddenInput) hiddenInput.value = "";
});
if (preferences.liked && Array.isArray(preferences.liked)) {
preferences.liked.forEach((brand) => {
const brandItem = document.querySelector(
`.brand-selection-item[data-brand="${brand}"]`
);
if (brandItem) {
const likeBtn = brandItem.querySelector(".brand-select-btn.like");
const hiddenInput = brandItem.querySelector('input[type="hidden"]');
if (likeBtn) {
likeBtn.classList.add("selected");
if (hiddenInput) hiddenInput.value = "like";
updateBrandItemState(brandItem, "like", true);
}
}
});
}
if (preferences.disliked && Array.isArray(preferences.disliked)) {
preferences.disliked.forEach((brand) => {
const brandItem = document.querySelector(
`.brand-selection-item[data-brand="${brand}"]`
);
if (brandItem) {
const dislikeBtn = brandItem.querySelector(
".brand-select-btn.dislike"
);
const hiddenInput = brandItem.querySelector('input[type="hidden"]');
if (dislikeBtn) {
dislikeBtn.classList.add("selected");
if (hiddenInput) hiddenInput.value = "dislike";
updateBrandItemState(brandItem, "dislike", true);
}
}
});
}
};
})();
document.addEventListener("DOMContentLoaded", function () {
initializePostalAutofill();
});
function initializePostalAutofill() {
const postalInput1 = document.getElementById("postalCode1");
const postalInput2 = document.getElementById("postalCode2");
const prefectureSelect = document.getElementById("prefecture");
const cityInput = document.getElementById("city");
const addressInput = document.getElementById("streetAddress");
if (!postalInput1 || !postalInput2) return;
postalInput1.addEventListener("input", function (e) {
let value = e.target.value.replace(/[^\d]/g, "");
e.target.value = value;
if (value.length === 3) {
postalInput2.focus();
}
checkAndFetchAddress();
});
postalInput2.addEventListener("input", function (e) {
let value = e.target.value.replace(/[^\d]/g, "");
e.target.value = value;
checkAndFetchAddress();
});
postalInput2.addEventListener("keydown", function (e) {
if (e.key === "Backspace" && e.target.value === "") {
e.preventDefault();
postalInput1.focus();
postalInput1.setSelectionRange(
postalInput1.value.length,
postalInput1.value.length
);
}
});
function checkAndFetchAddress() {
const postal1 = postalInput1.value;
const postal2 = postalInput2.value;
if (postal1.length === 3 && postal2.length === 4) {
const fullPostalCode = postal1 + "-" + postal2;
fetchAddressFromPostalCode(fullPostalCode);
}
}
const postalWrapper = postalInput1.parentElement.parentElement;
const postalInputsDiv = postalInput1.parentElement;
const searchButton = document.createElement("button");
searchButton.type = "button";
searchButton.className = "postal-search-btn";
searchButton.innerHTML = "住所検索";
searchButton.addEventListener("click", function () {
const postal1 = postalInput1.value;
const postal2 = postalInput2.value;
if (postal1.length === 3 && postal2.length === 4) {
const fullPostalCode = postal1 + "-" + postal2;
fetchAddressFromPostalCode(fullPostalCode);
} else {
showPostalError("郵便番号を正しく入力してください（例: 123-4567）");
}
});
postalInputsDiv.appendChild(searchButton);
const errorContainer = document.createElement("div");
errorContainer.className = "postal-error-container";
errorContainer.style.display = "none";
postalWrapper.appendChild(errorContainer);
}
async function fetchAddressFromPostalCode(postalCode) {
const cleanPostalCode = postalCode.replace("-", "");
showLoadingState(true);
ry {
const response = await fetch(
`https:
);
const data = await response.json();
if (data.status === 200 && data.results && data.results.length > 0) {
const result = data.results[0];
fillAddressFields({
prefecture: result.address1,
city: result.address2,
address: result.address3,
});
showNotification("住所を自動入力しました", "success");
} else {
showNotification("郵便番号に該当する住所が見つかりませんでした", "error");
}
} catch (error) {
const localAddress = getLocalPostalData(cleanPostalCode);
if (localAddress) {
fillAddressFields(localAddress);
showNotification("住所を自動入力しました（オフラインデータ）", "success");
} else {
showNotification("住所の取得に失敗しました", "error");
}
} finally {
showLoadingState(false);
}
}
function fillAddressFields(addressData) {
const prefectureSelect = document.getElementById("prefecture");
const cityInput = document.getElementById("city");
const addressInput = document.getElementById("streetAddress");
if (prefectureSelect && addressData.prefecture) {
const options = prefectureSelect.options;
for (let i = 0; i < options.length; i++) {
if (
options[i].text === addressData.prefecture ||
options[i].value === addressData.prefecture
) {
prefectureSelect.selectedIndex = i;
prefectureSelect.dispatchEvent(new Event("change", { bubbles: true }));
break;
}
}
}
if (cityInput && addressData.city) {
cityInput.value = addressData.city;
cityInput.dispatchEvent(new Event("input", { bubbles: true }));
}
if (addressInput && addressData.address) {
addressInput.value = addressData.address;
addressInput.dispatchEvent(new Event("input", { bubbles: true }));
}
}
function showLoadingState(isLoading) {
const searchBtn = document.querySelector(".postal-search-btn");
if (searchBtn) {
searchBtn.disabled = isLoading;
searchBtn.innerHTML = isLoading ? "検索中..." : "住所検索";
}
}
function showNotification(message, type = "info") {
if (window.formValidator && window.formValidator.showNotification) {
window.formValidator.showNotification(message, type);
} else {
const notification = document.createElement("div");
notification.className = `postal-notification ${type}`;
notification.textContent = message;
notification.style.cssText = `
position: fixed;
bottom: 20px;
right: 20px;
padding: 12px 24px;
background: ${type === "success" ? "#4caf50" : "#f44336"};
color: white;
border-radius: 4px;
z-index: 1000;
animation: slideIn 0.3s ease;
`;
document.body.appendChild(notification);
setTimeout(() => {
notification.remove();
}, 3000);
}
}
function showPostalError(message) {
const errorContainer = document.querySelector(".postal-error-container");
if (errorContainer) {
errorContainer.textContent = message;
errorContainer.style.display = "block";
errorContainer.style.color = "#f44336";
errorContainer.style.fontSize = "14px";
errorContainer.style.marginTop = "8px";
setTimeout(() => {
errorContainer.style.display = "none";
}, 5000);
}
}
function getLocalPostalData(postalCode) {
const localData = {
1000001: { prefecture: "東京都", city: "千代田区", address: "千代田" },
1500001: { prefecture: "東京都", city: "渋谷区", address: "神宮前" },
1600001: { prefecture: "東京都", city: "新宿区", address: "歌舞伎町" },
5300001: { prefecture: "大阪府", city: "大阪市北区", address: "梅田" },
6000001: { prefecture: "京都府", city: "京都市下京区", address: "烏丸通" },
};
return localData[postalCode] || null;
}
const style = document.createElement("style");
style.textContent = `
.postal-code-inputs {
display: flex;
align-items: center;
gap: 10px;
}
.postal-search-btn {
padding: 8px 16px;
style-male-mode-1.webp
color: var(--background-color);
border: none;
border-radius: 4px;
cursor: pointer;
font-size: 14px;
ransition: all 0.3s ease;
white-space: nowrap;
margin-left: 10px;
}
.postal-search-btn:hover:not(:disabled) {
ransform: translateY(-2px);
box-shadow: 0 4px 12px rgba(212, 175, 55, 0.3);
}
.postal-search-btn:disabled {
opacity: 0.6;
cursor: not-allowed;
}
@keyframes slideIn {
from {
ransform: translateX(100%);
opacity: 0;
}
o {
ransform: translateX(0);
opacity: 1;
}
}
`;
document.head.appendChild(style);
if (typeof module !== "undefined" && module.exports) {
module.exports = {
initializePostalAutofill,
fetchAddressFromPostalCode,
};
}
document.addEventListener("DOMContentLoaded", function () {
const originalSetFieldError = window.formValidator
? window.formValidator.setFieldError
: null;
if (originalSetFieldError && window.formValidator) {
window.formValidator.setFieldError = function (field, message) {
if (field.name === "postalCode1" || field.name === "postalCode2") {
const postalGroup = field.closest(".postal-code-group");
if (postalGroup) {
const existingErrors = postalGroup.querySelectorAll(".error-message");
existingErrors.forEach((error) => error.remove());
const errorElement = document.createElement("div");
errorElement.className = "error-message";
errorElement.textContent = message;
postalGroup.classList.add("has-error");
postalGroup.appendChild(errorElement);
const postal1 = postalGroup.querySelector('[name="postalCode1"]');
const postal2 = postalGroup.querySelector('[name="postalCode2"]');
if (postal1) postal1.classList.add("error");
if (postal2) postal2.classList.add("error");
}
} else {
originalSetFieldError.call(this, field, message);
}
};
}
const originalClearFieldError = window.formValidator
? window.formValidator.clearFieldError
: null;
if (originalClearFieldError && window.formValidator) {
window.formValidator.clearFieldError = function (field) {
if (field.name === "postalCode1" || field.name === "postalCode2") {
const postalGroup = field.closest(".postal-code-group");
if (postalGroup) {
const errors = postalGroup.querySelectorAll(".error-message");
errors.forEach((error) => error.remove());
postalGroup.classList.remove("has-error");
const postal1 = postalGroup.querySelector('[name="postalCode1"]');
const postal2 = postalGroup.querySelector('[name="postalCode2"]');
if (postal1) postal1.classList.remove("error");
if (postal2) postal2.classList.remove("error");
}
} else {
originalClearFieldError.call(this, field);
}
};
}
});
document.addEventListener("DOMContentLoaded", function () {
if (
useImageMapping &&
(!integratedStylePatternData ||
Object.keys(integratedStylePatternData.male).length === 0)
) {
}
setTimeout(() => {
const patternContainer = document.getElementById(
"patternSelectionsContainer"
);
if (patternContainer) {
patternContainer.innerHTML = "";
}
const checkboxes = document.querySelectorAll(
'input[name="attractiveStyle"]'
);
if (checkboxes.length > 0) {
initializeGenderIntegratedStylePatterns();
}
}, 1000);
});
const useImageMapping = typeof imageMapping !== 'undefined' && imageMapping.stylePatterns;
function buildPatternDataFromMapping() {
if (!useImageMapping) return null;
const patternData = { male: {}, female: {} };
["male", "female"].forEach((gender) => {
const genderPatterns = imageMapping.stylePatterns[gender];
if (!genderPatterns) return;
Object.keys(genderPatterns).forEach((styleKey) => {
const patterns = genderPatterns[styleKey];
const styleName =
imageMapping.attractiveStyles[gender][styleKey]?.name || styleKey;
const rows = [];
for (let i = 0; i < 5; i++) {
const rowPatterns = patterns.slice(i * 3, (i + 1) * 3);
if (rowPatterns.length > 0) {
rows.push({
name: "",
patterns: rowPatterns,
});
}
}
patternData[gender][styleKey] = {
name: styleName,
rows: rows,
};
});
});
return patternData;
}
window.integratedStylePatternData = (typeof window.imageMapping !== 'undefined' && window.imageMapping.stylePatterns)
? buildPatternDataFromMapping() || {male: {}, female: {}}
: {
male: {},
female: {}
};
const evaluationReasons = {
good: [
"色合いが好み",
"シルエットが好み",
"素材感が好み",
"デザインが好み",
"自分のスタイルに合う",
"ユニークで個性的",
],
bad: [
"色合いが好みでない",
"イメージがつかない",
"シルエットが好みでない",
"素材が好みでない",
"デザインが複雑すぎる",
"自分には似合わない",
"派手すぎる・地味すぎる",
],
};
let currentStyleKey = null;
let selectedStyles = new Set();
let isUpdating = false;
let updatePatternDisplay = null;
function getStyleDisplayName(styleKey, gender) {
const styleNames = {
male: {
suit: "スーツ/トラッド",
mode: "モード",
elegant: "エレガント/シック",
minimal: "ミニマム/シンプル",
street: "ストリート/スポーティー",
relax: "サーフ",
"american-casual": "アメカジ",
},
female: {
mode: "モード",
elegant: "エレガント/シック",
"urban-conservative": "アーバン/コンサバティブ",
feminine: "フェミニン",
sporty: "スポーティー",
natural: "ナチュラル",
},
};
return styleNames[gender]?.[styleKey] || styleKey;
}
window.togglePatternRowSection = function (header) {
const section = header.parentElement;
section.classList.toggle("expanded");
};
window.togglePatternSection = function (header) {
const section = header.parentElement;
const gridContainer = header.nextElementSibling;
const toggleIcon = header.querySelector('.toggle-icon');
const styleKey = gridContainer?.getAttribute('data-style-key');
const reasonSection = styleKey ? document.getElementById(`pattern-reasons-${styleKey}`) : null;
if (gridContainer) {
if (gridContainer.style.display === 'none') {
gridContainer.style.display = 'block';
oggleIcon.textContent = '▼';
section.classList.remove('collapsed');
if (reasonSection && (reasonSection.querySelector('.pattern-reason-item'))) {
reasonSection.style.display = 'block';
}
} else {
gridContainer.style.display = 'none';
oggleIcon.textContent = '▶';
section.classList.add('collapsed');
if (reasonSection) {
reasonSection.style.display = 'none';
}
}
}
};
function initializeGenderIntegratedStylePatterns() {
selectedStyles.clear();
currentStyleKey = null;
const styleCheckboxes = document.querySelectorAll(
'input[name="attractiveStyle"]'
);
const patternSelections = document.getElementById("patternSelections");
const patternContainer = document.getElementById(
"patternSelectionsContainer"
);
if (!styleCheckboxes.length || !patternSelections || !patternContainer) {
return;
}
function getCurrentGender() {
const femaleRadio = document.getElementById("gender-female");
return femaleRadio && femaleRadio.checked ? "female" : "male";
}
const genderRadios = document.querySelectorAll('input[name="gender"]');
genderRadios.forEach((radio) => {
radio.addEventListener("change", function () {
if (selectedStyles.size > 0) {
updatePatternDisplay(patternContainer, patternSelections);
}
});
});
let updateTimeout;
styleCheckboxes.forEach((checkbox) => {
if (checkbox.checked && checkbox.value && checkbox.value !== "undefined") {
selectedStyles.add(checkbox.value);
}
checkbox.addEventListener("change", function () {
if (isUpdating) return;
clearTimeout(updateTimeout);
updateTimeout = setTimeout(() => {
if (this.checked && this.value && this.value !== "undefined") {
selectedStyles.add(this.value);
} else if (this.value) {
selectedStyles.delete(this.value);
}
updatePatternDisplay(patternContainer, patternSelections);
if (patternSelections) {
patternSelections.style.display = "block";
}
}, 100);
});
});
if (selectedStyles.size > 0) {
updatePatternDisplay(patternContainer, patternSelections);
if (patternSelections) {
patternSelections.style.display = "block";
}
} else {
}
updatePatternDisplay = function (container, wrapper) {
if (isUpdating) return;
isUpdating = true;
ry {
container.innerHTML = "";
if (selectedStyles.size === 0) {
wrapper.style.display = "none";
currentStyleKey = null;
return;
}
wrapper.style.display = "block";
if (!currentStyleKey || !selectedStyles.has(currentStyleKey)) {
currentStyleKey = Array.from(selectedStyles)[0];
}
const gender = getCurrentGender();
const genderData = integratedStylePatternData[gender];
const currentSelections = {};
container.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
currentSelections[radio.name] = radio.value;
});
Array.from(selectedStyles)
.filter((style) => style && style !== "undefined")
.forEach((styleKey, styleIndex) => {
const styleData = genderData ? genderData[styleKey] : null;
if (!styleData) {
return;
}
if (styleIndex > 0) {
const separator = document.createElement("hr");
separator.style.margin = "40px 0";
separator.style.border = "none";
separator.style.borderTop = "2px solid #e0e0e0";
container.appendChild(separator);
}
const patternSection = document.createElement("div");
patternSection.className = "toggle-pattern-section";
const allPatterns = [];
styleData.rows.forEach((row, rowIndex) => {
row.patterns.forEach((pattern, colIndex) => {
allPatterns.push({
pattern: pattern,
rowIndex: rowIndex,
colIndex: colIndex
});
});
});
const styleCard = document.querySelector(`input[name="attractiveStyle"][value="${styleKey}"]`)?.closest('.style-preference-card');
const styleImage = styleCard?.querySelector('img')?.src || '';
patternSection.innerHTML = `
<div class="pattern-section-header" onclick="togglePatternSection(this)">
<h3 class="pattern-section-title">
${styleData.name}
${styleImage ? `<img src="${styleImage}" alt="${styleData.name}" class="pattern-header-image">` : ''}
</h3>
<span class="toggle-icon">▼</span>
</div>
<div class="pattern-grid-container" data-style-key="${styleKey}">
<div class="pattern-grid-3x5">
${allPatterns
.map((item, index) => {
const { pattern, rowIndex, colIndex } = item;
const uniqueId = `${styleKey}_${pattern.id}_${styleIndex}_${rowIndex}_${colIndex}`;
return `
<div class="pattern-item" data-pattern-id="${pattern.id}" data-pattern-name="${pattern.name}">
<div class="pattern-image-container">
<img src="${pattern.image.startsWith('images/') ? pattern.image : 'images/' + pattern.image}"
alt="${pattern.name}"
class="pattern-full-image"
loading="lazy"
onerror="this.src='images/placeholder-${gender}.webp'">
</div>
<h5 class="pattern-item-name">${pattern.name}</h5>
<div class="evaluation-section">
<div class="good-bad-selection">
<label class="eval-option good">
<input type="radio"
name="eval_${uniqueId}"
value="good"
onchange="handleAttractiveStyleEvaluation('${uniqueId}', 'good', '${pattern.id}', '${styleKey}', '${pattern.name}', '${pattern.image.startsWith('images/') ? pattern.image : 'images/' + pattern.image}')">
<span class="btn-icon">○</span>
</label>
<label class="eval-option bad">
<input type="radio"
name="eval_${uniqueId}"
value="bad"
onchange="handleAttractiveStyleEvaluation('${uniqueId}', 'bad', '${pattern.id}', '${styleKey}', '${pattern.name}', '${pattern.image.startsWith('images/') ? pattern.image : 'images/' + pattern.image}')">
<span class="btn-icon">×</span>
</label>
</div>
</div>
</div>
`;
})
.join("")}
</div>
</div>
<!-- Pattern reason selection for this style -->
<div class="style-pattern-reasons" id="pattern-reasons-${styleKey}" style="display: none;">
<h4 class="reason-section-title">選択したパターンの理由</h4>
<div class="good-patterns-${styleKey}" style="display: none;">
<h5 class="reason-subtitle">○ 良いと思ったパターン</h5>
<div class="good-patterns-list"></div>
</div>
<div class="bad-patterns-${styleKey}" style="display: none;">
<h5 class="reason-subtitle">× 好みではないパターン</h5>
<div class="bad-patterns-list"></div>
</div>
</div>
`;
container.appendChild(patternSection);
});
setTimeout(() => {
Object.entries(currentSelections).forEach(([name, value]) => {
const radio = container.querySelector(`input[name="${name}"][value="${value}"]`);
if (radio) {
radio.checked = true;
}
});
}, 0);
} finally {
setTimeout(() => {
isUpdating = false;
}, 200);
}
};
}
window.togglePatternRowSection = function (header) {
const rowSection = header.parentElement;
const styleContainer = rowSection.parentElement;
const allRowSections = styleContainer.querySelectorAll(
".pattern-row-section"
);
allRowSections.forEach((section) => {
if (section !== rowSection) {
section.classList.remove("expanded");
}
});
rowSection.classList.toggle("expanded");
};
window.attractiveStylePatternSelections = {};
window.handleAttractiveStyleEvaluation = function(uniqueId, evaluation, patternId, styleKey, patternName, patternImage) {
if (!window.attractiveStylePatternSelections[styleKey]) {
window.attractiveStylePatternSelections[styleKey] = {
good: {},
bad: {}
};
}
if (evaluation === 'good') {
window.attractiveStylePatternSelections[styleKey].good[uniqueId] = {
id: patternId,
name: patternName,
image: patternImage
};
delete window.attractiveStylePatternSelections[styleKey].bad[uniqueId];
} else if (evaluation === 'bad') {
window.attractiveStylePatternSelections[styleKey].bad[uniqueId] = {
id: patternId,
name: patternName,
image: patternImage
};
delete window.attractiveStylePatternSelections[styleKey].good[uniqueId];
}
updateStylePatternReasons(styleKey);
};
function updateStylePatternReasons(styleKey) {
const reasonSection = document.getElementById(`pattern-reasons-${styleKey}`);
if (!reasonSection) return;
const selections = window.attractiveStylePatternSelections[styleKey];
const hasGood = Object.keys(selections.good).length > 0;
const hasBad = Object.keys(selections.bad).length > 0;
const checkedReasons = {};
reasonSection.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
checkedReasons[checkbox.name] = true;
});
reasonSection.style.display = (hasGood || hasBad) ? 'block' : 'none';
const goodSection = reasonSection.querySelector(`.good-patterns-${styleKey}`);
const goodList = goodSection.querySelector('.good-patterns-list');
if (hasGood) {
goodSection.style.display = 'block';
Object.entries(selections.good).forEach(([id, pattern]) => {
let existingItem = goodList.querySelector(`[data-pattern-unique-id="${id}"]`);
if (!existingItem) {
const newItem = document.createElement('div');
newItem.className = 'pattern-reason-item';
newItem.setAttribute('data-pattern-unique-id', id);
newItem.innerHTML = `
<img src="${pattern.image}" alt="${pattern.name}" class="pattern-reason-thumb">
<div class="pattern-reason-content">
<div class="pattern-name">${pattern.name}</div>
<div class="reason-checkboxes">
${evaluationReasons.good.map((reason, idx) => `
<label class="reason-checkbox">
<input type="checkbox" name="reason_${id}_${idx}" value="${reason}">
<span>${reason}</span>
</label>
`).join('')}
</div>
</div>
`;
goodList.appendChild(newItem);
}
});
goodList.querySelectorAll('.pattern-reason-item').forEach(item => {
const itemId = item.getAttribute('data-pattern-unique-id');
if (!selections.good[itemId]) {
item.remove();
}
});
} else {
goodSection.style.display = 'none';
goodList.innerHTML = '';
}
const badSection = reasonSection.querySelector(`.bad-patterns-${styleKey}`);
const badList = badSection.querySelector('.bad-patterns-list');
if (hasBad) {
badSection.style.display = 'block';
Object.entries(selections.bad).forEach(([id, pattern]) => {
let existingItem = badList.querySelector(`[data-pattern-unique-id="${id}"]`);
if (!existingItem) {
const newItem = document.createElement('div');
newItem.className = 'pattern-reason-item';
newItem.setAttribute('data-pattern-unique-id', id);
newItem.innerHTML = `
<img src="${pattern.image}" alt="${pattern.name}" class="pattern-reason-thumb">
<div class="pattern-reason-content">
<div class="pattern-name">${pattern.name}</div>
<div class="reason-checkboxes">
${evaluationReasons.bad.map((reason, idx) => `
<label class="reason-checkbox">
<input type="checkbox" name="reason_${id}_${idx}" value="${reason}">
<span>${reason}</span>
</label>
`).join('')}
</div>
</div>
`;
badList.appendChild(newItem);
}
});
badList.querySelectorAll('.pattern-reason-item').forEach(item => {
const itemId = item.getAttribute('data-pattern-unique-id');
if (!selections.bad[itemId]) {
item.remove();
}
});
} else {
badSection.style.display = 'none';
badList.innerHTML = '';
}
Object.keys(checkedReasons).forEach(name => {
const checkbox = reasonSection.querySelector(`input[name="${name}"]`);
if (checkbox) {
checkbox.checked = true;
}
});
}
window.handleEvaluation = function (patternId, evaluation, originalPatternId) {
const reasonsDiv = document.getElementById(`reasons_${patternId}`);
const reasonOptionsDiv = document.getElementById(
`reason_options_${patternId}`
);
if (reasonsDiv && reasonOptionsDiv) {
reasonsDiv.style.display = "block";
const reasons = evaluationReasons[evaluation];
reasonOptionsDiv.innerHTML = reasons
.map(
(reason, index) => `
<label class="reason-checkbox">
<input type="checkbox"
name="reason_${patternId}"
value="${reason}">
<span>${reason}</span>
</label>
`
)
.join("");
}
const patternItem = document.querySelector(
`[data-pattern-id="${originalPatternId}"]`
);
if (patternItem) {
patternItem.classList.add("evaluated", evaluation);
}
};
window.testPatternDisplay = function () {
selectedStyles.clear();
selectedStyles.add("suit");
const patternSelections = document.getElementById("patternSelections");
const patternContainer = document.getElementById(
"patternSelectionsContainer"
);
if (patternSelections && patternContainer && updatePatternDisplay) {
updatePatternDisplay(patternContainer, patternSelections);
}
};
window.initializeGenderIntegratedStylePatterns =
initializeGenderIntegratedStylePatterns;
window.updateGenderStylePatterns = function () {
if (selectedStyles.size > 0) {
const patternSelections = document.getElementById("patternSelections");
const patternContainer = document.getElementById(
"patternSelectionsContainer"
);
if (patternSelections && patternContainer) {
updatePatternDisplay(patternContainer, patternSelections);
}
}
};
if (typeof module !== "undefined" && module.exports) {
module.exports = {
initializeGenderIntegratedStylePatterns,
integratedStylePatternData,
};
}
function transformStylePatternData(originalData) {
const transformedData = {};
Object.keys(originalData).forEach((gender) => {
ransformedData[gender] = {};
Object.keys(originalData[gender]).forEach((styleKey) => {
const style = originalData[gender][styleKey];
const allPatterns = [];
style.rows.forEach((row) => {
allPatterns.push(...row.patterns);
});
if (allPatterns.length !== 15) {
}
const newRows = [];
for (let i = 0; i < 5; i++) {
const rowPatterns = [];
for (let j = 0; j < 3; j++) {
const patternIndex = i * 3 + j;
if (patternIndex < allPatterns.length) {
rowPatterns.push(allPatterns[patternIndex]);
}
}
newRows.push({
name: "",
patterns: rowPatterns,
});
}
ransformedData[gender][styleKey] = {
name: style.name,
rows: newRows,
};
});
});
return transformedData;
}
if (typeof integratedStylePatternData !== "undefined") {
const transformed = transformStylePatternData(integratedStylePatternData);
Object.keys(transformed).forEach((gender) => {
integratedStylePatternData[gender] = transformed[gender];
});
}
(function() {
const attractiveStylesConfig =
ypeof imageMapping !== "undefined" && imageMapping.attractiveStyles
? imageMapping.attractiveStyles
: {
male: {
suit: {
value: "suit",
name: "スーツ/トラッド",
image: "images/style-male-suit-1.webp",
},
mode: {
value: "mode",
name: "モード",
image: "images/style-male-mode-1.webp",
},
elegant: {
value: "elegant",
name: "エレガント/シック",
image: "images/attractive-classic1.webp",
},
minimal: {
value: "minimal",
name: "ミニマム/シンプル",
image: "images/style-minimal-1.webp",
},
street: {
value: "street",
name: "ストリート/スポーティー",
image: "images/pattern-street1.webp",
},
searf: {
value: "searf",
name: "サーフ",
image: "images/style-searf-1.webp",
},
"american-casual": {
value: "american-casual",
name: "アメカジ",
image: "images/style-amecas-1.webp",
},
},
female: {
mode: {
value: "mode",
name: "モード",
image: "images/style-female-mode-1.webp",
},
elegant: {
value: "elegant",
name: "エレガント/シック",
image: "images/style-female-elegant-1.webp",
},
"urban-conservative": {
value: "urban-conservative",
name: "アーバン/コンサバティブ",
image: "images/style-female-urban-conservative-1.webp",
},
feminine: {
value: "feminine",
name: "フェミニン",
image: "images/style-female-feminine-1.webp",
},
sporty: {
value: "sporty",
name: "スポーティー",
image: "images/style-female-sporty-1.webp",
},
natural: {
value: "natural",
name: "ナチュラル",
image: "images/style-female-natural-1.webp",
},
},
};
window.rebuildAttractiveStylesGrid = function (gender) {
const gridContainer = document.querySelector(".style-preference-grid");
if (!gridContainer) return;
gridContainer.innerHTML = "";
const genderStyles =
attractiveStylesConfig[gender] || attractiveStylesConfig.male;
const styles = Object.entries(genderStyles).map(([key, style]) => {
if (!style.value) {
return { ...style, value: key };
}
return style;
});
styles.forEach((style) => {
const card = document.createElement("div");
card.className = "style-preference-card";
card.innerHTML = `
<input type="checkbox" name="attractiveStyle" value="${style.value}" id="attractive-${gender}-${style.value}">
<label for="attractive-${gender}-${style.value}">
<img src="${style.image}" alt="${style.name}" class="style-pattern-image">
<span>${style.name}</span>
</label>
`;
gridContainer.appendChild(card);
});
attachStyleCheckboxListeners();
setTimeout(() => {
if (typeof initializeGenderIntegratedStylePatterns === "function") {
initializeGenderIntegratedStylePatterns();
} else {
}
}, 300);
};
function attachStyleCheckboxListeners() {
const styleCheckboxes = document.querySelectorAll(
'input[name="attractiveStyle"]'
);
styleCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
if (typeof initializeGenderIntegratedStylePatterns === "function") {
return;
}
});
});
}
const genderRadios = document.querySelectorAll('input[name="gender"]');
genderRadios.forEach((radio) => {
radio.addEventListener("change", function () {
if (this.checked) {
rebuildAttractiveStylesGrid(this.value);
}
});
});
const currentGender = document.querySelector('input[name="gender"]:checked');
const genderValue = currentGender ? currentGender.value : "male";
rebuildAttractiveStylesGrid(genderValue);
setTimeout(() => {
if (typeof initializeGenderIntegratedStylePatterns === "function") {
initializeGenderIntegratedStylePatterns();
}
}, 800);
})();
(function () {
"use strict";
function ready(fn) {
if (document.readyState !== "loading") {
fn();
} else {
document.addEventListener("DOMContentLoaded", fn);
}
}
ready(function () {
const triggerValues = [
"not-interested",
"vaguely-interested",
"conversational",
"personal-curiosity",
"basic-knowledge",
];
const allCheckboxes = document.querySelectorAll(
'input[name="fashionLiteracy"]'
);
const conditionalItems = document.querySelectorAll(
".fashion-literacy-conditional"
);
conditionalItems.forEach((item, index) => {
const checkbox = item.querySelector('input[type="checkbox"]');
if (checkbox) {
}
});
conditionalItems.forEach((item) => {
item.style.setProperty("display", "none", "important");
item.style.setProperty("visibility", "hidden", "important");
item.style.setProperty("opacity", "0", "important");
item.style.setProperty("transition", "all 0.3s ease", "important");
});
function updateDisplay() {
let showConditional = false;
const checkedTriggers = [];
allCheckboxes.forEach((checkbox) => {
if (triggerValues.includes(checkbox.value) && checkbox.checked) {
showConditional = true;
checkedTriggers.push(checkbox.value);
}
});
conditionalItems.forEach((item, index) => {
if (showConditional) {
item.style.removeProperty("display");
item.style.removeProperty("visibility");
item.style.removeProperty("opacity");
item.style.setProperty("display", "flex", "important");
item.style.setProperty("visibility", "visible", "important");
void item.offsetHeight;
item.style.setProperty("opacity", "1", "important");
} else {
item.style.setProperty("opacity", "0", "important");
item.style.setProperty("visibility", "hidden", "important");
setTimeout(() => {
if (!showConditional) {
item.style.setProperty("display", "none", "important");
}
}, 300);
const checkbox = item.querySelector('input[type="checkbox"]');
if (checkbox && checkbox.checked) {
checkbox.checked = false;
}
}
});
}
allCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
updateDisplay();
});
});
updateDisplay();
setTimeout(() => {
updateDisplay();
}, 100);
});
})();
document.addEventListener("DOMContentLoaded", function () {
const otherOptionConfigs = [
{
checkboxSelector: "#domestic-other",
extInputName: "domesticTravelOther",
createIfMissing: false,
},
{
checkboxSelector: "#overseas-other",
extInputName: "overseasTravelOther",
createIfMissing: false,
},
{
checkboxSelector: 'input[name="shirtBudget"][value="other"]',
extInputName: "shirtBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="tshirtBudget"][value="other"]',
extInputName: "tshirtBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="pantsBudget"][value="other"]',
extInputName: "pantsBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="shoesBudget"][value="other"]',
extInputName: "shoesBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="bagBudget"][value="other"]',
extInputName: "bagBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="knitBudget"][value="other"]',
extInputName: "knitBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="jacketBudget"][value="other"]',
extInputName: "jacketBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="watchBudget"][value="other"]',
extInputName: "watchBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="accessoriesBudget"][value="other"]',
extInputName: "accessoriesBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="hatBudget"][value="other"]',
extInputName: "hatBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: 'input[name="glassesBudget"][value="other"]',
extInputName: "glassesBudgetOther",
placeholder: "具体的な予算をご記入ください",
createIfMissing: true,
},
{
checkboxSelector: "#weekday-other",
extInputName: "weekdayLifestyleOther",
placeholder: "具体的にご記入ください",
createIfMissing: true,
},
];
function createTextInput(config, checkbox) {
const wrapper = document.createElement("div");
wrapper.className = "other-text-input-wrapper";
wrapper.style.display = "none";
wrapper.style.marginTop = "10px";
wrapper.style.marginLeft = "24px";
const input = document.createElement("input");
input.type = "text";
input.name = config.textInputName;
input.className = "other-text-input";
input.placeholder = config.placeholder || "具体的にご記入ください";
input.style.width = "100%";
input.style.padding = "8px 12px";
input.style.border = "1px solid #ddd";
input.style.borderRadius = "4px";
input.style.fontSize = "14px";
wrapper.appendChild(input);
const label = checkbox.closest("label");
if (label && label.parentNode) {
label.parentNode.insertBefore(wrapper, label.nextSibling);
}
return wrapper;
}
function handleOtherCheckbox(checkbox, textInputWrapper) {
if (checkbox.checked) {
extInputWrapper.style.display = "block";
const input = textInputWrapper.querySelector("input");
if (input) {
input.focus();
}
} else {
extInputWrapper.style.display = "none";
const input = textInputWrapper.querySelector("input");
if (input) {
input.value = "";
}
}
}
const budgetRadioGroups = [
"shirtBudget",
"tshirtBudget",
"knitBudget",
"jacketBudget",
"pantsBudget",
"shoesBudget",
"bagBudget",
"watchBudget",
"accessoriesBudget",
"hatBudget",
"glassesBudget",
];
budgetRadioGroups.forEach((groupName) => {
const radios = document.querySelectorAll(`input[name="${groupName}"]`);
const otherRadio = document.querySelector(
`input[name="${groupName}"][value="other"]`
);
const textInputWrapper = document.querySelector(
`input[name="${groupName}Other"]`
)?.parentElement;
if (otherRadio && textInputWrapper) {
radios.forEach((radio) => {
radio.addEventListener("change", function () {
if (this.value === "other" && this.checked) {
extInputWrapper.style.display = "block";
const input = textInputWrapper.querySelector("input");
if (input) input.focus();
} else if (this.value !== "other" && this.checked) {
extInputWrapper.style.display = "none";
const input = textInputWrapper.querySelector("input");
if (input) input.value = "";
}
});
});
if (!otherRadio.checked) {
extInputWrapper.style.display = "none";
}
}
});
const form = document.querySelector("form");
if (form) {
form.addEventListener("submit", function (e) {
let isValid = true;
const errors = [];
otherOptionConfigs.forEach((config) => {
const checkbox = document.querySelector(config.checkboxSelector);
const textInput = document.querySelector(
`input[name="${config.textInputName}"]`
);
if (
checkbox &&
checkbox.checked &&
extInput &&
!textInput.value.trim()
) {
isValid = false;
errors.push(
`「その他」を選択した項目の詳細を入力してください: ${config.textInputName}`
);
extInput.style.borderColor = "#ff4444";
}
});
budgetRadioGroups.forEach((groupName) => {
const otherRadio = document.querySelector(
`input[name="${groupName}"][value="other"]:checked`
);
const textInput = document.querySelector(
`input[name="${groupName}Other"]`
);
if (otherRadio && textInput && !textInput.value.trim()) {
isValid = false;
errors.push(
`「その他」を選択した予算の詳細を入力してください: ${groupName}`
);
extInput.style.borderColor = "#ff4444";
}
});
if (!isValid) {
e.preventDefault();
alert(errors.join("\n"));
}
});
}
});
document.addEventListener("DOMContentLoaded", function () {
function enhancePatternEvaluations() {
const patternItems = document.querySelectorAll(".pattern-item");
patternItems.forEach((item) => {
const evalRadios = item.querySelectorAll(
'.good-bad-selection input[type="radio"]'
);
const ratingSection = item.querySelector(".rating-section");
const ratingButtons = item.querySelectorAll(".rating-btn");
evalRadios.forEach((radio) => {
radio.addEventListener("change", function () {
if (this.checked) {
item.classList.add("has-evaluation");
if (this.value === "good") {
item.classList.add("good-selected");
item.classList.remove("bad-selected");
} else {
item.classList.add("bad-selected");
item.classList.remove("good-selected");
}
if (ratingSection) {
ratingSection.classList.add("visible");
}
riggerRipple(this.parentElement);
}
});
});
ratingButtons.forEach((btn) => {
btn.addEventListener("click", function () {
ratingButtons.forEach((b) => b.classList.remove("active"));
his.classList.add("active");
animateButton(this);
});
});
});
}
function triggerRipple(element) {
const ripple = document.createElement("span");
ripple.className = "ripple-effect";
element.appendChild(ripple);
setTimeout(() => {
ripple.remove();
}, 600);
}
function animateButton(button) {
button.style.transform = "scale(0.95)";
setTimeout(() => {
button.style.transform = "";
}, 100);
}
const observer = new MutationObserver((mutations) => {
mutations.forEach((mutation) => {
if (mutation.addedNodes.length) {
mutation.addedNodes.forEach((node) => {
if (node.nodeType === 1 && node.querySelector(".pattern-item")) {
enhancePatternEvaluations();
}
});
}
});
});
const container = document.querySelector(".complete-form-container");
if (container) {
observer.observe(container, {
childList: true,
subtree: true,
});
}
enhancePatternEvaluations();
const genderRadios = document.querySelectorAll('input[name="gender"]');
genderRadios.forEach((radio) => {
radio.addEventListener("change", function () {
setTimeout(enhancePatternEvaluations, 500);
});
});
});
const locationData = {
kanto: {
name: "関東",
prefectures: {
okyo: {
name: "東京都",
cities: [
"千代田区",
"中央区",
"港区",
"新宿区",
"文京区",
"台東区",
"墨田区",
"江東区",
"品川区",
"目黒区",
"大田区",
"世田谷区",
"渋谷区",
"中野区",
"杉並区",
"豊島区",
"北区",
"荒川区",
"板橋区",
"練馬区",
"足立区",
"葛飾区",
"江戸川区",
"その他東京23区外",
],
},
kanagawa: {
name: "神奈川県",
cities: ["横浜市", "川崎市", "その他神奈川県"],
},
chiba: {
name: "千葉県",
cities: ["千葉市", "その他千葉県"],
},
saitama: {
name: "埼玉県",
cities: ["さいたま市", "その他埼玉県"],
},
ibaraki: {
name: "茨城県",
cities: ["つくば市", "水戸市", "その他茨城県"],
},
ochigi: {
name: "栃木県",
cities: ["宇都宮市", "その他栃木県"],
},
gunma: {
name: "群馬県",
cities: ["前橋市", "高崎市", "その他群馬県"],
},
},
},
"hokkaido-tohoku": {
name: "北海道・東北",
prefectures: {
hokkaido: {
name: "北海道",
cities: ["札幌市", "函館市", "旭川市", "その他北海道"],
},
aomori: { name: "青森県", cities: ["青森市", "その他青森県"] },
iwate: { name: "岩手県", cities: ["盛岡市", "その他岩手県"] },
miyagi: { name: "宮城県", cities: ["仙台市", "その他宮城県"] },
akita: { name: "秋田県", cities: ["秋田市", "その他秋田県"] },
yamagata: { name: "山形県", cities: ["山形市", "その他山形県"] },
fukushima: {
name: "福島県",
cities: ["福島市", "郡山市", "その他福島県"],
},
},
},
chubu: {
name: "中部",
prefectures: {
niigata: { name: "新潟県", cities: ["新潟市", "その他新潟県"] },
oyama: { name: "富山県", cities: ["富山市", "その他富山県"] },
ishikawa: { name: "石川県", cities: ["金沢市", "その他石川県"] },
fukui: { name: "福井県", cities: ["福井市", "その他福井県"] },
yamanashi: { name: "山梨県", cities: ["甲府市", "その他山梨県"] },
nagano: { name: "長野県", cities: ["長野市", "松本市", "その他長野県"] },
gifu: { name: "岐阜県", cities: ["岐阜市", "その他岐阜県"] },
shizuoka: {
name: "静岡県",
cities: ["静岡市", "浜松市", "その他静岡県"],
},
aichi: { name: "愛知県", cities: ["名古屋市", "豊田市", "その他愛知県"] },
},
},
kinki: {
name: "近畿",
prefectures: {
mie: { name: "三重県", cities: ["津市", "その他三重県"] },
shiga: { name: "滋賀県", cities: ["大津市", "その他滋賀県"] },
kyoto: { name: "京都府", cities: ["京都市", "その他京都府"] },
osaka: { name: "大阪府", cities: ["大阪市", "堺市", "その他大阪府"] },
hyogo: { name: "兵庫県", cities: ["神戸市", "姫路市", "その他兵庫県"] },
nara: { name: "奈良県", cities: ["奈良市", "その他奈良県"] },
wakayama: { name: "和歌山県", cities: ["和歌山市", "その他和歌山県"] },
},
},
"chugoku-shikoku": {
name: "中国・四国",
prefectures: {
ottori: { name: "鳥取県", cities: ["鳥取市", "その他鳥取県"] },
shimane: { name: "島根県", cities: ["松江市", "その他島根県"] },
okayama: { name: "岡山県", cities: ["岡山市", "倉敷市", "その他岡山県"] },
hiroshima: {
name: "広島県",
cities: ["広島市", "福山市", "その他広島県"],
},
yamaguchi: {
name: "山口県",
cities: ["山口市", "下関市", "その他山口県"],
},
okushima: { name: "徳島県", cities: ["徳島市", "その他徳島県"] },
kagawa: { name: "香川県", cities: ["高松市", "その他香川県"] },
ehime: { name: "愛媛県", cities: ["松山市", "その他愛媛県"] },
kochi: { name: "高知県", cities: ["高知市", "その他高知県"] },
},
},
"kyushu-okinawa": {
name: "九州・沖縄",
prefectures: {
fukuoka: {
name: "福岡県",
cities: ["福岡市", "北九州市", "その他福岡県"],
},
saga: { name: "佐賀県", cities: ["佐賀市", "その他佐賀県"] },
nagasaki: {
name: "長崎県",
cities: ["長崎市", "佐世保市", "その他長崎県"],
},
kumamoto: { name: "熊本県", cities: ["熊本市", "その他熊本県"] },
oita: { name: "大分県", cities: ["大分市", "別府市", "その他大分県"] },
miyazaki: { name: "宮崎県", cities: ["宮崎市", "その他宮崎県"] },
kagoshima: { name: "鹿児島県", cities: ["鹿児島市", "その他鹿児島県"] },
okinawa: { name: "沖縄県", cities: ["那覇市", "その他沖縄県"] },
},
},
};
function handleGenderChange(radio) {
const body = document.body;
body.classList.add("gender-transitioning");
setTimeout(() => {
body.classList.remove("gender-transitioning");
}, 600);
if (radio.value === "female") {
body.classList.add("female-form");
updateFormContent("female");
updateAllImages("female");
} else {
body.classList.remove("female-form");
updateFormContent("male");
updateAllImages("male");
}
}
function updateFormContent(gender) {
if (gender === "female" && typeof femaleFormData !== "undefined") {
const mainTitle = document.querySelector(
'.main-title[data-gender-text="true"]'
);
const mainSubtitle = document.querySelector(
'.main-subtitle[data-gender-text="true"]'
);
if (mainTitle && femaleFormData.textUpdates) {
mainTitle.textContent =
femaleFormData.textUpdates.mainTitle || mainTitle.textContent;
}
if (mainSubtitle && femaleFormData.textUpdates) {
mainSubtitle.textContent =
femaleFormData.textUpdates.mainSubtitle || mainSubtitle.textContent;
}
if (
femaleFormData.textUpdates &&
femaleFormData.textUpdates.sectionTitles
) {
Object.entries(femaleFormData.textUpdates.sectionTitles).forEach(
([key, value]) => {
const elements = document.querySelectorAll(
`[data-section-key="${key}"]`
);
elements.forEach((el) => {
el.textContent = value;
});
}
);
document.querySelectorAll(".subsection-title").forEach((title) => {
const text = title.textContent;
if (text.includes("魅力を感じるスタイル")) {
itle.textContent = text.replace(
"魅力を感じるスタイル",
femaleFormData.textUpdates.sectionTitles.attractiveStyle ||
"魅力を感じる女性のスタイル"
);
} else if (text.includes("避けたいアイテム")) {
itle.textContent = text.replace(
"避けたいアイテム",
femaleFormData.textUpdates.sectionTitles.avoidItems ||
"苦手な（避けたい）アイテム・デザイン"
);
}
});
}
if (femaleFormData.textUpdates && femaleFormData.textUpdates.labels) {
Object.entries(femaleFormData.textUpdates.labels).forEach(
([key, value]) => {
const elements = document.querySelectorAll(
`[data-label-key="${key}"]`
);
elements.forEach((el) => {
el.textContent = value;
});
}
);
}
if (femaleFormData.textUpdates && femaleFormData.textUpdates.hints) {
Object.entries(femaleFormData.textUpdates.hints).forEach(
([key, value]) => {
const elements = document.querySelectorAll(
`[data-hint-key="${key}"]`
);
elements.forEach((el) => {
el.textContent = value;
});
}
);
}
updateStyleImages("female");
updateAvoidItems("female");
updateClothingItems("female");
} else if (gender === "male") {
const mainTitle = document.querySelector(
'.main-title[data-gender-text="true"]'
);
const mainSubtitle = document.querySelector(
'.main-subtitle[data-gender-text="true"]'
);
if (mainTitle) {
mainTitle.textContent = "Personal Style Configuration";
}
if (mainSubtitle) {
mainSubtitle.textContent =
"お客様のライフスタイルに最適なスタイリングをご提供するため、詳細な情報をお聞かせください";
}
document.querySelectorAll(".subsection-title").forEach((title) => {
const text = title.textContent;
if (text.includes("女性のスタイル")) {
itle.textContent = text.replace(
"魅力を感じる女性のスタイル",
"魅力を感じるスタイル"
);
} else if (text.includes("アイテム・デザイン")) {
itle.textContent = text.replace(
"苦手な（避けたい）アイテム・デザイン",
"避けたいアイテム"
);
}
});
updateStyleImages("male");
updateAvoidItems("male");
updateClothingItems("male");
}
if (typeof window.updateGenderStylePatterns === "function") {
window.updateGenderStylePatterns();
}
}
function updateStyleImages(gender) {
if (typeof imageMapping === "undefined" || !imageMapping.attractiveStyles) {
return;
}
const genderStyles =
imageMapping.attractiveStyles[gender] || imageMapping.attractiveStyles.male;
document.querySelectorAll(".style-preference-card").forEach((card) => {
const input = card.querySelector('input[type="checkbox"]');
const img = card.querySelector("img");
const span = card.querySelector("span");
if (input && img && genderStyles[input.value]) {
const styleData = genderStyles[input.value];
img.src = styleData.image;
img.alt = styleData.name;
if (span) {
span.textContent = styleData.name;
}
}
});
}
function updateAvoidItems(gender) {
if (typeof imageMapping === "undefined" || !imageMapping.avoidItems) {
return;
}
const genderAvoidItems =
imageMapping.avoidItems[gender] || imageMapping.avoidItems.male;
document.querySelectorAll(".avoid-item").forEach((item) => {
const input = item.querySelector('input[type="checkbox"]');
const img = item.querySelector("img");
const span = item.querySelector("span");
if (input && img && genderAvoidItems[input.value]) {
const itemData = genderAvoidItems[input.value];
img.src = itemData.image;
img.alt = itemData.name;
if (span) {
span.textContent = itemData.name;
}
}
});
}
function updateClothingItems(gender) {
if (typeof imageMapping === "undefined" || !imageMapping.clothingItems) {
return;
}
const genderClothingItems =
imageMapping.clothingItems[gender] || imageMapping.clothingItems.male;
document.querySelectorAll(".clothing-item-box").forEach((box) => {
const input = box.querySelector('input[type="checkbox"]');
const img = box.querySelector("img");
const nameDiv = box.querySelector(".clothing-item-name");
if (input && img && genderClothingItems[input.value]) {
const itemData = genderClothingItems[input.value];
img.src = itemData.image;
img.alt = itemData.name;
if (nameDiv) {
nameDiv.textContent = itemData.name;
}
}
});
}
function checkImageExists(imagePath) {
return true;
}
function initializePhotoUpload() {
const photoInputs = document.querySelectorAll(".photo-input");
photoInputs.forEach((input) => {
input.addEventListener("change", function (e) {
const file = e.target.files[0];
if (file && file.type.startsWith("image/")) {
const reader = new FileReader();
const photoBox = input.closest(".photo-upload-box");
const preview = photoBox.querySelector(".photo-preview");
const placeholder = photoBox.querySelector(".photo-placeholder");
reader.onload = function (e) {
preview.src = e.target.result;
preview.style.display = "block";
photoBox.classList.add("has-image");
if (placeholder) {
placeholder.style.display = "none";
}
let changeBtn = photoBox.querySelector(".change-photo-btn");
if (!changeBtn) {
changeBtn = document.createElement("button");
changeBtn.className = "change-photo-btn";
changeBtn.textContent = "画像を変更";
changeBtn.type = "button";
changeBtn.onclick = function (e) {
e.preventDefault();
e.stopPropagation();
input.click();
};
photoBox.appendChild(changeBtn);
}
};
reader.readAsDataURL(file);
}
});
});
const photoBoxes = document.querySelectorAll(".photo-upload-box");
photoBoxes.forEach((box) => {
box.addEventListener("dragover", function (e) {
e.preventDefault();
e.stopPropagation();
box.classList.add("drag-over");
});
box.addEventListener("dragleave", function (e) {
e.preventDefault();
e.stopPropagation();
box.classList.remove("drag-over");
});
box.addEventListener("drop", function (e) {
e.preventDefault();
e.stopPropagation();
box.classList.remove("drag-over");
const files = e.dataTransfer.files;
const input = box.querySelector(".photo-input");
if (files.length > 0 && files[0].type.startsWith("image/")) {
input.files = files;
const event = new Event("change", { bubbles: true });
input.dispatchEvent(event);
}
});
});
}
function populateBirthDate() {
const currentYear = new Date().getFullYear();
const yearSelect = document.getElementById("birthYear");
const monthSelect = document.getElementById("birthMonth");
const daySelect = document.getElementById("birthDay");
if (yearSelect) {
while (yearSelect.options.length > 1) {
yearSelect.remove(1);
}
for (let year = currentYear; year >= 1940; year--) {
const option = document.createElement("option");
option.value = year;
option.textContent = `${year}年`;
yearSelect.appendChild(option);
}
}
if (monthSelect) {
while (monthSelect.options.length > 1) {
monthSelect.remove(1);
}
for (let month = 1; month <= 12; month++) {
const option = document.createElement("option");
option.value = month;
option.textContent = `${month}月`;
monthSelect.appendChild(option);
}
}
if (daySelect) {
while (daySelect.options.length > 1) {
daySelect.remove(1);
}
for (let day = 1; day <= 31; day++) {
const option = document.createElement("option");
option.value = day;
option.textContent = `${day}日`;
daySelect.appendChild(option);
}
}
function updateDays() {
const year = parseInt(yearSelect.value);
const month = parseInt(monthSelect.value);
if (year && month) {
const daysInMonth = new Date(year, month, 0).getDate();
const currentDay = daySelect.value;
daySelect.innerHTML = '<option value="">日</option>';
for (let day = 1; day <= daysInMonth; day++) {
const option = document.createElement("option");
option.value = day;
option.textContent = day;
daySelect.appendChild(option);
}
if (currentDay && currentDay <= daysInMonth) {
daySelect.value = currentDay;
}
}
}
function calculateAge() {
const year = parseInt(yearSelect.value);
const month = parseInt(monthSelect.value);
const day = parseInt(daySelect.value);
const ageDisplay = document.getElementById("ageDisplay");
if (year && month && day && ageDisplay) {
const birthDate = new Date(year, month - 1, day);
const today = new Date();
let age = today.getFullYear() - birthDate.getFullYear();
const monthDiff = today.getMonth() - birthDate.getMonth();
if (
monthDiff < 0 ||
(monthDiff === 0 && today.getDate() < birthDate.getDate())
) {
age--;
}
ageDisplay.textContent = `（${age}歳）`;
ageDisplay.style.color = "#ffffff";
ageDisplay.style.fontWeight = "500";
} else if (ageDisplay) {
ageDisplay.textContent = "";
}
}
if (yearSelect && monthSelect && daySelect) {
yearSelect.addEventListener("change", function () {
updateDays();
calculateAge();
});
monthSelect.addEventListener("change", function () {
updateDays();
calculateAge();
});
daySelect.addEventListener("change", calculateAge);
}
}
window.addEventListener("load", function () {
setTimeout(() => {
initializeBirthDateSelector();
setupConditionalSections();
}, 100);
});
document.addEventListener("DOMContentLoaded", function () {
const genderRadios = document.querySelectorAll('input[name="formGender"]');
function switchGender(value) {
const body = document.body;
if (value === "female") {
body.classList.add("female-form");
body.setAttribute("data-gender", "female");
} else {
body.classList.remove("female-form");
body.setAttribute("data-gender", "male");
}
}
genderRadios.forEach((radio) => {
radio.addEventListener("change", function () {
if (this.checked) {
switchGender(this.value);
}
});
radio.addEventListener("click", function () {
if (!this.checked) {
his.checked = true;
switchGender(this.value);
}
});
});
const checkedRadio = document.querySelector(
'input[name="formGender"]:checked'
);
if (checkedRadio) {
switchGender(checkedRadio.value);
}
setTimeout(() => {
updateStyleImages("female");
updateAvoidItems("female");
updateClothingItems("female");
}, 100);
});
const genderContent = {
male: {
attractiveStyles: [
"mode",
"classic",
"minimal",
"elegant",
"casual-chic",
"relax",
"american-casual",
"street",
"conservative",
],
avoidItems: [
"tight",
"oversized",
"logo",
"bright-color",
"synthetic",
"bold-print",
],
weekdayOptions: [
"office-external",
"office-internal",
"office-desk",
"remote",
"hybrid",
"home",
"other",
],
holidayOptions: [
"friends",
"family",
"date",
"solo",
"sports",
"drive",
"outdoor-activities",
"events",
"business-dining",
"executive-meeting",
"holiday-other",
],
},
female: {
attractiveStyles: [
"feminine",
"elegant",
"casual-chic",
"modern",
"classic",
"natural",
"sophisticated",
"trendy",
"artistic",
],
avoidItems: [
"mini-length",
"excessive-exposure",
"frills-lace",
"high-heels",
"thin-material",
"ruffles",
],
weekdayOptions: [
"office-external",
"office-internal",
"office-desk",
"remote",
"hybrid",
"home",
"other",
],
holidayOptions: [
"friends",
"family",
"date",
"solo",
"shopping",
"beauty-salon",
"cultural-activities",
"events",
"lunch-meeting",
"parent-activities",
"holiday-other",
],
},
};
const femaleFormData = {
extUpdates: {
mainTitle: "Personal Style Configuration for Women",
mainSubtitle:
"女性のお客様のライフスタイルに最適なスタイリングをご提供するため、詳細な情報をお聞かせください",
},
attractiveStyles: {
mode: { name: "モード", image: "images/style-female-mode-1.webp" },
elegant: { name: "エレガント", image: "images/style-female-elegant-1.webp" },
"urban-conservative": { name: "アーバン/コンサバティブ", image: "images/style-female-urban-conservative-1.webp",},
feminine: { name: "フェミニン", image: "images/style-female-feminine-1.webp" },
sporty: { name: "スポーティー", image: "images/style-female-sporty-1.webp" },
natural: { name: "ナチュラル", image: "images/style-female-natural-1.webp" },
},
avoidItems: {
"mini-length": { name: "ミニ丈", image: "images/avoid-mini-length.webp" },
"excessive-exposure": {
name: "過度な露出",
image: "images/avoid-excessive-exposure.webp",
},
"frills-lace": {
name: "フリル・レース",
image: "images/avoid-frills-lace.webp",
},
"high-heels": { name: "ハイヒール", image: "images/avoid-high-heels.webp" },
"thin-material": {
name: "薄い素材",
image: "images/avoid-thin-material.webp",
},
ruffles: { name: "ラッフル", image: "images/avoid-ruffles.webp" },
},
};
function switchFormGender(gender) {
const body = document.body;
if (gender === "female") {
body.classList.add("female-form");
updateFormContent("female");
} else {
body.classList.remove("female-form");
updateFormContent("male");
}
}
function updateAllImages(gender) {
const allImages = document.querySelectorAll("img");
allImages.forEach((img) => {
const currentSrc = img.src || img.getAttribute("src");
if (!currentSrc) return;
const filename = currentSrc.split("/").pop();
if (window.imageMapping && window.imageMapping[filename]) {
const newFilename = window.imageMapping[filename][gender] || filename;
const newSrc = currentSrc.replace(filename, newFilename);
img.src = newSrc;
if (img.srcset) {
img.srcset = img.srcset.replace(filename, newFilename);
}
addGenderSwitchIndicator(img, filename, gender);
}
});
}
function addGenderSwitchIndicator(img, filename, gender) {
const section = img.closest('.form-group, .form-section, [class*="section"]');
if (section) {
const sectionTitle = section.querySelector('h3, h4, .section-title, .subsection-title, .service-question, label');
const sectionName = sectionTitle ? sectionTitle.textContent.trim() : '不明なセクション';
let indicator = section.querySelector('.gender-switch-indicator');
if (!indicator) {
indicator = document.createElement('div');
indicator.className = 'gender-switch-indicator';
indicator.style.cssText = `
position: absolute;
op: 10px;
right: 10px;
style-male-mode-1.webp
color: #000;
padding: 6px 12px;
border-radius: 6px;
font-size: 11px;
font-weight: 600;
z-index: 100;
pointer-events: none;
max-width: 200px;
ext-align: center;
line-height: 1.2;
box-shadow: 0 2px 8px rgba(0,0,0,0.2);
`;
section.style.position = 'relative';
section.appendChild(indicator);
}
const genderText = gender === 'female' ? 'レディース' : 'メンズ';
const shortSectionName = sectionName.length > 20 ? sectionName.substring(0, 17) + '...' : sectionName;
indicator.innerHTML = `<div style="font-weight: 700;">${shortSectionName}</div><div>${genderText}画像に切り替え</div>`;
indicator.style.opacity = '1';
indicator.style.transform = 'translateY(0)';
setTimeout(() => {
if (indicator.parentNode) {
indicator.style.opacity = '0';
indicator.style.transform = 'translateY(-10px)';
setTimeout(() => {
if (indicator.parentNode) {
indicator.remove();
}
}, 500);
}
}, 3000);
}
}
function updateFormContent(gender) {
const mainTitle = document.querySelector(".main-title[data-gender-text]");
const mainSubtitle = document.querySelector(
".main-subtitle[data-gender-text]"
);
if (gender === "female" && typeof femaleFormData !== "undefined") {
if (mainTitle && femaleFormData.textUpdates) {
mainTitle.textContent =
femaleFormData.textUpdates.mainTitle ||
"Personal Style Configuration for Women";
}
if (mainSubtitle && femaleFormData.textUpdates) {
mainSubtitle.textContent =
femaleFormData.textUpdates.mainSubtitle ||
"女性のお客様のライフスタイルに最適なスタイリングをご提供するため、詳細な情報をお聞かせください";
}
updateAttractiveStyles("female");
updateAvoidItems("female");
updateWeekendActivities("female");
} else {
if (mainTitle) mainTitle.textContent = "Personal Style Configuration";
if (mainSubtitle)
mainSubtitle.textContent =
"お客様のライフスタイルに最適なスタイリングをご提供するため、詳細な情報をお聞かせください";
updateAttractiveStyles("male");
updateAvoidItems("male");
updateWeekendActivities("male");
}
updateAllImages(gender);
if (typeof updateGenderStylePatterns === "function") {
updateGenderStylePatterns();
}
}
function updateAttractiveStyles(gender) {
const styleGrid = document.querySelector(".style-preference-grid");
if (!styleGrid) return;
styleGrid.innerHTML = "";
if (
gender === "female" &&
femaleFormData &&
femaleFormData.attractiveStyles
) {
Object.entries(femaleFormData.attractiveStyles).forEach(([key, style]) => {
const styleCard = document.createElement("div");
styleCard.className = "style-preference-card";
styleCard.innerHTML = `
<input type="checkbox" name="attractiveStyle" value="${key}" id="attractive-${key}">
<label for="attractive-${key}">
<img src="${style.image}" alt="${style.name}">
<span>${style.name}</span>
</label>
`;
styleGrid.appendChild(styleCard);
});
} else {
const maleStyles = genderContent.male.attractiveStyles;
maleStyles.forEach((style) => {
const styleCard = document.createElement("div");
styleCard.className = "style-preference-card";
styleCard.innerHTML = `
<input type="checkbox" name="attractiveStyle" value="${style}" id="attractive-${style}">
<label for="attractive-${style}">
<img src="images/style-${style}.webp" alt="${getStyleName(
style
)}">
<span>${getStyleName(style)}</span>
</label>
`;
styleGrid.appendChild(styleCard);
});
}
}
function updateAvoidItems(gender) {
const avoidGrid = document.querySelector(".avoid-items-grid");
if (!avoidGrid) return;
avoidGrid.innerHTML = "";
if (gender === "female" && femaleFormData && femaleFormData.avoidItems) {
Object.entries(femaleFormData.avoidItems).forEach(([key, item]) => {
const avoidCard = document.createElement("div");
avoidCard.className = "avoid-item-card";
avoidCard.innerHTML = `
<input type="checkbox" name="avoidItems" value="${key}" id="avoid-${key}">
<label for="avoid-${key}">
<img src="${item.image}" alt="${item.name}">
<span>${item.name}</span>
</label>
`;
avoidGrid.appendChild(avoidCard);
});
} else {
const maleAvoidItems = genderContent.male.avoidItems;
maleAvoidItems.forEach((item) => {
const avoidCard = document.createElement("div");
avoidCard.className = "avoid-item-card";
avoidCard.innerHTML = `
<input type="checkbox" name="avoidItems" value="${item}" id="avoid-${item}">
<label for="avoid-${item}">
<img src="images/avoid-${item}.webp" alt="${getAvoidItemName(
item
)}">
<span>${getAvoidItemName(item)}</span>
</label>
`;
avoidGrid.appendChild(avoidCard);
});
}
}
function updateWeekendActivities(gender) {
const weekendGrid = document.querySelector(".weekend-grid");
if (!weekendGrid) return;
}
function getStyleName(style) {
const styleNames = {
mode: "モード",
classic: "クラシック",
minimal: "ミニマル",
elegant: "エレガント",
"casual-chic": "カジュアルシック",
relax: "リラックス",
"american-casual": "アメリカンカジュアル",
street: "ストリート",
conservative: "コンサバティブ",
};
return styleNames[style] || style;
}
function getAvoidItemName(item) {
const itemNames = {
ight: "タイト過ぎる",
oversized: "オーバーサイズ",
logo: "ロゴ",
"bright-color": "明るい色",
synthetic: "合成素材",
"bold-print": "派手なプリント",
};
return itemNames[item] || item;
}
document.addEventListener("DOMContentLoaded", function () {
const genderRadios = document.querySelectorAll('input[name="formGender"]');
genderRadios.forEach((radio) => {
radio.addEventListener("change", function (e) {
if (this.checked) {
switchFormGender(this.value);
}
});
radio.addEventListener("click", function (e) {
if (!this.checked) {
his.checked = true;
const event = new Event("change", { bubbles: true });
his.dispatchEvent(event);
}
});
});
const checkedGender = document.querySelector(
'input[name="formGender"]:checked'
);
if (checkedGender) {
switchFormGender(checkedGender.value);
}
});
let patternSelectionInitialized = false;
function initializePatternSelection_DISABLED() {
return;
if (patternSelectionInitialized) {
return;
}
const styleCheckboxes = document.querySelectorAll(
'input[name="attractiveStyle"]'
);
const patternSection = document.getElementById("patternSelections");
const patternContainer = document.getElementById(
"patternSelectionsContainer"
);
if (!patternSection || !patternContainer || styleCheckboxes.length === 0) {
return;
}
patternSelectionInitialized = true;
const categoryItems = {
ops: [
{ id: "top1", name: "シャツ1", image: "images/item-shirt1.webp" },
{ id: "top2", name: "シャツ2", image: "images/item-shirt2.webp" },
{ id: "top3", name: "ニット1", image: "images/item-knit1.webp" },
],
bottoms: [
{ id: "bottom1", name: "パンツ1", image: "images/item-pants1.webp" },
{ id: "bottom2", name: "パンツ2", image: "images/item-pants2.webp" },
],
outerwear: [
{ id: "outer1", name: "ジャケット1", image: "images/item-jacket1.webp" },
{ id: "outer2", name: "ジャケット2", image: "images/item-jacket2.webp" },
],
shoes: [
{ id: "shoes1", name: "シューズ1", image: "images/item-shoes1.webp" },
{ id: "shoes2", name: "シューズ2", image: "images/item-shoes2.webp" },
],
bags: [
{ id: "bag1", name: "バッグ1", image: "images/item-bag1.webp" },
{ id: "bag2", name: "バッグ2", image: "images/item-bag2.webp" },
],
};
styleCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const checkedBoxes = Array.from(styleCheckboxes).filter(
(cb) => cb.checked
);
if (checkedBoxes.length > 3) {
his.checked = false;
alert("最大3つまで選択できます。");
return;
}
updatePatternSelections();
});
});
function updatePatternSelections() {
const selectedStyles = Array.from(styleCheckboxes)
.filter((cb) => cb.checked)
.map((cb) => cb.value);
if (selectedStyles.length > 0) {
patternSection.style.display = "block";
patternSection.scrollIntoView({ behavior: "smooth", block: "nearest" });
renderPatternSelections(selectedStyles);
} else {
patternSection.style.display = "none";
patternContainer.innerHTML = "";
}
}
function renderPatternSelections(selectedStyles) {
patternContainer.innerHTML = "";
selectedStyles.forEach((styleKey) => {
if (styleKey === "other") return;
const styleData = stylePatterns[styleKey];
if (!styleData) return;
const styleContainer = document.createElement("div");
styleContainer.className = "style-pattern-container";
styleContainer.innerHTML = `
<div class="style-pattern-header">
<img src="images/style-${styleKey}.webp" alt="${
styleData.name
}" class="style-pattern-icon">
<h3 class="style-pattern-title">${
styleData.name
}のパターンバリエーション</h3>
</div>
<p class="form-hint" style="margin-bottom: 20px;">以下の5つのパターンについて、それぞれGOOD/BADを評価してください。</p>
<div class="pattern-variations-grid">
${styleData.patterns
.map(
(pattern, patternIndex) => `
<div class="pattern-variation-card">
<img src="${pattern.image}" alt="${pattern.name}" onerror="this.src='images/placeholder.webp'" class="pattern-variation-image">
<div class="pattern-variation-name">${pattern.name}</div>
<div class="good-bad-selection">
<label class="good-bad-option good-option">
<input type="radio" name="pattern_${styleKey}_${patternIndex}_eval" value="good" onchange="toggleReasonSection(this, 'pattern_${styleKey}_${patternIndex}')">
<span>GOOD</span>
</label>
<label class="good-bad-option bad-option">
<input type="radio" name="pattern_${styleKey}_${patternIndex}_eval" value="bad" onchange="toggleReasonSection(this, 'pattern_${styleKey}_${patternIndex}')">
<span>BAD</span>
</label>
</div>
<div class="good-bad-reasons" id="reasons_pattern_${styleKey}_${patternIndex}" style="display: none;">
<p class="reason-label">理由（複数選択可）:</p>
<div class="reason-options">
<label class="reason-checkbox">
<input type="checkbox" name="pattern_${styleKey}_${patternIndex}_reasons" value="design">
<span>デザイン</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="pattern_${styleKey}_${patternIndex}_reasons" value="color">
<span>色味</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="pattern_${styleKey}_${patternIndex}_reasons" value="silhouette">
<span>シルエット</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="pattern_${styleKey}_${patternIndex}_reasons" value="material">
<span>素材感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="pattern_${styleKey}_${patternIndex}_reasons" value="trendiness">
<span>トレンド感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="pattern_${styleKey}_${patternIndex}_reasons" value="practicality">
<span>実用性</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="pattern_${styleKey}_${patternIndex}_reasons" value="other">
<span>その他</span>
</label>
<input type="text" name="pattern_${styleKey}_${patternIndex}_reasons_other" class="reason-other-input" placeholder="具体的に：" style="display: none;">
</div>
</div>
</div>
`
)
.join("")}
</div>
<div class="pattern-items-section" id="items_${styleKey}">
<h4 class="pattern-items-header">このスタイルのアイテムを評価してください</h4>
<div class="pattern-category">
<h5 class="pattern-category-title">トップス</h5>
<div class="pattern-items-grid pattern-good-bad-grid">
${categoryItems.tops
.map(
(item, index) => `
<div class="pattern-good-bad-item">
<img src="${item.image}" alt="${item.name}" class="pattern-item-image">
<div class="pattern-item-name">${item.name}</div>
<div class="good-bad-selection">
<label class="good-bad-option good-option">
<input type="radio" name="${styleKey}_tops_${index}_eval" value="good" onchange="toggleReasonSection(this, '${styleKey}_tops_${index}')">
<span>GOOD</span>
</label>
<label class="good-bad-option bad-option">
<input type="radio" name="${styleKey}_tops_${index}_eval" value="bad" onchange="toggleReasonSection(this, '${styleKey}_tops_${index}')">
<span>BAD</span>
</label>
</div>
<div class="good-bad-reasons" id="reasons_${styleKey}_tops_${index}" style="display: none;">
<p class="reason-label">理由（複数選択可）:</p>
<div class="reason-options">
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_tops_${index}_reasons" value="design">
<span>デザイン</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_tops_${index}_reasons" value="color">
<span>色味</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_tops_${index}_reasons" value="silhouette">
<span>シルエット</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_tops_${index}_reasons" value="material">
<span>素材感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_tops_${index}_reasons" value="price">
<span>価格帯</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_tops_${index}_reasons" value="brand">
<span>ブランドイメージ</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_tops_${index}_reasons" value="other">
<span>その他</span>
</label>
<input type="text" name="${styleKey}_tops_${index}_reasons_other" class="reason-other-input" placeholder="具体的に：" style="display: none;">
</div>
</div>
</div>
`
)
.join("")}
</div>
</div>
<div class="pattern-category">
<h5 class="pattern-category-title">ボトムス</h5>
<div class="pattern-items-grid pattern-good-bad-grid">
${categoryItems.bottoms
.map(
(item, index) => `
<div class="pattern-good-bad-item">
<img src="${item.image}" alt="${item.name}" class="pattern-item-image">
<div class="pattern-item-name">${item.name}</div>
<div class="good-bad-selection">
<label class="good-bad-option good-option">
<input type="radio" name="${styleKey}_bottoms_${index}_eval" value="good" onchange="toggleReasonSection(this, '${styleKey}_bottoms_${index}')">
<span>GOOD</span>
</label>
<label class="good-bad-option bad-option">
<input type="radio" name="${styleKey}_bottoms_${index}_eval" value="bad" onchange="toggleReasonSection(this, '${styleKey}_bottoms_${index}')">
<span>BAD</span>
</label>
</div>
<div class="good-bad-reasons" id="reasons_${styleKey}_bottoms_${index}" style="display: none;">
<p class="reason-label">理由（複数選択可）:</p>
<div class="reason-options">
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bottoms_${index}_reasons" value="design">
<span>デザイン</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bottoms_${index}_reasons" value="color">
<span>色味</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bottoms_${index}_reasons" value="silhouette">
<span>シルエット</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bottoms_${index}_reasons" value="material">
<span>素材感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bottoms_${index}_reasons" value="price">
<span>価格帯</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bottoms_${index}_reasons" value="brand">
<span>ブランドイメージ</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bottoms_${index}_reasons" value="other">
<span>その他</span>
</label>
<input type="text" name="${styleKey}_bottoms_${index}_reasons_other" class="reason-other-input" placeholder="具体的に：" style="display: none;">
</div>
</div>
</div>
`
)
.join("")}
</div>
</div>
<div class="pattern-category">
<h5 class="pattern-category-title">アウター</h5>
<div class="pattern-items-grid pattern-good-bad-grid">
${categoryItems.outerwear
.map(
(item, index) => `
<div class="pattern-good-bad-item">
<img src="${item.image}" alt="${item.name}" class="pattern-item-image">
<div class="pattern-item-name">${item.name}</div>
<div class="good-bad-selection">
<label class="good-bad-option good-option">
<input type="radio" name="${styleKey}_outerwear_${index}_eval" value="good" onchange="toggleReasonSection(this, '${styleKey}_outerwear_${index}')">
<span>GOOD</span>
</label>
<label class="good-bad-option bad-option">
<input type="radio" name="${styleKey}_outerwear_${index}_eval" value="bad" onchange="toggleReasonSection(this, '${styleKey}_outerwear_${index}')">
<span>BAD</span>
</label>
</div>
<div class="good-bad-reasons" id="reasons_${styleKey}_outerwear_${index}" style="display: none;">
<p class="reason-label">理由（複数選択可）:</p>
<div class="reason-options">
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_outerwear_${index}_reasons" value="design">
<span>デザイン</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_outerwear_${index}_reasons" value="color">
<span>色味</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_outerwear_${index}_reasons" value="silhouette">
<span>シルエット</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_outerwear_${index}_reasons" value="material">
<span>素材感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_outerwear_${index}_reasons" value="price">
<span>価格帯</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_outerwear_${index}_reasons" value="brand">
<span>ブランドイメージ</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_outerwear_${index}_reasons" value="other">
<span>その他</span>
</label>
<input type="text" name="${styleKey}_outerwear_${index}_reasons_other" class="reason-other-input" placeholder="具体的に：" style="display: none;">
</div>
</div>
</div>
`
)
.join("")}
</div>
</div>
<div class="pattern-category">
<h5 class="pattern-category-title">シューズ</h5>
<div class="pattern-items-grid pattern-good-bad-grid">
${categoryItems.shoes
.map(
(item, index) => `
<div class="pattern-good-bad-item">
<img src="${item.image}" alt="${item.name}" class="pattern-item-image">
<div class="pattern-item-name">${item.name}</div>
<div class="good-bad-selection">
<label class="good-bad-option good-option">
<input type="radio" name="${styleKey}_shoes_${index}_eval" value="good" onchange="toggleReasonSection(this, '${styleKey}_shoes_${index}')">
<span>GOOD</span>
</label>
<label class="good-bad-option bad-option">
<input type="radio" name="${styleKey}_shoes_${index}_eval" value="bad" onchange="toggleReasonSection(this, '${styleKey}_shoes_${index}')">
<span>BAD</span>
</label>
</div>
<div class="good-bad-reasons" id="reasons_${styleKey}_shoes_${index}" style="display: none;">
<p class="reason-label">理由（複数選択可）:</p>
<div class="reason-options">
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_shoes_${index}_reasons" value="design">
<span>デザイン</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_shoes_${index}_reasons" value="color">
<span>色味</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_shoes_${index}_reasons" value="silhouette">
<span>シルエット</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_shoes_${index}_reasons" value="material">
<span>素材感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_shoes_${index}_reasons" value="price">
<span>価格帯</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_shoes_${index}_reasons" value="brand">
<span>ブランドイメージ</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_shoes_${index}_reasons" value="other">
<span>その他</span>
</label>
<input type="text" name="${styleKey}_shoes_${index}_reasons_other" class="reason-other-input" placeholder="具体的に：" style="display: none;">
</div>
</div>
</div>
`
)
.join("")}
</div>
</div>
<div class="pattern-category">
<h5 class="pattern-category-title">バッグ</h5>
<div class="pattern-items-grid pattern-good-bad-grid">
${categoryItems.bags
.map(
(item, index) => `
<div class="pattern-good-bad-item">
<img src="${item.image}" alt="${item.name}" class="pattern-item-image">
<div class="pattern-item-name">${item.name}</div>
<div class="good-bad-selection">
<label class="good-bad-option good-option">
<input type="radio" name="${styleKey}_bags_${index}_eval" value="good" onchange="toggleReasonSection(this, '${styleKey}_bags_${index}')">
<span>GOOD</span>
</label>
<label class="good-bad-option bad-option">
<input type="radio" name="${styleKey}_bags_${index}_eval" value="bad" onchange="toggleReasonSection(this, '${styleKey}_bags_${index}')">
<span>BAD</span>
</label>
</div>
<div class="good-bad-reasons" id="reasons_${styleKey}_bags_${index}" style="display: none;">
<p class="reason-label">理由（複数選択可）:</p>
<div class="reason-options">
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bags_${index}_reasons" value="design">
<span>デザイン</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bags_${index}_reasons" value="color">
<span>色味</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bags_${index}_reasons" value="silhouette">
<span>シルエット</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bags_${index}_reasons" value="material">
<span>素材感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bags_${index}_reasons" value="price">
<span>価格帯</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bags_${index}_reasons" value="brand">
<span>ブランドイメージ</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${styleKey}_bags_${index}_reasons" value="other">
<span>その他</span>
</label>
<input type="text" name="${styleKey}_bags_${index}_reasons_other" class="reason-other-input" placeholder="具体的に：" style="display: none;">
</div>
</div>
</div>
`
)
.join("")}
</div>
</div>
</div>
`;
patternContainer.appendChild(styleContainer);
const patternRadios = styleContainer.querySelectorAll(
`input[name="pattern_${styleKey}"]`
);
const itemsSection = styleContainer.querySelector(`#items_${styleKey}`);
patternRadios.forEach((radio) => {
radio.addEventListener("change", function () {
if (this.checked) {
itemsSection.classList.add("active");
}
});
});
const otherReasonCheckboxes = styleContainer.querySelectorAll(
'input[value="other"]'
);
otherReasonCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const reasonSection = this.closest(".good-bad-reasons");
const otherInput = reasonSection.querySelector(".reason-other-input");
if (otherInput) {
otherInput.style.display = this.checked ? "block" : "none";
if (!this.checked) {
otherInput.value = "";
}
}
});
});
});
}
function populateEvaluationColumns(selectedStyles) {
const topsContainer = document.getElementById("topsEvaluationContainer");
const bottomsContainer = document.getElementById(
"bottomsEvaluationContainer"
);
const accessoriesContainer = document.getElementById(
"accessoriesEvaluationContainer"
);
if (!topsContainer || !bottomsContainer || !accessoriesContainer) {
return;
}
const evaluationItems = {
ops: [
{ id: "shirt1", name: "ドレスシャツ", image: "images/item-shirt1.webp" },
{
id: "shirt2",
name: "カジュアルシャツ",
image: "images/item-shirt2.webp",
},
{
id: "jacket1",
name: "テーラードジャケット",
image: "images/item-jacket1.webp",
},
{
id: "jacket2",
name: "カジュアルジャケット",
image: "images/item-jacket2.webp",
},
],
bottoms: [
{ id: "pants1", name: "ドレスパンツ", image: "images/item-pants1.webp" },
{
id: "pants2",
name: "カジュアルパンツ",
image: "images/item-pants2.webp",
},
],
accessories: [
{
id: "shoes1",
name: "ドレスシューズ",
image: "images/item-shoes1.webp",
},
{
id: "shoes2",
name: "カジュアルシューズ",
image: "images/item-shoes2.webp",
},
{ id: "bag1", name: "ビジネスバッグ", image: "images/item-bag1.webp" },
{ id: "bag2", name: "カジュアルバッグ", image: "images/item-bag2.webp" },
],
};
populateEvaluationColumn(topsContainer, evaluationItems.tops, "tops");
populateEvaluationColumn(
bottomsContainer,
evaluationItems.bottoms,
"bottoms"
);
populateEvaluationColumn(
accessoriesContainer,
evaluationItems.accessories,
"accessories"
);
}
function populateEvaluationColumn(container, items, category) {
container.innerHTML = "";
const itemsGrid = document.createElement("div");
itemsGrid.className = "evaluation-items-grid";
items.forEach((item, index) => {
const itemDiv = document.createElement("div");
itemDiv.className = "evaluation-item";
itemDiv.innerHTML = `
<img src="${item.image}" alt="${item.name}" class="evaluation-item-image" onerror="this.src='images/placeholder.webp'">
<div class="evaluation-item-name">${item.name}</div>
<div class="good-bad-selection">
<label class="good-bad-option good-option">
<input type="radio" name="${category}_${item.id}_eval" value="good" onchange="toggleReasonSection(this, '${category}_${item.id}')">
<span>GOOD</span>
</label>
<label class="good-bad-option bad-option">
<input type="radio" name="${category}_${item.id}_eval" value="bad" onchange="toggleReasonSection(this, '${category}_${item.id}')">
<span>BAD</span>
</label>
</div>
<div class="good-bad-reasons" id="reasons_${category}_${item.id}" style="display: none;">
<p class="reason-label">理由（複数選択可）:</p>
<div class="reason-options">
<label class="reason-checkbox">
<input type="checkbox" name="${category}_${item.id}_reasons" value="design">
<span>デザイン</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${category}_${item.id}_reasons" value="color">
<span>色味</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${category}_${item.id}_reasons" value="silhouette">
<span>シルエット</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${category}_${item.id}_reasons" value="material">
<span>素材感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${category}_${item.id}_reasons" value="price">
<span>価格帯</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${category}_${item.id}_reasons" value="brand">
<span>ブランドイメージ</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${category}_${item.id}_reasons" value="other">
<span>その他</span>
</label>
<input type="text" name="${category}_${item.id}_reasons_other" class="reason-other-input" placeholder="具体的に：" style="display: none;">
</div>
</div>
`;
itemsGrid.appendChild(itemDiv);
});
container.appendChild(itemsGrid);
const otherReasonCheckboxes = container.querySelectorAll(
'input[value="other"]'
);
otherReasonCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const reasonSection = this.closest(".good-bad-reasons");
const otherInput = reasonSection.querySelector(".reason-other-input");
if (otherInput) {
otherInput.style.display = this.checked ? "block" : "none";
if (!this.checked) {
otherInput.value = "";
}
}
});
});
}
function clearEvaluationColumns() {
const topsContainer = document.getElementById("topsEvaluationContainer");
const bottomsContainer = document.getElementById(
"bottomsEvaluationContainer"
);
const accessoriesContainer = document.getElementById(
"accessoriesEvaluationContainer"
);
if (topsContainer) {
opsContainer.innerHTML =
'<div class="item-evaluation-placeholder"><p style="text-align: center; color: #999; padding: 20px;">3-1でスタイルを選択してください</p></div>';
}
if (bottomsContainer) {
bottomsContainer.innerHTML =
'<div class="item-evaluation-placeholder"><p style="text-align: center; color: #999; padding: 20px;">3-1でスタイルを選択してください</p></div>';
}
if (accessoriesContainer) {
accessoriesContainer.innerHTML =
'<div class="item-evaluation-placeholder"><p style="text-align: center; color: #999; padding: 20px;">3-1でスタイルを選択してください</p></div>';
}
}
}
function toggleReasonSection(radioElement, itemId) {
const reasonSection = document.getElementById(`reasons_${itemId}`);
const goodReasons = document.getElementById(`good_reasons_${itemId}`);
const badReasons = document.getElementById(`bad_reasons_${itemId}`);
if (reasonSection) {
reasonSection.style.display = "block";
if (goodReasons && badReasons) {
if (radioElement.value === "good") {
goodReasons.style.display = "block";
badReasons.style.display = "none";
} else if (radioElement.value === "bad") {
goodReasons.style.display = "none";
badReasons.style.display = "block";
}
}
}
}
function updateWeeklyDates() {
const today = new Date();
const currentDay = today.getDay();
const monday = new Date(today);
const daysToMonday = currentDay === 0 ? -6 : 1 - currentDay;
monday.setDate(today.getDate() + daysToMonday);
const dayElements = [
"monday-date",
"tuesday-date",
"wednesday-date",
"thursday-date",
"friday-date",
"saturday-date",
"sunday-date",
];
dayElements.forEach((elementId, index) => {
const date = new Date(monday);
date.setDate(monday.getDate() + index);
const dateElement = document.getElementById(elementId);
if (dateElement) {
const month = date.getMonth() + 1;
const day = date.getDate();
dateElement.textContent = `${month}/${day}`;
}
});
}
function initializeWeekdayCardOptions() {
const weekdayCheckboxes = document.querySelectorAll(
'.weekday-card input[type="checkbox"]'
);
weekdayCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const card = this.closest(".weekday-card");
const subOptions = card.querySelector(".sub-options");
if (subOptions) {
if (this.checked) {
subOptions.style.display = "block";
} else {
subOptions.style.display = "none";
const subCheckboxes = subOptions.querySelectorAll(
'input[type="checkbox"]'
);
subCheckboxes.forEach((subCheck) => {
subCheck.checked = false;
});
const textInputs = subOptions.querySelectorAll('input[type="text"]');
extInputs.forEach((input) => {
input.value = "";
input.style.display = "none";
});
}
}
});
});
const otherCheckboxes = document.querySelectorAll(
'.chip-option input[value="other"]'
);
otherCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const chipGroup = this.closest(".chip-group");
const subOptions = this.closest(".sub-options");
const textInput = subOptions?.querySelector('input[type="text"]');
if (textInput) {
if (this.checked) {
extInput.style.display = "block";
} else {
extInput.value = "";
extInput.style.display = "none";
}
}
});
});
}
if (typeof imageMapping === "undefined") {
window.imageMapping = {
"lifestyle-office-external.webp": {
male: "lifestyle-office-external.webp",
female: "lifestyle-office-external-female.webp",
},
"lifestyle-office-internal.webp": {
male: "lifestyle-office-internal.webp",
female: "lifestyle-office-internal.webp",
},
"lifestyle-office-desk.webp": {
male: "lifestyle-office-desk.webp",
female: "lifestyle-office-desk-female.webp",
},
"lifestyle-remote.webp": {
male: "lifestyle-remote.webp",
female: "lifestyle-remote-female.webp",
},
"lifestyle-hybrid.webp": {
male: "lifestyle-hybrid.webp",
female: "lifestyle-hybrid-female.webp",
},
"lifestyle-home.webp": {
male: "lifestyle-home.webp",
female: "lifestyle-home-female.webp",
},
"weekend-family.webp": {
male: "weekend-family.webp",
female: "weekend-family-female.webp",
},
"weekend-friends.webp": {
male: "weekend-friends.webp",
female: "weekend-friends-female.webp",
},
"weekend-date.webp": {
male: "weekend-date.webp",
female: "weekend-date-female.webp",
},
"weekend-solo.webp": {
male: "weekend-solo.webp",
female: "weekend-solo-female.webp",
},
"weekend-sports.webp": {
male: "weekend-sports.webp",
female: "weekend-sports-female.webp",
},
"weekend-drive.webp": {
male: "weekend-drive.webp",
female: "weekend-drive-female.webp",
},
"weekend-outdoor.webp": {
male: "weekend-outdoor.webp",
female: "weekend-outdoor-female.webp",
},
"weekend-event.webp": {
male: "weekend-event.webp",
female: "weekend-event-female.webp",
},
"weekend-business-dining.webp": {
male: "weekend-business-dining.webp",
female: "weekend-business-dining-female.webp",
},
"weekend-executive.webp": {
male: "weekend-executive.webp",
female: "weekend-executive-female.webp",
},
"scene-internal-meeting.webp": {
male: "scene-internal-meeting.webp",
female: "scene-internal-meeting-female.webp",
},
"scene-external-meeting.webp": {
male: "scene-external-meeting.webp",
female: "scene-external-meeting-female.webp",
},
"scene-seminar.webp": {
male: "scene-seminar.webp",
female: "scene-seminar-female.webp",
},
"scene-business-dining.webp": {
male: "scene-business-dining.webp",
female: "scene-business-dining.webp",
},
"scene-site-visit.webp": {
male: "scene-site-visit.webp",
female: "scene-site-visit.webp",
},
"scene-casual-dining.webp": {
male: "scene-casual-dining.webp",
female: "scene-casual-dining.webp",
},
"scene-party.webp": {
male: "scene-party.webp",
female: "scene-party.webp",
},
"scene-shopping.webp": {
male: "scene-shopping.webp",
female: "scene-shopping.webp",
},
"scene-fitness.webp": {
male: "scene-fitness.webp",
female: "scene-fitness.webp",
},
"scene-golf.webp": {
male: "scene-golf.webp",
female: "scene-golf.webp",
},
"scene-travel.webp": {
male: "scene-travel.webp",
female: "scene-travel.webp",
},
"scene-culture.webp": {
male: "scene-culture.webp",
female: "scene-culture-female.webp",
},
"style-mode.webp": {
male: "style-male-mode-1.webp",
female: "style-mode-female.webp",
},
"style-classic.webp": {
male: "style-classic.webp",
female: "style-classic-female.webp",
},
"style-minimal.webp": {
male: "style-minimal.webp",
female: "style-minimal-female.webp",
},
"style-elegant.webp": {
male: "style-elegant.webp",
female: "style-elegant-female.webp",
},
"style-casual-chic.webp": {
male: "style-casual-chic.webp",
female: "style-casual-chic-female.webp",
},
"style-relax.webp": {
male: "style-relax.webp",
female: "style-relax-female.webp",
},
"style-american-casual.webp": {
male: "style-american-casual.webp",
female: "style-american-casual-female.webp",
},
"style-street.webp": {
male: "style-street.webp",
female: "style-street-female.webp",
},
"style-conservative.webp": {
male: "style-conservative.webp",
female: "style-conservative-female.webp",
},
"dress-code-suit-required.webp": {
male: "dress-code-suit-required.webp",
female: "dress-code-suit-required-female.webp",
},
"dress-code-business-casual.webp": {
male: "dress-code-business-casual.webp",
female: "dress-code-business-casual-female.webp",
},
"dress-code-smart-casual.webp": {
male: "dress-code-smart-casual.webp",
female: "dress-code-smart-casual-female.webp",
},
"dress-code-casual.webp": {
male: "dress-code-casual.webp",
female: "dress-code-casual-female.webp",
},
"dress-code-uniform.webp": {
male: "dress-code-uniform.webp",
female: "dress-code-uniform-female.webp",
},
"dress-code-no-restriction.webp": {
male: "dress-code-no-restriction.webp",
female: "dress-code-no-restriction-female.webp",
},
"item-shirt1.webp": {
male: "item-shirt1.webp",
female: "item-blouse1.webp",
},
"item-shirt2.webp": {
male: "item-shirt2.webp",
female: "item-blouse2.webp",
},
"item-jacket1.webp": {
male: "item-jacket1.webp",
female: "item-jacket1-female.webp",
},
"item-jacket2.webp": {
male: "item-jacket2.webp",
female: "item-jacket2-female.webp",
},
"item-pants1.webp": {
male: "item-pants1.webp",
female: "item-skirt1.webp",
},
"item-pants2.webp": {
male: "item-pants2.webp",
female: "item-skirt2.webp",
},
"item-shoes1.webp": {
male: "item-shoes1.webp",
female: "item-shoes1-female.webp",
},
"item-shoes2.webp": {
male: "item-shoes2.webp",
female: "item-shoes2-female.webp",
},
"item-bag1.webp": {
male: "item-bag1.webp",
female: "item-bag1-female.webp",
},
"item-bag2.webp": {
male: "item-bag2.webp",
female: "item-bag2-female.webp",
},
"avoid-tight.webp": {
male: "avoid-tight.webp",
female: "avoid-tight-female.webp",
},
"avoid-oversized.webp": {
male: "avoid-oversized.webp",
female: "avoid-oversized.webp",
},
"avoid-logo.webp": {
male: "avoid-logo.webp",
female: "avoid-logo-female.webp",
},
"avoid-bright-color.webp": {
male: "avoid-bright-color.webp",
female: "avoid-bright-color-female.webp",
},
"avoid-syntheticjlk.webp": {
male: "avoid-syntheticjlk.webp",
female: "avoid-synthetic-female.webp",
},
"avoid-bold-print.webp": {
male: "avoid-bold-print.webp",
female: "avoid-bold-print-female.webp",
},
"investment-outer.webp": {
male: "investment-outer.webp",
female: "investment-outer-female.webp",
},
"investment-bottoms.webp": {
male: "investment-bottoms.webp",
female: "investment-bottoms-female.webp",
},
"investment-shoes.webp": {
male: "investment-shoes.webp",
female: "investment-shoes-female.webp",
},
"investment-bag.webp": {
male: "investment-bag.webp",
female: "investment-bag-female.webp",
},
};
}
document.addEventListener("DOMContentLoaded", function () {
initializePhotoUpload();
populateBirthDate();
updateWeeklyDates();
setTimeout(() => {
}, 500);
initializeWeekdayCardOptions();
const form = document.querySelector("form");
const checkboxGroups = document.querySelectorAll(
'.checkbox-option input[type="checkbox"]'
);
const radioGroups = document.querySelectorAll(
'.radio-option input[type="radio"]'
);
checkboxGroups.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const label = this.closest(".checkbox-option");
if (this.checked) {
label.classList.add("selected");
} else {
label.classList.remove("selected");
}
});
});
radioGroups.forEach((radio) => {
radio.addEventListener("change", function () {
const name = this.name;
document.querySelectorAll(`input[name="${name}"]`).forEach((r) => {
r.closest(".radio-option")?.classList.remove("selected");
});
his.closest(".radio-option")?.classList.add("selected");
});
});
function smoothScrollTo(element) {
element.scrollIntoView({
behavior: "smooth",
block: "start",
});
}
function updateProgress() {
const sections = document.querySelectorAll(".form-section");
const totalSections = sections.length;
let completedSections = 0;
sections.forEach((section) => {
const requiredInputs = section.querySelectorAll(
"input[required], select[required], textarea[required]"
);
let sectionComplete = true;
requiredInputs.forEach((input) => {
if (input.type === "checkbox" || input.type === "radio") {
const name = input.name;
const checked = section.querySelector(
`input[name="${name}"]:checked`
);
if (!checked) sectionComplete = false;
} else {
if (!input.value.trim()) sectionComplete = false;
}
});
if (sectionComplete) completedSections++;
});
const progress = (completedSections / totalSections) * 100;
const progressBar = document.querySelector(".progress-fill");
if (progressBar) {
progressBar.style.width = `${progress}%`;
}
const progressStep = document.querySelector(".progress-step");
if (progressStep) {
progressStep.textContent = `Step ${
completedSections + 1
} of ${totalSections}`;
}
}
document.addEventListener("input", updateProgress);
document.addEventListener("change", updateProgress);
updateProgress();
const partnerYes = document.querySelector(
'input[name="partnerService"][value="yes"]'
);
const partnerNo = document.querySelector(
'input[name="partnerService"][value="no"]'
);
const partnerOptions = document.getElementById("partnerFittingOptions");
if (partnerYes && partnerNo && partnerOptions) {
partnerYes.addEventListener("change", function () {
if (this.checked) {
partnerOptions.style.display = "block";
}
});
partnerNo.addEventListener("change", function () {
if (this.checked) {
partnerOptions.style.display = "none";
}
});
}
const giftYes = document.querySelector(
'input[name="giftService"][value="yes"]'
);
const giftNo = document.querySelector(
'input[name="giftService"][value="no"]'
);
const giftOptions = document.getElementById("giftFrequencyOptions");
if (giftYes && giftNo && giftOptions) {
giftYes.addEventListener("change", function () {
if (this.checked) {
giftOptions.style.display = "block";
}
});
giftNo.addEventListener("change", function () {
if (this.checked) {
giftOptions.style.display = "none";
}
});
}
const otherCheckbox = document.querySelector(
'input[name="serviceExpectations"][value="other"]'
);
const otherInput = document.querySelector(
'input[name="serviceExpectationsOther"]'
);
if (otherCheckbox && otherInput) {
otherCheckbox.addEventListener("change", function () {
if (this.checked) {
otherInput.style.display = "block";
} else {
otherInput.style.display = "none";
}
});
}
if (form) {
form.addEventListener("submit", function (e) {
e.preventDefault();
const submitBtn = form.querySelector(".submit-btn");
if (submitBtn) {
submitBtn.innerHTML = "<span>送信中...</span>";
submitBtn.disabled = true;
}
setTimeout(() => {
alert("フォームが送信されました！ありがとうございます。");
if (submitBtn) {
submitBtn.innerHTML = "フォームを送信";
submitBtn.disabled = false;
}
}, 2000);
});
}
});
function formatPhoneNumber(input) {
let value = input.value.replace(/[^\d]/g, "");
if (value.length > 0) {
if (value.length <= 3) {
value = value;
} else if (value.length <= 7) {
value = value.slice(0, 3) + "-" + value.slice(3);
} else {
value =
value.slice(0, 3) + "-" + value.slice(3, 7) + "-" + value.slice(7, 11);
}
}
input.value = value;
}
function setupPhoneNumberFormatting() {
const phoneInput = document.getElementById("phoneNumber");
if (phoneInput) {
phoneInput.addEventListener("input", function () {
formatPhoneNumber(this);
});
}
}
function setupBasicKnowledgeToggle() {
const basicKnowledgeCheck = document.getElementById("basic-knowledge-check");
const basicKnowledgeDetails = document.getElementById(
"basic-knowledge-details"
);
if (basicKnowledgeCheck && basicKnowledgeDetails) {
basicKnowledgeCheck.addEventListener("change", function () {
if (this.checked) {
basicKnowledgeDetails.style.display = "block";
setTimeout(() => {
basicKnowledgeDetails.scrollIntoView({
behavior: "smooth",
block: "nearest",
});
}, 100);
} else {
basicKnowledgeDetails.style.display = "none";
}
});
}
}
document.addEventListener("DOMContentLoaded", function () {
setupPhoneNumberFormatting();
setupBasicKnowledgeToggle();
initializeStyleEvaluation();
setupOtherStyleCheckbox();
});
function initializeStyleEvaluation() {
const attractiveStyleCheckboxes = document.querySelectorAll(
'input[name="attractiveStyle"]'
);
const itemEvaluationContainer = document.getElementById(
"itemEvaluationContainer"
);
const styleVariationsSection = document.getElementById("styleVariations");
const variationGrid = document.getElementById("variationGrid");
attractiveStyleCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", updateItemEvaluation);
});
}
const styleVariations = {
mode: [
{ id: "mode-level1", name: "1", image: "images/style-male-mode-1.webp" },
{ id: "mode-level2", name: "2", image: "images/style-mode-level2.webp" },
{ id: "mode-level3", name: "3", image: "images/style-mode-level3.webp" },
{ id: "mode-level4", name: "4", image: "images/style-mode-level4.webp" },
{ id: "mode-level5", name: "5", image: "images/style-mode-level5.webp" },
],
classic: [
{ id: "classic-1", name: "1", image: "images/style-classic-1.webp" },
{ id: "classic-2", name: "2", image: "images/style-classic-2.webp" },
{ id: "classic-3", name: "3", image: "images/style-classic-3.webp" },
{ id: "classic-4", name: "4", image: "images/style-classic-4.webp" },
{ id: "classic-5", name: "5", image: "images/style-classic-5.webp" },
],
minimal: [
{ id: "minimal-1", name: "1", image: "images/style-minimal-1.webp" },
{ id: "minimal-2", name: "2", image: "images/style-minimal-2.webp" },
{ id: "minimal-3", name: "3", image: "images/style-minimal-3.webp" },
{ id: "minimal-4", name: "4", image: "images/style-minimal-4.webp" },
{ id: "minimal-5", name: "5", image: "images/style-minimal-5.webp" },
],
elegant: [
{ id: "elegant-1", name: "1", image: "images/style-elegant-1.webp" },
{ id: "elegant-2", name: "2", image: "images/style-elegant-2.webp" },
{ id: "elegant-3", name: "3", image: "images/style-elegant-3.webp" },
{ id: "elegant-4", name: "4", image: "images/style-elegant-4.webp" },
{ id: "elegant-5", name: "5", image: "images/style-elegant-5.webp" },
],
"casual-chic": [
{ id: "casual-chic-1", name: "1", image: "images/style-casual-chic-1.webp" },
{ id: "casual-chic-2", name: "2", image: "images/style-casual-chic-2.webp" },
{ id: "casual-chic-3", name: "3", image: "images/style-casual-chic-3.webp" },
{ id: "casual-chic-4", name: "4", image: "images/style-casual-chic-4.webp" },
{ id: "casual-chic-5", name: "5", image: "images/style-casual-chic-5.webp" },
],
relax: [
{ id: "relax-1", name: "1", image: "images/style-relax-1.webp" },
{ id: "relax-2", name: "2", image: "images/style-relax-2.webp" },
{ id: "relax-3", name: "3", image: "images/style-relax-3.webp" },
{ id: "relax-4", name: "4", image: "images/style-relax-4.webp" },
{ id: "relax-5", name: "5", image: "images/style-relax-5.webp" },
],
street: [
{ id: "street-1", name: "1", image: "images/style-street-1.webp" },
{ id: "street-2", name: "2", image: "images/style-street-2.webp" },
{ id: "street-3", name: "3", image: "images/style-street-3.webp" },
{ id: "street-4", name: "4", image: "images/style-street-4.webp" },
{ id: "street-5", name: "5", image: "images/style-street-5.webp" },
],
conservative: [
{
id: "conservative-1",
name: "1",
image: "images/style-conservative-1.webp",
},
{
id: "conservative-2",
name: "2",
image: "images/style-conservative-2.webp",
},
{
id: "conservative-3",
name: "3",
image: "images/style-conservative-3.webp",
},
{
id: "conservative-4",
name: "4",
image: "images/style-conservative-4.webp",
},
{
id: "conservative-5",
name: "5",
image: "images/style-conservative-5.webp",
},
],
"american-casual": [
{ id: "amecas-1", name: "1", image: "images/style-amecas-1.webp" },
{ id: "amecas-2", name: "2", image: "images/style-amecas-2.webp" },
{ id: "amecas-3", name: "3", image: "images/style-amecas-3.webp" },
{ id: "amecas-4", name: "4", image: "images/style-amecas-4.webp" },
{ id: "amecas-5", name: "5", image: "images/style-amecas-5.webp" },
],
};
function generatePatternReasons(style, index) {
const goodReasons = [
"シルエットが好み",
"色使いが良い",
"素材感が魅力的",
"デザインが好み",
"着回しやすそう",
];
const badReasons = [
"シルエットが合わない",
"色使いが好みでない",
"素材感が安っぽい",
"デザインが派手すぎる",
"着こなしが難しそう",
];
return `
<div class="good-reasons" id="good_reasons_pattern_${style}_${index}" style="display: none;">
<p class="reason-label">GOODの理由（複数選択可）</p>
${goodReasons
.map(
(reason, reasonIndex) => `
<label class="reason-checkbox">
<input type="checkbox" name="pattern_${style}_${index}_good_reason" value="${reason}">
<span>${reason}</span>
</label>
`
)
.join("")}
</div>
<div class="bad-reasons" id="bad_reasons_pattern_${style}_${index}" style="display: none;">
<p class="reason-label">BADの理由（複数選択可）</p>
${badReasons
.map(
(reason, reasonIndex) => `
<label class="reason-checkbox">
<input type="checkbox" name="pattern_${style}_${index}_bad_reason" value="${reason}">
<span>${reason}</span>
</label>
`
)
.join("")}
</div>
`;
}
function showPatternSelections_DISABLED(selectedStyles) {
return;
}
function showPatternSelections_ORIGINAL(selectedStyles) {
const patternSectionsContainer =
document.getElementById("patternSelections");
const patternSelectionsContainer = document.getElementById(
"patternSelectionsContainer"
);
if (!selectedStyles || selectedStyles.length === 0) {
patternSectionsContainer.style.display = "none";
return;
}
patternSelectionsContainer.innerHTML = "";
selectedStyles.forEach((style, styleIndex) => {
const variations = styleVariations[style] || [];
if (variations.length === 0) return;
const styleSection = document.createElement("div");
styleSection.className = "style-pattern-section";
styleSection.innerHTML = `
<h4 class="pattern-style-title">${getStyleDisplayName(
style
)} - 5つのパターンからお好みのものを選択してください</h4>
<div class="pattern-variations-grid">
${variations
.map(
(variation, index) => `
<div class="pattern-variation-card">
<img src="${variation.image}" alt="${
variation.name
}" onerror="this.src='images/placeholder.webp'" class="pattern-variation-image">
<div class="pattern-variation-name">${
variation.name
}</div>
<div class="good-bad-selection">
<label class="good-bad-option good-option">
<input type="radio" name="pattern_${style}_${index}_eval" value="good" onchange="toggleReasonSection(this, 'pattern_${style}_${index}')">
<span>GOOD</span>
</label>
<label class="good-bad-option bad-option">
<input type="radio" name="pattern_${style}_${index}_eval" value="bad" onchange="toggleReasonSection(this, 'pattern_${style}_${index}')">
<span>BAD</span>
</label>
</div>
<div class="good-bad-reasons" id="reasons_pattern_${style}_${index}" style="display: none;">
${generatePatternReasons(style, index)}
</div>
</div>
`
)
.join("")}
</div>
`;
patternSelectionsContainer.appendChild(styleSection);
});
patternSectionsContainer.style.display = "block";
}
function generateItemOptions(type, patternId, items) {
return items
.map(
(item, index) => `
<div class="item-option">
<input type="checkbox" id="${patternId}-${type}-item-${index}" name="${patternId}-${type}-items" value="${item}">
<label for="${patternId}-${type}-item-${index}">
<img src="images/item-placeholder.webp" alt="${item}" width="50" height="50">
<span>${item}</span>
</label>
</div>
`
)
.join("");
}
function showStyleVariations(selectedStyle) {
if (!selectedStyle || selectedStyle === "other") {
styleVariationsSection.style.display = "none";
return;
}
const variations = styleVariations[selectedStyle] || [];
if (variations.length === 0) {
styleVariationsSection.style.display = "none";
return;
}
variationGrid.innerHTML = "";
variations.forEach((variation, index) => {
const variationCard = document.createElement("div");
variationCard.className = "variation-card";
variationCard.innerHTML = `
<input type="radio" name="styleVariation" value="${
variation.id
}" id="${variation.id}">
<label for="${variation.id}" class="variation-label">
<img src="${variation.image}" alt="${
variation.name
}" class="variation-image">
<span class="variation-number">${index + 1}</span>
<span class="variation-name">${variation.name}</span>
</label>
`;
variationGrid.appendChild(variationCard);
});
styleVariationsSection.style.display = "block";
const variationRadios = variationGrid.querySelectorAll(
'input[name="styleVariation"]'
);
variationRadios.forEach((radio) => {
radio.addEventListener("change", updateItemEvaluation);
});
}
function updateItemEvaluation() {
const selectedStyles = document.querySelectorAll(
'input[name="attractiveStyle"]:checked'
);
const topsContainer = document.getElementById("topsEvaluationContainer");
const bottomsContainer = document.getElementById(
"bottomsEvaluationContainer"
);
const accessoriesContainer = document.getElementById(
"accessoriesEvaluationContainer"
);
if (selectedStyles.length === 0) {
const placeholderHTML = `
<div class="item-evaluation-placeholder">
<p style="text-align: center; color: #999; padding: 20px;">
3-1でスタイルを選択してください
</p>
</div>
`;
opsContainer.innerHTML = placeholderHTML;
bottomsContainer.innerHTML = placeholderHTML;
accessoriesContainer.innerHTML = placeholderHTML;
return;
}
opsContainer.innerHTML = "";
bottomsContainer.innerHTML = "";
accessoriesContainer.innerHTML = "";
let allTops = [];
let allBottoms = [];
let allAccessories = [];
selectedStyles.forEach((styleCheckbox) => {
const style = styleCheckbox.value;
const items = styleItems[style] || {};
if (items.tops)
allTops = allTops.concat(
items.tops.map((item) => ({ ...item, style }))
);
if (items.bottoms)
allBottoms = allBottoms.concat(
items.bottoms.map((item) => ({ ...item, style }))
);
if (items.outerwear)
allAccessories = allAccessories.concat(
items.outerwear.map((item) => ({ ...item, style }))
);
if (items.shoes)
allAccessories = allAccessories.concat(
items.shoes.map((item) => ({ ...item, style }))
);
if (items.bags)
allAccessories = allAccessories.concat(
items.bags.map((item) => ({ ...item, style }))
);
});
createGoodBadSection(topsContainer, allTops, "tops");
createGoodBadSection(bottomsContainer, allBottoms, "bottoms");
createGoodBadSection(accessoriesContainer, allAccessories, "accessories");
}
function createGoodBadSection(container, items, category) {
if (items.length === 0) {
container.innerHTML = `
<div class="item-evaluation-placeholder">
<p style="text-align: center; color: #999; padding: 20px;">
このカテゴリーのアイテムはありません
</p>
</div>
`;
return;
}
const goodSection = document.createElement("div");
goodSection.className = "item-good-bad-section";
goodSection.innerHTML = `
<span class="good-bad-label">GOOD ✓</span>
<div class="good-items">
<div class="item-selection-grid" id="${category}-good-items"></div>
</div>
`;
const badSection = document.createElement("div");
badSection.className = "item-good-bad-section";
badSection.innerHTML = `
<span class="good-bad-label">BAD ✗</span>
<div class="bad-items">
<div class="item-selection-grid" id="${category}-bad-items"></div>
</div>
`;
container.appendChild(goodSection);
container.appendChild(badSection);
const goodGrid = document.getElementById(`${category}-good-items`);
const badGrid = document.getElementById(`${category}-bad-items`);
items.slice(0, 6).forEach((item, index) => {
const itemDiv = document.createElement("div");
itemDiv.className = "item-option";
itemDiv.innerHTML = `
<label>
<input type="checkbox" name="${category}-${
index < 3 ? "good" : "bad"
}-items" value="${item.id}">
<img src="${item.image}" alt="${item.name}">
<span>${item.name}</span>
</label>
`;
if (index < 3) {
goodGrid.appendChild(itemDiv);
} else {
badGrid.appendChild(itemDiv);
}
});
}
function getStyleDisplayName(style) {
const displayNames = {
mode: "モード",
classic: "クラシック",
minimal: "ミニマル",
elegant: "エレガント",
"casual-chic": "カジュアルシック",
relax: "リラックス",
"american-casual": "アメリカンカジュアル",
street: "ストリート",
conservative: "コンサバティブ",
};
return displayNames[style] || style;
}
function updateSelectedItemsEvaluation() {
const selectedItems = document.querySelectorAll(".item-checkbox:checked");
const evaluationSection = document.getElementById(
"selectedItemsEvaluation"
);
if (selectedItems.length === 0) {
if (evaluationSection) {
evaluationSection.remove();
}
return;
}
if (!evaluationSection) {
const newSection = document.createElement("div");
newSection.id = "selectedItemsEvaluation";
newSection.innerHTML = `
<div class="selected-items-section">
<div class="section-header-items">
<h3 class="style-section-title">アイテムの評価</h3>
<p class="style-section-subtitle">各アイテムについてGOOD/BADを選択し、理由をお選びください</p>
</div>
<div class="selected-items-evaluation-grid" id="selectedItemsGrid"></div>
</div>
`;
documen
.getElementById("itemEvaluationContainer")
.appendChild(newSection);
}
const selectedItemsGrid = document.getElementById("selectedItemsGrid");
selectedItemsGrid.innerHTML = "";
selectedItems.forEach((checkbox) => {
const itemId = checkbox.value;
const selectedStyle = document.querySelector(
'input[name="attractiveStyle"]:checked'
).value;
const items = styleItems[selectedStyle] || [];
const item = items.find((i) => i.id === itemId);
if (item) {
const evaluationDiv = document.createElement("div");
evaluationDiv.className = "item-evaluation-card";
evaluationDiv.innerHTML = `
<div class="item-eval-header">
<img src="${item.image}" alt="${item.name}" class="item-eval-image">
<h4 class="item-eval-name">${item.name}</h4>
</div>
<div class="item-eval-body">
<div class="good-bad-selection">
<label class="good-bad-option">
<input type="radio" name="${item.id}_evaluation" value="good">
<span class="good-label">GOOD</span>
</label>
<label class="good-bad-option">
<input type="radio" name="${item.id}_evaluation" value="bad">
<span class="bad-label">BAD</span>
</label>
</div>
<div class="reason-selection" id="${item.id}_reasons" style="display: none;">
<p class="reason-label">理由（複数選択可）:</p>
<div class="reason-checkboxes">
<label class="reason-checkbox">
<input type="checkbox" name="${item.id}_reason" value="design">
<span>デザイン</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${item.id}_reason" value="color">
<span>色味</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${item.id}_reason" value="silhouette">
<span>シルエット</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${item.id}_reason" value="material">
<span>素材感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${item.id}_reason" value="price">
<span>価格帯</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${item.id}_reason" value="brand">
<span>ブランドイメージ</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${item.id}_reason" value="other">
<span>その他</span>
</label>
</div>
<input type="text" name="${item.id}_reason_other"
placeholder="その他の理由（具体的に）"
class="form-input reason-other-input" style="display: none;">
</div>
</div>
`;
selectedItemsGrid.appendChild(evaluationDiv);
const evalRadios = evaluationDiv.querySelectorAll(
'input[name="' + item.id + '_evaluation"]'
);
const reasonSection = evaluationDiv.querySelector(
"#" + item.id + "_reasons"
);
evalRadios.forEach((radio) => {
radio.addEventListener("change", function () {
if (this.checked) {
reasonSection.style.display = "block";
}
});
});
const otherCheckbox = evaluationDiv.querySelector(
'input[value="other"]'
);
const otherInput = evaluationDiv.querySelector(".reason-other-input");
if (otherCheckbox && otherInput) {
otherCheckbox.addEventListener("change", function () {
otherInput.style.display = this.checked ? "block" : "none";
if (!this.checked) {
otherInput.value = "";
}
});
}
}
});
}
const attractiveStyleCheckboxes = document.querySelectorAll('input[name="attractiveStyle"]');
attractiveStyleCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const checkedStyles = document.querySelectorAll(
'input[name="attractiveStyle"]:checked'
);
if (checkedStyles.length > 3 && this.checked) {
his.checked = false;
alert("魅力を感じるスタイルは最大3つまで選択できます。");
return;
}
const selectedStyles = Array.from(checkedStyles)
.filter((cb) => cb.value !== "other")
.map((cb) => cb.value);
updateMultipleStyleEvaluations();
const otherInput = document.querySelector(
'input[name="attractiveStyleOther"]'
);
if (this.value === "other") {
otherInput.style.display = this.checked ? "block" : "none";
if (!this.checked) otherInput.value = "";
}
});
});
function updateMultipleStyleEvaluations() {
const itemEvaluationContainer = document.getElementById(
"itemEvaluationContainer"
);
if (!itemEvaluationContainer) {
return;
}
const selectedStyles = Array.from(attractiveStyleCheckboxes)
.filter((cb) => cb.checked && cb.value !== "other")
.map((cb) => cb.value);
if (selectedStyles.length === 0) {
itemEvaluationContainer.innerHTML = `
<div class="item-evaluation-placeholder">
<p style="text-align: center; color: #999; padding: 40px;">
魅力を感じるスタイルを選択すると、各スタイルごとにアイテム評価が表示されます。
</p>
</div>
`;
return;
}
itemEvaluationContainer.innerHTML = "";
selectedStyles.forEach((style, index) => {
const styleSection = document.createElement("div");
styleSection.className = "style-evaluation-section";
styleSection.id = `style-evaluation-${style}`;
const sectionTitle = document.createElement("h3");
sectionTitle.className = "style-evaluation-title";
sectionTitle.innerHTML = `${getStyleDisplayName(
style
)}スタイル - アイテム評価`;
styleSection.appendChild(sectionTitle);
const evaluationContent = document.createElement("div");
evaluationContent.className = "style-evaluation-content";
evaluationContent.id = `evaluation-content-${style}`;
styleSection.appendChild(evaluationContent);
itemEvaluationContainer.appendChild(styleSection);
createStyleItemEvaluation(style, evaluationContent);
});
}
function createStyleItemEvaluation(style, container) {
const styleCategories = styleItems[style] || {};
container.innerHTML = "";
const categories = [
{ key: "tops", name: "トップス" },
{ key: "bottoms", name: "ボトムス" },
{ key: "outerwear", name: "アウター" },
{ key: "shoes", name: "シューズ" },
{ key: "bags", name: "バッグ" },
];
categories.forEach((category) => {
const categoryItems = styleCategories[category.key] || [];
if (categoryItems.length === 0) return;
const categorySection = document.createElement("div");
categorySection.className = "category-evaluation-section";
categorySection.innerHTML = `
<h4 class="category-title">${category.name}</h4>
<div class="category-items-grid" id="${style}-${category.key}-grid"></div>
`;
container.appendChild(categorySection);
const itemsGrid = categorySection.querySelector(
`#${style}-${category.key}-grid`
);
categoryItems.forEach((item, index) => {
const itemDiv = document.createElement("div");
itemDiv.className = "item-evaluation-card-enhanced";
itemDiv.innerHTML = `
<img src="${item.image}" alt="${item.name}" class="item-eval-image">
<h4 class="item-eval-name">${item.name}</h4>
<div class="good-bad-selection">
<label class="good-bad-option">
<input type="radio" name="${style}_${item.id}_evaluation" value="good">
<span class="good-label">GOOD</span>
</label>
<label class="good-bad-option">
<input type="radio" name="${style}_${item.id}_evaluation" value="bad">
<span class="bad-label">BAD</span>
</label>
</div>
<div class="reason-selection" id="${style}_${item.id}_reasons" style="display: none;">
<p class="reason-label">理由（複数選択可）:</p>
<div class="reason-checkboxes">
<label class="reason-checkbox">
<input type="checkbox" name="${style}_${item.id}_reason" value="design">
<span>デザイン</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${style}_${item.id}_reason" value="color">
<span>色味</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${style}_${item.id}_reason" value="silhouette">
<span>シルエット</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${style}_${item.id}_reason" value="material">
<span>素材感</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${style}_${item.id}_reason" value="price">
<span>価格帯</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${style}_${item.id}_reason" value="brand">
<span>ブランドイメージ</span>
</label>
<label class="reason-checkbox">
<input type="checkbox" name="${style}_${item.id}_reason" value="other">
<span>その他</span>
</label>
</div>
<input type="text" name="${style}_${item.id}_reason_other"
placeholder="その他の理由（具体的に）"
class="form-input reason-other-input" style="display: none;">
</div>
`;
itemsGrid.appendChild(itemDiv);
const evalRadios = itemDiv.querySelectorAll(
`input[name="${style}_${item.id}_evaluation"]`
);
const reasonSection = itemDiv.querySelector(
`#${style}_${item.id}_reasons`
);
evalRadios.forEach((radio) => {
radio.addEventListener("change", function () {
if (this.checked) {
reasonSection.style.display = "block";
}
});
});
const otherCheckbox = itemDiv.querySelector(
`input[name="${style}_${item.id}_reason"][value="other"]`
);
const otherInput = itemDiv.querySelector(
`input[name="${style}_${item.id}_reason_other"]`
);
if (otherCheckbox && otherInput) {
otherCheckbox.addEventListener("change", function () {
otherInput.style.display = this.checked ? "block" : "none";
if (!this.checked) {
otherInput.value = "";
}
});
}
});
});
}
const variationToggle = document.getElementById("variationToggle");
const variationContent = document.getElementById("variationContent");
if (variationToggle && variationContent) {
variationToggle.addEventListener("click", function () {
his.classList.toggle("collapsed");
variationContent.classList.toggle("collapsed");
});
}
function setupOtherStyleCheckbox() {
const otherStyleCheckbox = document.querySelector(
'input[name="attractiveStyle"][value="other"]'
);
const otherStyleInput = document.querySelector(
'input[name="attractiveStyleOther"]'
);
if (otherStyleCheckbox && otherStyleInput) {
otherStyleCheckbox.addEventListener("change", function () {
if (this.checked) {
otherStyleInput.style.display = "block";
} else {
otherStyleInput.style.display = "none";
otherStyleInput.value = "";
}
});
}
}
function initializeWeeklyOverview() {
const weekDays = [
"monday",
"tuesday",
"wednesday",
"thursday",
"friday",
"saturday",
"sunday",
];
function updateWeeklyRatios() {
let workCount = 0;
let restCount = 0;
let noBoundaryCount = 0;
let totalSelected = 0;
weekDays.forEach((day) => {
const selectedOption = document.querySelector(
`input[name="${day}_schedule"]:checked`
);
if (selectedOption) {
otalSelected++;
switch (selectedOption.value) {
case "work":
workCount++;
break;
case "rest":
restCount++;
break;
case "no-boundary":
noBoundaryCount++;
break;
}
}
});
const workDays = workCount;
const restDays = restCount;
const noBoundaryDays = noBoundaryCount;
const workRatioElement = document.getElementById("workRatio");
const restRatioElement = document.getElementById("restRatio");
const noBoundaryRatioElement = document.getElementById("noBoundaryRatio");
if (workRatioElement) {
workRatioElement.textContent = `${workDays}日`;
if (document.body.classList.contains("female-form")) {
workRatioElement.classList.add("updated");
setTimeout(() => workRatioElement.classList.remove("updated"), 300);
}
}
if (restRatioElement) {
restRatioElement.textContent = `${restDays}日`;
if (document.body.classList.contains("female-form")) {
restRatioElement.classList.add("updated");
setTimeout(() => restRatioElement.classList.remove("updated"), 300);
}
}
if (noBoundaryRatioElement) {
noBoundaryRatioElement.textContent = `${noBoundaryDays}日`;
if (document.body.classList.contains("female-form")) {
noBoundaryRatioElement.classList.add("updated");
setTimeout(
() => noBoundaryRatioElement.classList.remove("updated"),
300
);
}
}
const workRatio =
otalSelected > 0 ? Math.round((workCount / 7) * 100) : 0;
const restRatio =
otalSelected > 0 ? Math.round((restCount / 7) * 100) : 0;
const noBoundaryRatio =
otalSelected > 0 ? Math.round((noBoundaryCount / 7) * 100) : 0;
updateRatioBars(workRatio, restRatio, noBoundaryRatio);
}
function updateRatioBars(work, rest, noBoundary) {
const ratioSummary = document.getElementById("weeklyRatioSummary");
if (!ratioSummary) return;
const workItem = ratioSummary.querySelector(".work-ratio");
const restItem = ratioSummary.querySelector(".rest-ratio");
const noBoundaryItem = ratioSummary.querySelector(".no-boundary-ratio");
[workItem, restItem, noBoundaryItem].forEach((item, index) => {
if (item && !item.querySelector(".ratio-bar")) {
const bar = document.createElement("div");
bar.className = "ratio-bar";
bar.innerHTML = '<div class="ratio-bar-fill"></div>';
item.appendChild(bar);
}
});
if (workItem) {
const fill = workItem.querySelector(".ratio-bar-fill");
if (fill) {
fill.style.width = `${work}%`;
fill.style.transition = "width 0.3s ease";
}
}
if (restItem) {
const fill = restItem.querySelector(".ratio-bar-fill");
if (fill) {
fill.style.width = `${rest}%`;
fill.style.transition = "width 0.3s ease";
}
}
if (noBoundaryItem) {
const fill = noBoundaryItem.querySelector(".ratio-bar-fill");
if (fill) {
fill.style.width = `${noBoundary}%`;
fill.style.transition = "width 0.3s ease";
}
}
}
weekDays.forEach((day) => {
const radios = document.querySelectorAll(`input[name="${day}_schedule"]`);
radios.forEach((radio) => {
radio.addEventListener("change", function () {
updateWeeklyRatios();
});
radio.addEventListener("click", function () {
if (this.checked) {
updateWeeklyRatios();
}
});
});
});
updateWeeklyRatios();
window.updateWeeklyRatios = updateWeeklyRatios;
document.addEventListener("change", function (e) {
if (e.target.name === "formGender") {
setTimeout(() => {
updateWeeklyRatios();
}, 100);
}
});
if (window.location.href.includes("debug=true")) {
}
window.updateWeeklyRatios = updateWeeklyRatios;
}
document.addEventListener("DOMContentLoaded", function () {
const budgetRangeSelectors = document.querySelectorAll(
".budget-range-selector"
);
budgetRangeSelectors.forEach((selector) => {
const options = selector.querySelectorAll(".budget-range-option");
const hiddenInput = selector.querySelector('input[type="hidden"]');
options.forEach((option) => {
option.addEventListener("click", function () {
options.forEach((opt) => opt.classList.remove("selected"));
his.classList.add("selected");
if (hiddenInput) {
hiddenInput.value = this.dataset.value;
}
});
});
});
const budgetSelector = document.querySelector(".season-budget-selector");
const budgetCards = budgetSelector
? budgetSelector.querySelectorAll(".budget-card")
: [];
const seasonBudgetInput = document.getElementById("seasonBudget");
const customBudgetSection = document.querySelector(".custom-budget-input");
const customBudgetInput = document.getElementById("customBudgetInput");
const customBudgetMonthly = document.getElementById("customBudgetMonthly");
budgetCards.forEach((card) => {
card.addEventListener("click", function () {
budgetCards.forEach((c) => c.classList.remove("active"));
his.classList.add("active");
const amount = this.dataset.amount;
if (amount === "custom") {
customBudgetSection.style.display = "block";
customBudgetInput.focus();
} else {
customBudgetSection.style.display = "none";
seasonBudgetInput.value = amount;
}
});
});
if (customBudgetInput) {
customBudgetInput.addEventListener("input", function () {
const value = parseInt(this.value) || 0;
if (value >= 100000) {
seasonBudgetInput.value = value;
const monthly = Math.round(value / 3);
customBudgetMonthly.textContent =
"月額: " + monthly.toLocaleString() + "円";
} else {
customBudgetMonthly.textContent = "";
}
});
}
initializeWeeklySchedule();
initializeWeeklyOverview();
setTimeout(() => {
if (window.updateWeeklyRatios) {
window.updateWeeklyRatios();
}
}, 100);
initializeBudgetSelection();
initializeCorporateToggle();
initializeWantedItems();
initializeTravelDestinations();
});
function initializeWeeklySchedule() {
const dailyCards = document.querySelectorAll(".daily-card");
const dailyDetailsSection = document.getElementById("dailyDetailsSection");
const dailyDetailsGrid = document.getElementById("dailyDetailsGrid");
const weeklySummary = document.getElementById("weeklySummary");
let weeklyData = {};
const dayNames = {
monday: "月曜日",
uesday: "火曜日",
wednesday: "水曜日",
hursday: "木曜日",
friday: "金曜日",
saturday: "土曜日",
sunday: "日曜日",
};
const sceneOptions = {
work: {
itle: "ビジネスシーン",
options: [
{
id: "internal-meeting",
name: "社内会議",
image: "images/scene-internal-meeting.webp",
},
{
id: "external-meeting",
name: "外部商談",
image: "images/scene-external-meeting.webp",
},
{
id: "business-dining",
name: "接待・会食",
image: "images/scene-business-dining.webp",
},
{
id: "presentation",
name: "プレゼンテーション",
image: "images/scene-presentation.webp",
},
],
},
rest: {
itle: "プライベートシーン",
options: [
{
id: "family-time",
name: "家族と過ごす",
image: "images/lifestyle-family.webp",
},
{ id: "dating", name: "デート", image: "images/lifestyle-date.webp" },
{
id: "friends",
name: "友人と会う",
image: "images/lifestyle-friends.webp",
},
{
id: "solo-time",
name: "一人の時間",
image: "images/lifestyle-solo.webp",
},
],
},
"no-boundary": {
itle: "カジュアルビジネスシーン",
options: [
{
id: "casual-meeting",
name: "カジュアル会議",
image: "images/scene-casual-meeting.webp",
},
{
id: "coworking",
name: "コワーキング",
image: "images/scene-coworking.webp",
},
{
id: "networking",
name: "ネットワーキング",
image: "images/scene-networking.webp",
},
{
id: "creative-work",
name: "クリエイティブワーク",
image: "images/scene-creative.webp",
},
],
},
};
dailyCards.forEach((card) => {
const dayOptions = card.querySelectorAll(
'.day-option-card input[type="radio"]'
);
const dayName = dayOptions[0]?.name;
dayOptions.forEach((option) => {
option.addEventListener("change", function () {
if (this.checked) {
weeklyData[dayName] = {
ype: this.value,
day: dayNames[dayName],
};
updateDayPreview(dayName, this.value);
updateWeeklySummary();
showDailyDetailsIfNeeded();
}
});
});
});
function updateDayPreview(dayName, type) {
const preview = document.getElementById(dayName + "Preview");
if (preview) {
const typeLabels = {
work: "ビジネススタイル予定",
rest: "リラックススタイル予定",
"no-boundary": "カジュアルビジネス予定",
};
preview.textContent = typeLabels[type] || "";
}
}
function updateWeeklySummary() {
const selectedDays = Object.keys(weeklyData);
if (selectedDays.length === 0) {
weeklySummary.querySelector(".summary-text").textContent =
"各曜日を選択すると、週間コーディネートのバランスが表示されます";
return;
}
const workDays = selectedDays.filter(
(day) => weeklyData[day].type === "work"
).length;
const restDays = selectedDays.filter(
(day) => weeklyData[day].type === "rest"
).length;
const noBoundaryDays = selectedDays.filter(
(day) => weeklyData[day].type === "no-boundary"
).length;
let summaryText = `選択済み: ${selectedDays.length}/7日 | `;
if (workDays > 0) summaryText += `ビジネス: ${workDays}日 `;
if (restDays > 0) summaryText += `プライベート: ${restDays}日 `;
if (noBoundaryDays > 0)
summaryText += `カジュアルビジネス: ${noBoundaryDays}日`;
weeklySummary.querySelector(".summary-text").textContent = summaryText;
}
function showDailyDetailsIfNeeded() {
const selectedDays = Object.keys(weeklyData);
if (selectedDays.length > 0) {
dailyDetailsSection.style.display = "block";
updateDailyDetailsGrid();
}
}
function updateDailyDetailsGrid() {
dailyDetailsGrid.innerHTML = "";
Object.entries(weeklyData).forEach(([dayName, data]) => {
const dayCard = document.createElement("div");
dayCard.className = "daily-detail-card";
const scenes = sceneOptions[data.type];
dayCard.innerHTML = `
<div class="daily-detail-header">
<h4 class="daily-detail-day">${data.day}</h4>
<p class="daily-detail-type">${scenes.title}</p>
</div>
<div class="daily-detail-content">
<div class="detail-section">
<h5 class="detail-section-title">主なシーン</h5>
<div class="detail-options-grid">
${scenes.options
.map(
(option) => `
<div class="detail-option-card">
<input type="checkbox" name="${dayName}Scenes" value="${option.id}" id="${dayName}-${option.id}">
<label for="${dayName}-${option.id}">
<img src="${option.image}" alt="${option.name}">
<span>${option.name}</span>
</label>
</div>
`
)
.join("")}
</div>
</div>
</div>
`;
dailyDetailsGrid.appendChild(dayCard);
});
}
}
function initializeStyleEvaluationUI() {
const scaleOptions = document.querySelectorAll(
'.scale-option input[type="radio"]'
);
scaleOptions.forEach((radio) => {
radio.addEventListener("change", function () {
const evaluation = this.closest(".style-evaluation-item");
const gradientFill = evaluation.querySelector(".gradient-fill");
const styleName = this.name.replace("Scale", "");
if (gradientFill) {
const value = parseInt(this.value);
const percentage = ((value - 1) / 4) * 100;
gradientFill.style.width = `${percentage}%`;
}
const value = parseInt(this.value);
if (value >= 4) {
showStyleItemSelection(styleName, value);
} else {
hideStyleItemSelection(styleName);
}
});
});
scaleOptions.forEach((radio) => {
if (radio.checked) {
radio.dispatchEvent(new Event("change"));
}
});
}
function showStyleItemSelection(styleName, preferenceLevel) {
const evaluationItem = documen
.querySelector(`input[name="${styleName}Scale"]:checked`)
.closest(".style-evaluation-item");
let itemSelectionDiv = evaluationItem.querySelector(
".style-item-selection"
);
if (!itemSelectionDiv) {
itemSelectionDiv = document.createElement("div");
itemSelectionDiv.className = "style-item-selection";
evaluationItem
.querySelector(".evaluation-content")
.appendChild(itemSelectionDiv);
}
const items = getStyleItems(styleName);
itemSelectionDiv.innerHTML = `
<div class="item-selection-header">
<h5>このスタイルで気になるアイテムを選択してください（複数選択可）</h5>
<p class="item-selection-hint">好みの度合い: ${
preferenceLevel === 5 ? "とても好み" : "やや好み"
}</p>
</div>
<div class="style-items-selection-grid">
${items
.map(
(item) => `
<label class="style-item-option">
<input type="checkbox" name="${styleName}Items" value="${item.id}">
<div class="item-option-content">
<img src="${item.image}" alt="${item.name}">
<span>${item.name}</span>
</div>
</label>
`
)
.join("")}
</div>
`;
itemSelectionDiv.style.display = "block";
itemSelectionDiv.classList.add("fade-in");
}
function hideStyleItemSelection(styleName) {
const evaluationItem = documen
.querySelector(`input[name="${styleName}Scale"]`)
.closest(".style-evaluation-item");
const itemSelectionDiv = evaluationItem.querySelector(
".style-item-selection"
);
if (itemSelectionDiv) {
itemSelectionDiv.style.display = "none";
}
}
function getStyleItems(styleName) {
const styleItemsMap = {
mode: [
{
id: "mode-jacket",
name: "モードジャケット",
image: "images/item-jacket1.webp",
},
{
id: "mode-pants",
name: "デザイナーズパンツ",
image: "images/item-pants1.webp",
},
{
id: "mode-shoes",
name: "レザーブーツ",
image: "images/item-shoes1.webp",
},
{
id: "mode-bag",
name: "ジオメトリックバッグ",
image: "images/item-bag1.webp",
},
],
classic: [
{
id: "classic-jacket",
name: "テーラードジャケット",
image: "images/item-jacket2.webp",
},
{
id: "classic-pants",
name: "ウールトラウザーズ",
image: "images/item-pants2.webp",
},
{
id: "classic-shoes",
name: "レザーシューズ",
image: "images/item-shoes2.webp",
},
{
id: "classic-bag",
name: "ブリーフケース",
image: "images/item-bag2.webp",
},
],
natural: [
{
id: "natural-shirt",
name: "リネンシャツ",
image: "images/item-shirt1.webp",
},
{
id: "natural-pants",
name: "コットンパンツ",
image: "images/item-pants1.webp",
},
{
id: "natural-shoes",
name: "スリッポン",
image: "images/item-shoes1.webp",
},
{
id: "natural-bag",
name: "キャンバストート",
image: "images/item-bag1.webp",
},
],
};
return styleItemsMap[styleName] || [];
}
document.addEventListener("DOMContentLoaded", function () {
const employeeToggleBtns = document.querySelectorAll(
".employee-toggle-btn"
);
const detailOptions = document.querySelectorAll(".detail-options");
const selectedEmployeeSizeInput = document.getElementById(
"selectedEmployeeSize"
);
employeeToggleBtns.forEach((btn) => {
btn.addEventListener("click", function () {
employeeToggleBtns.forEach((b) => b.classList.remove("active"));
his.classList.add("active");
detailOptions.forEach((opt) => opt.classList.remove("active"));
const size = this.getAttribute("data-size");
const targetOptions = document.querySelector(`.${size}-options`);
if (targetOptions) {
argetOptions.classList.add("active");
const firstRadio = targetOptions.querySelector('input[type="radio"]');
if (firstRadio) {
firstRadio.checked = true;
selectedEmployeeSizeInput.value = firstRadio.value;
}
}
});
});
document.querySelectorAll('input[name="employees"]').forEach((radio) => {
radio.addEventListener("change", function () {
if (this.checked) {
selectedEmployeeSizeInput.value = this.value;
}
});
});
});
function setupConditionalSections() {
const partnerServiceRadios = document.querySelectorAll(
'input[name="partnerService"]'
);
const partnerFittingTime = document.getElementById("partnerFittingTime");
partnerServiceRadios.forEach((radio) => {
radio.addEventListener("change", function () {
if (partnerFittingTime) {
if (this.value === "yes") {
partnerFittingTime.style.display = "block";
} else {
partnerFittingTime.style.display = "none";
}
}
});
});
const presentServiceRadios = document.querySelectorAll(
'input[name="presentService"]'
);
const presentFrequency = document.getElementById("presentFrequency");
presentServiceRadios.forEach((radio) => {
radio.addEventListener("change", function () {
if (presentFrequency) {
if (this.value === "yes") {
presentFrequency.style.display = "block";
} else {
presentFrequency.style.display = "none";
}
}
});
});
const destinationHeaders = document.querySelectorAll(
'.destination-header input[type="checkbox"]'
);
destinationHeaders.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const details = this.closest(".destination-item").querySelector(
".destination-details"
);
if (this.checked) {
details.style.display = "block";
} else {
details.style.display = "none";
}
});
});
}
function initializeWeekdayLifestyleOptions() {
const weekdayCheckboxes = document.querySelectorAll(
'input[name="weekdayLifestyle"]'
);
weekdayCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const parentCard = this.closest(".weekday-lifestyle-card");
if (!parentCard) return;
const subOptions = parentCard.querySelector(".sub-options");
if (subOptions) {
subOptions.style.display = this.checked ? "block" : "none";
if (!this.checked) {
const textInput = subOptions.querySelector('input[type="text"]');
if (textInput) textInput.value = "";
const subCheckboxes = subOptions.querySelectorAll(
'input[type="checkbox"]'
);
subCheckboxes.forEach((cb) => (cb.checked = false));
}
}
});
});
const meetingPeopleGroups = [
{
checkboxName: "externalMeetingPeople",
inputName: "externalMeetingOther",
},
{
checkboxName: "internalMeetingPeople",
inputName: "internalMeetingOther",
},
{ checkboxName: "deskMeetingPeople", inputName: "deskMeetingOther" },
{ checkboxName: "hybridMeetingPeople", inputName: "hybridMeetingOther" },
{ checkboxName: "homeMeetingPeople", inputName: "homeMeetingOther" },
{
checkboxName: "otherMeetingPeople",
inputName: "otherMeetingOtherDetail",
},
];
meetingPeopleGroups.forEach((group) => {
const otherCheckbox = document.querySelector(
`input[name="${group.checkboxName}"][value="other"]`
);
const otherInput = document.querySelector(
`input[name="${group.inputName}"]`
);
if (otherCheckbox && otherInput) {
otherCheckbox.addEventListener("change", function () {
otherInput.style.display = this.checked ? "block" : "none";
if (!this.checked) {
otherInput.value = "";
}
});
}
});
}
function initializeBudgetSelection() {
const itemCheckboxes = document.querySelectorAll(".item-checkbox-main");
itemCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const itemType = this.value;
const budgetSelector = this.closest(
".clothing-item-enhanced"
).querySelector(".item-budget-selector");
if (this.checked) {
budgetSelector.style.display = "block";
setTimeout(() => {
budgetSelector.classList.add("show");
}, 10);
} else {
budgetSelector.classList.remove("show");
setTimeout(() => {
budgetSelector.style.display = "none";
}, 300);
const budgetCheckboxes = budgetSelector.querySelectorAll(
'input[type="checkbox"]'
);
budgetCheckboxes.forEach((cb) => (cb.checked = false));
updateBudgetCount(budgetSelector);
}
});
});
const budgetCheckboxes = document.querySelectorAll(
'.budget-option-card input[type="checkbox"]'
);
budgetCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const budgetSelector = this.closest(".item-budget-selector");
updateBudgetCount(budgetSelector);
});
});
function updateBudgetCount(budgetSelector) {
const checkedBoxes = budgetSelector.querySelectorAll(
'input[type="checkbox"]:checked'
);
const countDisplay = budgetSelector.querySelector(
".selected-budgets-count"
);
if (countDisplay) {
countDisplay.textContent = checkedBoxes.length;
countDisplay.style.display =
checkedBoxes.length > 0 ? "inline-block" : "none";
}
}
}
function initializeTravelDestinations() {
const travelCards = document.querySelectorAll(".travel-destination-card");
ravelCards.forEach((card) => {
const checkbox = card.querySelector('input[type="checkbox"]');
const specifications = card.querySelector(".clothing-specifications");
if (checkbox && specifications) {
checkbox.addEventListener("change", function () {
specifications.style.display = this.checked ? "block" : "none";
});
}
});
}
function initializePhotoUpload(photoType) {
const fileInput = document.getElementById(`${photoType}PhotoInput`);
const photoImg = document.getElementById(`${photoType}PhotoImg`);
const placeholder = document.getElementById(`${photoType}PhotoPlaceholder`);
const removeBtn = document.getElementById(`${photoType}PhotoRemove`);
if (!fileInput || !photoImg || !placeholder || !removeBtn) return;
fileInput.addEventListener("change", function (e) {
const file = e.target.files[0];
if (file && file.type.startsWith("image/")) {
const reader = new FileReader();
reader.onload = function (e) {
photoImg.src = e.target.result;
photoImg.style.display = "block";
placeholder.style.display = "none";
removeBtn.style.display = "inline-block";
};
reader.readAsDataURL(file);
}
});
removeBtn.addEventListener("click", function () {
photoImg.src = "";
photoImg.style.display = "none";
placeholder.style.display = "flex";
removeBtn.style.display = "none";
fileInput.value = "";
});
}
function initializeFacePhotoUpload() {
initializePhotoUpload('face');
initializePhotoUpload('body');
}
document.addEventListener("DOMContentLoaded", function () {
initializeWeekdayLifestyleOptions();
initializePostalCode();
initializeTravelDestinations();
initializeFacePhotoUpload();
});
function initializeCorporateToggle() {
const corporateCheckbox = document.getElementById("isCorporate");
const corporateContent = document.getElementById("corporateInfoContent");
if (corporateCheckbox && corporateContent) {
corporateCheckbox.addEventListener("change", function () {
if (this.checked) {
corporateContent.style.display = "block";
corporateConten
.querySelectorAll("input[required], select[required]")
.forEach((field) => {
field.setAttribute("data-required", "true");
});
} else {
corporateContent.style.display = "none";
corporateConten
.querySelectorAll('[data-required="true"]')
.forEach((field) => {
field.removeAttribute("required");
});
}
});
}
}
function initializeBirthDateSelector() {
const birthdateToggle = document.getElementById("birthdateToggle");
const birthdateDisplay = document.getElementById("birthdateDisplay");
const birthdateDropdown = document.getElementById("birthdateDropdown");
const yearScroll = document.getElementById("yearScroll");
const monthGrid = document.getElementById("monthGrid");
const dayGrid = document.getElementById("dayGrid");
const birthYearInput = document.getElementById("birthYear");
const birthMonthInput = document.getElementById("birthMonth");
const birthDayInput = document.getElementById("birthDay");
const ageDisplayInline = document.getElementById("ageDisplayInline");
const toggleIcon = document.querySelector(".toggle-icon");
if (!birthdateToggle || !birthdateDropdown) {
return;
}
let selectedYear = null;
let selectedMonth = null;
let selectedDay = null;
const currentYear = new Date().getFullYear();
for (let year = currentYear; year >= 1940; year--) {
const yearItem = document.createElement("div");
yearItem.className = "year-item";
yearItem.textContent = `${year}年`;
yearItem.dataset.year = year;
yearScroll.appendChild(yearItem);
}
const monthNames = [
"1月",
"2月",
"3月",
"4月",
"5月",
"6月",
"7月",
"8月",
"9月",
"10月",
"11月",
"12月",
];
monthNames.forEach((month, index) => {
const monthItem = document.createElement("div");
monthItem.className = "month-item";
monthItem.textContent = month;
monthItem.dataset.month = index + 1;
monthGrid.appendChild(monthItem);
});
function updateDays() {
dayGrid.innerHTML = "";
if (!selectedYear || !selectedMonth) return;
const daysInMonth = new Date(selectedYear, selectedMonth, 0).getDate();
for (let day = 1; day <= daysInMonth; day++) {
const dayItem = document.createElement("div");
dayItem.className = "day-item";
dayItem.textContent = day;
dayItem.dataset.day = day;
if (selectedDay === day) {
dayItem.classList.add("selected");
}
dayGrid.appendChild(dayItem);
}
}
function calculateAge() {
if (selectedYear && selectedMonth && selectedDay) {
const birthDate = new Date(
selectedYear,
selectedMonth - 1,
selectedDay
);
const today = new Date();
let age = today.getFullYear() - birthDate.getFullYear();
const monthDiff = today.getMonth() - birthDate.getMonth();
if (
monthDiff < 0 ||
(monthDiff === 0 && today.getDate() < birthDate.getDate())
) {
age--;
}
return age;
}
return null;
}
birthdateToggle.addEventListener("click", function (e) {
e.preventDefault();
e.stopPropagation();
const isOpen = birthdateDropdown.style.display === "block";
birthdateDropdown.style.display = isOpen ? "none" : "block";
if (toggleIcon) {
oggleIcon.textContent = isOpen ? "▼" : "▲";
oggleIcon.style.transform = isOpen ? "rotate(0deg)" : "rotate(180deg)";
}
birthdateToggle.classList.toggle("active", !isOpen);
if (!isOpen) {
updateDays();
}
});
yearScroll.addEventListener("click", function (e) {
if (e.target.classList.contains("year-item")) {
documen
.querySelectorAll(".year-item")
.forEach((item) => item.classList.remove("selected"));
e.target.classList.add("selected");
selectedYear = parseInt(e.target.dataset.year);
updateDays();
checkAndUpdateDate();
}
});
monthGrid.addEventListener("click", function (e) {
if (e.target.classList.contains("month-item")) {
documen
.querySelectorAll(".month-item")
.forEach((item) => item.classList.remove("selected"));
e.target.classList.add("selected");
selectedMonth = parseInt(e.target.dataset.month);
updateDays();
checkAndUpdateDate();
}
});
dayGrid.addEventListener("click", function (e) {
if (
e.target.classList.contains("day-item") &&
!e.target.classList.contains("disabled")
) {
documen
.querySelectorAll(".day-item")
.forEach((item) => item.classList.remove("selected"));
e.target.classList.add("selected");
selectedDay = parseInt(e.target.dataset.day);
checkAndUpdateDate();
}
});
function checkAndUpdateDate() {
if (selectedYear && selectedMonth && selectedDay) {
birthYearInput.value = selectedYear;
birthMonthInput.value = selectedMonth;
birthDayInput.value = selectedDay;
const dateStr = `${selectedYear}年${selectedMonth}月${selectedDay}日`;
birthdateDisplay.querySelector(".birthdate-placeholder").textContent =
dateStr;
birthdateDisplay.classList.add("has-value");
const age = calculateAge();
if (age !== null) {
ageDisplayInline.textContent = `(${age}歳)`;
ageDisplayInline.style.display = "inline";
}
}
}
document.addEventListener("click", function (e) {
if (
!birthdateToggle.contains(e.target) &&
!birthdateDropdown.contains(e.target) &&
birthdateDropdown.style.display === "block"
) {
birthdateDropdown.style.display = "none";
oggleIcon.textContent = "▼";
oggleIcon.style.transform = "rotate(0deg)";
birthdateToggle.classList.remove("active");
}
});
}
function initializeWantedItems() {
const wantedItemCards = document.querySelectorAll(".wanted-item-card");
wantedItemCards.forEach((card) => {
const checkbox = card.querySelector('input[type="checkbox"]');
const quantityInput = card.querySelector(".quantity-input");
const minusBtn = card.querySelector(".qty-minus");
const plusBtn = card.querySelector(".qty-plus");
checkbox.addEventListener("change", function () {
if (this.checked && quantityInput.value == 0) {
quantityInput.value = 1;
} else if (!this.checked) {
quantityInput.value = 0;
}
});
minusBtn.addEventListener("click", function () {
let value = parseInt(quantityInput.value) || 0;
if (value > 0) {
quantityInput.value = value - 1;
if (quantityInput.value == 0) {
checkbox.checked = false;
}
}
});
plusBtn.addEventListener("click", function () {
let value = parseInt(quantityInput.value) || 0;
if (value < 10) {
quantityInput.value = value + 1;
checkbox.checked = true;
}
});
quantityInput.addEventListener("change", function () {
let value = parseInt(this.value) || 0;
if (value < 0) value = 0;
if (value > 10) value = 10;
his.value = value;
checkbox.checked = value > 0;
});
});
}
function initializeTravelDestinations() {
const travelCheckboxes = document.querySelectorAll(
'.travel-option-group input[type="checkbox"]'
);
ravelCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", function () {
const optionGroup = this.closest(".travel-option-group");
const subOptions = optionGroup.querySelector(".sub-options");
if (subOptions) {
if (this.checked) {
subOptions.style.display = "block";
subOptions.style.opacity = "0";
setTimeout(() => {
subOptions.style.transition = "opacity 0.3s ease";
subOptions.style.opacity = "1";
}, 10);
} else {
subOptions.style.transition = "opacity 0.3s ease";
subOptions.style.opacity = "0";
setTimeout(() => {
subOptions.style.display = "none";
const subCheckboxes = subOptions.querySelectorAll(
'input[type="checkbox"]'
);
subCheckboxes.forEach((subCheckbox) => {
subCheckbox.checked = false;
});
}, 300);
}
}
});
});
}
function initializePostalCode() {
const postalCode1 = document.getElementById("postalCode1");
const postalCode2 = document.getElementById("postalCode2");
if (postalCode1 && postalCode2) {
postalCode1.addEventListener("input", function (e) {
if (this.value.length === 3) {
postalCode2.focus();
}
});
[postalCode1, postalCode2].forEach((input) => {
input.addEventListener("input", function (e) {
his.value = this.value.replace(/[^0-9]/g, "");
});
});
postalCode1.addEventListener("paste", function (e) {
e.preventDefault();
const pastedText = (e.clipboardData || window.clipboardData).getData(
"text"
);
const cleanedText = pastedText.replace(/[^0-9]/g, "");
if (cleanedText.length >= 7) {
postalCode1.value = cleanedText.substr(0, 3);
postalCode2.value = cleanedText.substr(3, 4);
} else if (cleanedText.length >= 3) {
postalCode1.value = cleanedText.substr(0, 3);
postalCode2.value = cleanedText.substr(3);
} else {
postalCode1.value = cleanedText;
}
});
}
}
function initializeFashionLiteracy() {
const literacyCheckboxes = document.querySelectorAll(
'input[name="fashionLiteracy"]'
);
const courseDetails = document.getElementById("fashionCourseDetails");
const otherTextInput = document.querySelector(
'input[name="fashionLiteracyOther"]'
);
if (!literacyCheckboxes.length || !courseDetails) return;
const topFiveValues = [
"vaguely-interested",
"conversational",
"personal-curiosity",
"basic-knowledge",
"brands",
];
function checkFashionLiteracySelection() {
let shouldShowCourse = false;
let shouldShowOther = false;
literacyCheckboxes.forEach((checkbox) => {
if (checkbox.checked) {
if (topFiveValues.includes(checkbox.value)) {
shouldShowCourse = true;
}
if (checkbox.value === "other") {
shouldShowOther = true;
}
}
});
courseDetails.style.display = shouldShowCourse ? "block" : "none";
if (otherTextInput) {
otherTextInput.style.display = shouldShowOther ? "block" : "none";
}
}
literacyCheckboxes.forEach((checkbox) => {
checkbox.addEventListener("change", checkFashionLiteracySelection);
});
checkFashionLiteracySelection();
}
function initializeCorporateToggle() {
const corporateToggle = document.getElementById("isCorporate");
const corporateContent = document.getElementById("corporateInfoContent");
if (corporateToggle && corporateContent) {
corporateToggle.addEventListener("change", function () {
if (this.checked) {
corporateContent.style.display = "block";
corporateContent.style.opacity = "0";
setTimeout(() => {
corporateContent.style.transition = "opacity 0.3s ease";
corporateContent.style.opacity = "1";
}, 10);
} else {
corporateContent.style.transition = "opacity 0.3s ease";
corporateContent.style.opacity = "0";
setTimeout(() => {
corporateContent.style.display = "none";
const corporateInputs = corporateContent.querySelectorAll(
'input[type="text"], input[type="radio"], input[type="checkbox"]'
);
corporateInputs.forEach((input) => {
if (input.type === "text") {
input.value = "";
} else {
input.checked = false;
}
});
}, 300);
}
});
}
}
function initializeFashionStanceToggle() {
const fashionStanceToggle = document.getElementById('hasFashionStance');
const fashionStanceContent = document.getElementById('fashionStanceContent');
if (fashionStanceToggle && fashionStanceContent) {
fashionStanceToggle.addEventListener('change', function() {
if (this.checked) {
fashionStanceContent.style.display = 'block';
fashionStanceContent.style.opacity = '0';
setTimeout(() => {
fashionStanceContent.style.transition = 'opacity 0.3s ease';
fashionStanceContent.style.opacity = '1';
}, 10);
} else {
fashionStanceContent.style.transition = 'opacity 0.3s ease';
fashionStanceContent.style.opacity = '0';
setTimeout(() => {
fashionStanceContent.style.display = 'none';
const stanceRadios = fashionStanceContent.querySelectorAll('input[type="radio"]');
stanceRadios.forEach(radio => {
radio.checked = false;
});
}, 300);
}
});
const stanceRadios = fashionStanceContent.querySelectorAll('input[type="radio"][required]');
stanceRadios.forEach(radio => {
radio.removeAttribute('required');
});
}
}
function displayWeekDates() {
const today = new Date();
const currentDay = today.getDay();
const monday = new Date(today);
const daysToMonday = currentDay === 0 ? -6 : 1 - currentDay;
monday.setDate(today.getDate() + daysToMonday);
const dayElements = [
{ id: 'monday-date', offset: 0 },
{ id: 'tuesday-date', offset: 1 },
{ id: 'wednesday-date', offset: 2 },
{ id: 'thursday-date', offset: 3 },
{ id: 'friday-date', offset: 4 },
{ id: 'saturday-date', offset: 5 },
{ id: 'sunday-date', offset: 6 }
];
dayElements.forEach(day => {
const dateElement = document.getElementById(day.id);
if (dateElement) {
const date = new Date(monday);
date.setDate(monday.getDate() + day.offset);
const month = date.getMonth() + 1;
const dayOfMonth = date.getDate();
dateElement.textContent = `${month}/${dayOfMonth}`;
}
});
}
document.addEventListener('DOMContentLoaded', function() {
displayWeekDates();
const genderRadio = document.querySelector('input[name="gender"]:checked');
if (genderRadio) {
document.body.setAttribute('data-gender', genderRadio.value);
} else {
document.body.setAttribute('data-gender', 'male');
}
});
document.addEventListener('DOMContentLoaded', function() {
if (window.brandSelectionInitialized) return;
window.brandSelectionInitialized = true;
const yearSelect = document.getElementById('birthYear');
if (yearSelect && yearSelect.options.length <= 1) {
const currentYear = new Date().getFullYear();
for (let year = currentYear; year >= 1940; year--) {
const option = document.createElement('option');
option.value = year;
option.textContent = year + '年';
yearSelect.appendChild(option);
}
}
const monthSelect = document.getElementById('birthMonth');
if (monthSelect && monthSelect.options.length <= 1) {
for (let month = 1; month <= 12; month++) {
const option = document.createElement('option');
option.value = month;
option.textContent = month + '月';
monthSelect.appendChild(option);
}
}
const daySelect = document.getElementById('birthDay');
if (daySelect && daySelect.options.length <= 1) {
for (let day = 1; day <= 31; day++) {
const option = document.createElement('option');
option.value = day;
option.textContent = day + '日';
daySelect.appendChild(option);
}
}
const postalCode1 = document.getElementById('postalCode1');
const postalCode2 = document.getElementById('postalCode2');
if (postalCode1 && postalCode2) {
function checkAndFetchAddress() {
const code1 = postalCode1.value;
const code2 = postalCode2.value;
if (code1.length === 3 && code2.length === 4) {
const fullCode = code1 + code2;
fetch(`https:
.then(response => response.json())
.then(data => {
if (data.status === 200 && data.results && data.results.length > 0) {
const result = data.results[0];
const prefectureSelect = document.getElementById('prefecture');
if (prefectureSelect && result.address1) {
for (let option of prefectureSelect.options) {
if (option.value === result.address1 || option.textContent === result.address1) {
prefectureSelect.value = option.value;
break;
}
}
}
const cityInput = document.getElementById('city');
if (cityInput && result.address2) {
cityInput.value = result.address2;
}
const addressInput = document.getElementById('streetAddress');
if (addressInput && result.address3) {
addressInput.value = result.address3;
}
}
})
.catch(error => {
});
}
}
postalCode1.addEventListener('input', function() {
if (this.value.length === 3) {
postalCode2.focus();
}
checkAndFetchAddress();
});
postalCode2.addEventListener('input', checkAndFetchAddress);
postalCode1.addEventListener('blur', checkAndFetchAddress);
postalCode2.addEventListener('blur', checkAndFetchAddress);
}
function updateWeeklyRatios() {
const weekDays = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
let workCount = 0;
let restCount = 0;
let noBoundaryCount = 0;
let totalSelected = 0;
weekDays.forEach(day => {
const selectedOption = document.querySelector(`input[name="${day}_schedule"]:checked`);
if (selectedOption) {
otalSelected++;
switch(selectedOption.value) {
case 'work':
workCount++;
break;
case 'rest':
restCount++;
break;
case 'no-boundary':
noBoundaryCount++;
break;
}
}
});
const workRatioElement = document.getElementById('workRatio');
const restRatioElement = document.getElementById('restRatio');
const noBoundaryRatioElement = document.getElementById('noBoundaryRatio');
if (workRatioElement) {
workRatioElement.textContent = `${workCount}日`;
}
if (restRatioElement) {
restRatioElement.textContent = `${restCount}日`;
}
if (noBoundaryRatioElement) {
noBoundaryRatioElement.textContent = `${noBoundaryCount}日`;
}
}
const weekScheduleInputs = document.querySelectorAll('input[type="radio"][name$="_schedule"]');
weekScheduleInputs.forEach(input => {
input.addEventListener('change', updateWeeklyRatios);
});
updateWeeklyRatios();
const section7 = document.getElementById('section7');
if (section7) {
const formGroups = section7.querySelectorAll('.form-group');
if (formGroups.length >= 5) {
const wrapper = document.createElement('div');
wrapper.className = 'service-horizontal-wrapper';
formGroups[0].parentNode.insertBefore(wrapper, formGroups[1]);
for (let i = 1; i <= 4; i++) {
if (formGroups[i]) {
wrapper.appendChild(formGroups[i]);
}
}
}
}
const brandButtons = document.querySelectorAll('.brand-select-btn');
brandButtons.forEach(button => {
const newButton = button.cloneNode(true);
button.parentNode.replaceChild(newButton, button);
newButton.addEventListener('click', function(e) {
e.preventDefault();
e.stopPropagation();
const brand = this.dataset.brand;
const preference = this.dataset.preference;
const brandItem = this.closest('.brand-selection-item');
if (!brandItem) return;
const hiddenInput = brandItem.querySelector('input[type="hidden"]');
const otherPreference = preference === 'like' ? 'dislike' : 'like';
const otherButton = brandItem.querySelector(`.brand-select-btn.${otherPreference}`);
if (this.classList.contains('selected')) {
his.classList.remove('selected');
if (hiddenInput) hiddenInput.value = '';
} else {
his.classList.add('selected');
if (otherButton) otherButton.classList.remove('selected');
if (hiddenInput) hiddenInput.value = preference;
}
});
});
const activityCheckboxes = document.querySelectorAll('.weekday-card input[type="checkbox"], .form-check input[type="checkbox"][name^="weekend_"]');
activityCheckboxes.forEach(checkbox => {
checkbox.addEventListener('change', function() {
let subOptions = this.closest('.weekday-card, .form-check').querySelector('.sub-options');
if (subOptions) {
subOptions.style.display = this.checked ? 'block' : 'none';
if (this.checked && (this.value === 'other' || this.value === 'holiday-other' || this.value === 'weekday-other')) {
const textInput = subOptions.querySelector('input[type="text"]');
if (textInput) {
setTimeout(() => textInput.focus(), 100);
}
}
}
});
let subOptions = checkbox.closest('.weekday-card, .form-check').querySelector('.sub-options');
if (subOptions) {
subOptions.style.display = checkbox.checked ? 'block' : 'none';
}
});
function ensureAttractiveStylesDisplay() {
const currentGender = document.querySelector('input[name="gender"]:checked');
const genderValue = currentGender ? currentGender.value : 'male';
if (typeof rebuildAttractiveStylesGrid === 'function') {
rebuildAttractiveStylesGrid(genderValue);
}
const checkInterval = setInterval(() => {
const styleCheckboxes = document.querySelectorAll('input[name="attractiveStyle"]');
if (styleCheckboxes.length > 0) {
clearInterval(checkInterval);
if (typeof initializeGenderIntegratedStylePatterns === 'function') {
initializeGenderIntegratedStylePatterns();
} else {
setTimeout(() => {
if (typeof initializeGenderIntegratedStylePatterns === 'function') {
initializeGenderIntegratedStylePatterns();
}
}, 2000);
}
}
}, 500);
}
ensureAttractiveStylesDisplay();
setTimeout(ensureAttractiveStylesDisplay, 500);
function hidePatternSummaryForAttractiveStyles() {
const summaryContainer = document.getElementById('patternSelectionSummary');
const attractiveStylesSection = document.querySelector('.attractive-styles-section');
if (summaryContainer && attractiveStylesSection) {
if (summaryContainer.closest('.attractive-styles-section')) {
summaryContainer.style.display = 'none';
}
}
}
setTimeout(hidePatternSummaryForAttractiveStyles, 1500);
setTimeout(function() {
const gender = document.querySelector('input[name="gender"]:checked')?.value || 'male';
if (window.rebuildAttractiveStylesGrid) {
window.rebuildAttractiveStylesGrid(gender);
}
}, 1000);
window.addEventListener('load', function() {
ensureAttractiveStylesDisplay();
});
const serviceCheckboxes = document.querySelectorAll('.service-expectations input[type="checkbox"]');
serviceCheckboxes.forEach(checkbox => {
checkbox.addEventListener('change', function() {
const optionsDiv = this.closest('.form-check').querySelector('.service-options');
if (optionsDiv) {
optionsDiv.style.display = this.checked ? 'block' : 'none';
}
});
});
const partnerServiceRadios = document.querySelectorAll('input[name="partnerService"]');
const partnerFittingOptions = document.getElementById('partnerFittingOptions');
partnerServiceRadios.forEach(radio => {
radio.addEventListener('change', function() {
if (partnerFittingOptions) {
partnerFittingOptions.style.display = this.value === 'yes' ? 'block' : 'none';
}
});
});
const timeSavingRadios = document.querySelectorAll('input[name="timeSavingValue"]');
const timeSavingOptions = document.getElementById('timeSavingOptions');
imeSavingRadios.forEach(radio => {
radio.addEventListener('change', function() {
if (timeSavingOptions) {
imeSavingOptions.style.display = this.value === 'very-valuable' ? 'block' : 'none';
}
});
});
const literacyCheckboxes = document.querySelectorAll('input[name="fashionLiteracy"]');
const conditionalLabels = document.querySelectorAll('.fashion-literacy-conditional');
function updateFashionLiteracyConditional() {
const showConditions = ['not-interested', 'vaguely-interested', 'conversational', 'personal-curiosity', 'basic-knowledge'];
const checkedValues = Array.from(literacyCheckboxes)
.filter(cb => cb.checked)
.map(cb => cb.value);
const shouldShow = checkedValues.some(value => showConditions.includes(value));
conditionalLabels.forEach(label => {
if (shouldShow) {
label.style.display = 'flex';
label.style.opacity = '1';
label.style.transform = 'translateY(0)';
} else {
label.style.display = 'none';
label.style.opacity = '0';
label.style.transform = 'translateY(-10px)';
}
});
}
literacyCheckboxes.forEach(checkbox => {
checkbox.addEventListener('change', updateFashionLiteracyConditional);
});
updateFashionLiteracyConditional();
const avoidOtherCheckbox = document.getElementById('avoid-other');
const avoidOtherText = document.getElementById('avoid-other-text');
if (avoidOtherCheckbox && avoidOtherText) {
avoidOtherCheckbox.addEventListener('change', function() {
avoidOtherText.style.display = this.checked ? 'block' : 'none';
if (!this.checked) {
avoidOtherText.value = '';
} else {
setTimeout(() => avoidOtherText.focus(), 100);
}
});
avoidOtherText.style.display = avoidOtherCheckbox.checked ? 'block' : 'none';
}
function addCoordinationImages() {
const coord7 = document.querySelector('input[name="seasonCoordinationCount"][value="7"]');
const coord14 = document.querySelector('input[name="seasonCoordinationCount"][value="14"]');
if (coord7) {
const card7 = coord7.closest('.coordination-card');
const content7 = card7.querySelector('.coordination-content');
if (content7 && !content7.querySelector('.coordination-image')) {
const img = document.createElement('img');
img.src = 'images/coordination-7.webp';
img.className = 'coordination-image';
img.alt = '7コーディネート';
content7.appendChild(img);
}
}
if (coord14) {
const card14 = coord14.closest('.coordination-card');
const content14 = card14.querySelector('.coordination-content');
if (content14 && !content14.querySelector('.coordination-image')) {
const img = document.createElement('img');
img.src = 'images/coordination-14.webp';
img.className = 'coordination-image';
img.alt = '14コーディネート';
content14.appendChild(img);
}
}
}
addCoordinationImages();
function setupOtherInputs() {
const allOtherCheckboxes = document.querySelectorAll('input[type="checkbox"][value="other"]');
allOtherCheckboxes.forEach(checkbox => {
checkbox.addEventListener('change', function() {
const parentLabel = this.closest('label');
if (!parentLabel) {
return;
}
let otherInput = parentLabel.nextElementSibling;
if (!otherInput || otherInput.tagName !== 'INPUT' || otherInput.type !== 'text') {
if (this.checked) {
otherInput = document.createElement('input');
otherInput.type = 'text';
otherInput.className = 'form-input other-input';
otherInput.placeholder = 'その他（具体的に）';
otherInput.name = this.name + '_other';
otherInput.style.marginTop = '10px';
otherInput.style.display = 'block';
parentLabel.insertAdjacentElement('afterend', otherInput);
}
} else {
otherInput.style.display = this.checked ? 'block' : 'none';
if (!this.checked) {
otherInput.value = '';
}
}
});
});
}
setupOtherInputs();
function hideAffordableBrands() {
const affordableSection = Array.from(document.querySelectorAll('.brand-category-header')).find(
header => header.textContent.includes('アフォーダブルブランド')
);
if (affordableSection) {
const brandGrid = affordableSection.nextElementSibling;
if (brandGrid) {
const brandsToHide = ['HM', 'GU', 'GAP'];
brandsToHide.forEach(brand => {
const brandItem = brandGrid.querySelector(`[data-brand="${brand}"]`);
if (brandItem) {
brandItem.style.display = 'none';
}
});
}
}
}
hideAffordableBrands();
function addTravelImages() {
const travelSection = document.getElementById('section9');
if (!travelSection) return;
const sectionHeader = travelSection.querySelector('.section-header');
if (!sectionHeader) return;
sectionHeader.style.cssText = 'display: flex; justify-content: space-between; align-items: center;';
const imageContainer = document.createElement('div');
imageContainer.className = 'travel-header-images';
imageContainer.style.cssText = 'display: flex; gap: 15px; align-items: center;';
const travelImages = [
{ src: 'images/travel1.webp', alt: '' },
{ src: 'images/travel2.webp', alt: '' },
{ src: 'images/travel3.webp', alt: '' }
];
ravelImages.forEach(imgData => {
const img = document.createElement('img');
img.src = imgData.src;
img.alt = imgData.alt;
img.style.cssText = 'height: 150px; width: auto; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15); transition: transform 0.3s ease;';
imageContainer.appendChild(img);
});
sectionHeader.appendChild(imageContainer);
}
addTravelImages();
function reorganizeServiceSection() {
const section7 = document.getElementById('section7');
if (!section7) return;
const formGroups = section7.querySelectorAll('.form-group');
if (formGroups.length >= 5) {
const serviceRow = document.createElement('div');
serviceRow.className = 'service-items-row';
for (let i = 0; i < 4; i++) {
serviceRow.appendChild(formGroups[i].cloneNode(true));
}
section7.insertBefore(serviceRow, formGroups[0]);
for (let i = 0; i < 4; i++) {
formGroups[i].remove();
}
}
}
reorganizeServiceSection();
const urgencyRadios = document.querySelectorAll('input[name="urgency"]');
const urgencyDateInput = document.getElementById('urgencyDateInput');
urgencyRadios.forEach(radio => {
radio.addEventListener('change', function() {
if (urgencyDateInput) {
urgencyDateInput.style.display = this.value === 'immediate' ? 'block' : 'none';
if (this.value !== 'immediate') {
const input = urgencyDateInput.querySelector('input');
if (input) input.value = '';
}
}
});
});
const hasWantedItemsRadios = document.querySelectorAll('input[name="hasWantedItems"]');
const wantedItemsDetail = document.getElementById('wantedItemsDetail');
hasWantedItemsRadios.forEach(radio => {
radio.addEventListener('change', function() {
if (wantedItemsDetail) {
wantedItemsDetail.style.display = this.value === 'yes' ? 'block' : 'none';
if (this.value !== 'yes') {
const checkboxes = wantedItemsDetail.querySelectorAll('input[type="checkbox"]');
checkboxes.forEach(cb => cb.checked = false);
const quantities = wantedItemsDetail.querySelectorAll('input[type="number"]');
quantities.forEach(q => q.value = '');
const textarea = wantedItemsDetail.querySelector('textarea');
if (textarea) textarea.value = '';
}
}
});
});
window.patternSelections = {
good: {},
bad: {}
};
const goodReasons = [
'シルエットが好み',
'色合いが好み',
'着回しが効きそう',
'体型に合いそう',
'TPOに合っている',
'上品な印象',
'年齢に適している',
'トレンド感がある'
];
const badReasons = [
'シルエットが合わない',
'色が好みではない',
'着こなしが難しそう',
'体型に合わない',
'TPOに合わない',
'カジュアルすぎる',
'フォーマルすぎる',
'年齢に合わない'
];
window.updatePatternSelectionSummary = function() {
const summaryContainer = document.getElementById('patternSelectionSummary');
const goodSummary = document.getElementById('goodPatternSummary');
const badSummary = document.getElementById('badPatternSummary');
const goodList = document.getElementById('goodPatternsList');
const badList = document.getElementById('badPatternsList');
goodList.innerHTML = '';
badList.innerHTML = '';
const hasGoodSelections = Object.keys(patternSelections.good).length > 0;
const hasBadSelections = Object.keys(patternSelections.bad).length > 0;
if (hasGoodSelections || hasBadSelections) {
summaryContainer.style.display = 'block';
} else {
summaryContainer.style.display = 'none';
return;
}
goodSummary.style.display = hasGoodSelections ? 'block' : 'none';
badSummary.style.display = hasBadSelections ? 'block' : 'none';
Object.entries(patternSelections.good).forEach(([patternId, pattern]) => {
const item = createPatternReasonItem(patternId, pattern, 'good', goodReasons);
goodList.appendChild(item);
});
Object.entries(patternSelections.bad).forEach(([patternId, pattern]) => {
const item = createPatternReasonItem(patternId, pattern, 'bad', badReasons);
badList.appendChild(item);
});
};
function createPatternReasonItem(patternId, pattern, type, reasons) {
const item = document.createElement('div');
item.className = 'pattern-reason-item';
item.innerHTML = `
<img src="${pattern.image}" alt="${pattern.name}" class="pattern-reason-image">
<div class="pattern-reason-content">
<div class="pattern-reason-name">${pattern.styleName} - ${pattern.name}</div>
<div class="pattern-reason-selection">
<div class="reason-checkbox-group">
${reasons.map((reason, index) => `
<label class="reason-checkbox">
<input type="checkbox" name="${type}_reason_${patternId}_${index}" value="${reason}">
<span>${reason}</span>
</label>
`).join('')}
</div>
</div>
</div>
`;
return item;
}
const originalHandleEvaluation = window.handleEvaluation;
window.handleEvaluation = function(uniqueId, evaluation, patternId) {
if (originalHandleEvaluation) {
originalHandleEvaluation(uniqueId, evaluation, patternId);
}
const patternElement = document.querySelector(`[data-pattern-id="${patternId}"]`);
if (!patternElement) return;
const patternImage = patternElement.querySelector('.pattern-full-image');
const patternName = patternElement.querySelector('.pattern-item-name');
const styleTitle = patternElement.closest('.toggle-pattern-section')?.querySelector('.pattern-section-title');
if (evaluation === 'good') {
patternSelections.good[uniqueId] = {
id: patternId,
name: patternName?.textContent || '',
image: patternImage?.src || '',
styleName: styleTitle?.textContent || ''
};
delete patternSelections.bad[uniqueId];
} else if (evaluation === 'bad') {
patternSelections.bad[uniqueId] = {
id: patternId,
name: patternName?.textContent || '',
image: patternImage?.src || '',
styleName: styleTitle?.textContent || ''
};
delete patternSelections.good[uniqueId];
}
updatePatternSelectionSummary();
};
function updateImagesForGender(gender) {
const genderImages = document.querySelectorAll('[data-gender-image]');
genderImages.forEach(img => {
const imageKey = img.getAttribute('data-gender-image');
const imagePath = getGenderImagePath(imageKey, gender);
if (imagePath) {
img.src = imagePath;
}
});
if (window.imageMapping && window.imageMapping.avoidItems) {
const avoidItemsData = window.imageMapping.avoidItems[gender] || window.imageMapping.avoidItems.male;
Object.entries(avoidItemsData).forEach(([key, data]) => {
const checkbox = document.querySelector(`input[name="avoidItems"][value="${key}"]`);
if (checkbox) {
const label = checkbox.closest('label');
const img = label?.querySelector('img');
if (img && data.image) {
img.src = data.image;
img.alt = data.name;
}
}
});
}
updateBrandImages(gender);
updateSectionImages(gender);
}
function getGenderImagePath(imageKey, gender) {
const genderImageMap = {
'shirt': {
male: 'images/shirt1.webp',
female: 'images/shirt1.webp'
},
'jacket': {
male: 'images/jacket1.webp',
female: 'images/jacket-female.webp'
},
'pants': {
male: 'images/pants.webp',
female: 'images/pants-female.webp'
},
'shoes': {
male: 'images/item-shoes1.webp',
female: 'images/item-shoes1.webp'
},
'coat': {
male: 'images/coat1.webp',
female: 'images/coat-female.webp'
},
'knit': {
male: 'images/item-knit.webp',
female: 'images/item-knit.webp'
},
'lifestyle-work': {
male: 'images/lifestyle-office-external.webp',
female: 'images/lifestyle-office-external-female.webp'
},
'lifestyle-weekend': {
male: 'images/lifestyle-solo.webp',
female: 'images/lifestyle-solo.webp'
},
'scene-business': {
male: 'images/scene-internal-meeting.webp',
female: 'images/scene-internal-meeting.webp'
},
'scene-casual': {
male: 'images/scene-casual-male.webp',
female: 'images/scene-casual-female.webp'
},
};
return genderImageMap[imageKey]?.[gender] || genderImageMap[imageKey]?.['male'];
}
function updateBrandImages(gender) {
const brandImages = {
male: {
'GUCCI': 'images/brand-gucci-male.webp',
'LOUIS VUITTON': 'images/brand-lv-male.webp',
},
female: {
'GUCCI': 'images/brand-gucci-female.webp',
'LOUIS VUITTON': 'images/brand-lv-female.webp',
}
};
const brandItems = document.querySelectorAll('.brand-selection-item');
brandItems.forEach(item => {
const brandName = item.getAttribute('data-brand');
const img = item.querySelector('.brand-image');
if (img && brandImages[gender]?.[brandName]) {
img.src = brandImages[gender][brandName];
}
});
}
function updateSectionImages(gender) {
const clothingImages = {
male: {
'shirt': 'images/shirt1.webp',
'jacket': 'images/item-jacket2.webp',
'pants': 'images/item-pants1.webp',
'shoes': 'images/item-shoes1.webp',
'coat': 'images/coat-male.webp',
'knit': 'images/item-knit.webp',
'tshirt': 'images/item-tshirt.webp',
'setup': 'images/setup-male.webp'
},
female: {
'shirt': 'images/shirt1.webp',
'jacket': 'images/jacket-female.webp',
'pants': 'images/pants-female.webp',
'shoes': 'images/item-shoes1.webp',
'coat': 'images/coat-female.webp',
'knit': 'images/item-knit.webp',
'onepiece': 'images/onepiece-female.webp',
'skirt': 'images/skirt-female.webp'
}
};
const clothingItems = document.querySelectorAll('.clothing-item-enhanced');
clothingItems.forEach(item => {
const checkbox = item.querySelector('input[name="clothingItems"]');
if (checkbox) {
const value = checkbox.value;
const img = item.querySelector('.item-image');
if (img && clothingImages[gender]?.[value]) {
img.src = clothingImages[gender][value];
}
}
});
}
const genderRadios = document.querySelectorAll('input[name="gender"]');
genderRadios.forEach(radio => {
radio.addEventListener('change', function() {
if (this.checked) {
updateImagesForGender(this.value);
}
});
});
const currentGender = document.querySelector('input[name="gender"]:checked');
if (currentGender) {
updateImagesForGender(currentGender.value);
}
});
document.addEventListener('DOMContentLoaded', function() {
const partnerServiceRadios = document.querySelectorAll('input[name="partnerService"]');
const partnerFittingOptions = document.getElementById('partnerFittingOptions');
partnerServiceRadios.forEach(radio => {
radio.addEventListener('change', function() {
if (partnerFittingOptions) {
if (this.value === 'yes') {
partnerFittingOptions.style.display = 'block';
} else {
partnerFittingOptions.style.display = 'none';
const innerRadios = partnerFittingOptions.querySelectorAll('input[type="radio"]');
innerRadios.forEach(r => r.checked = false);
}
}
});
});
const giftServiceRadios = document.querySelectorAll('input[name="giftService"]');
const giftFrequencyOptions = document.getElementById('giftFrequencyOptions');
giftServiceRadios.forEach(radio => {
radio.addEventListener('change', function() {
if (giftFrequencyOptions) {
if (this.value === 'yes') {
giftFrequencyOptions.style.display = 'block';
} else {
giftFrequencyOptions.style.display = 'none';
const innerRadios = giftFrequencyOptions.querySelectorAll('input[type="radio"]');
innerRadios.forEach(r => r.checked = false);
}
}
});
});
});
document.addEventListener('DOMContentLoaded', function() {
const quantityInputs = document.querySelectorAll('.quantity-input');
quantityInputs.forEach(input => {
input.disabled = false;
input.removeAttribute('readonly');
input.addEventListener('input', function(e) {
let value = parseInt(e.target.value);
if (isNaN(value) || value < 1) {
e.target.value = '';
} else if (value > 10) {
e.target.value = 10;
}
});
input.addEventListener('focus', function(e) {
e.target.style.borderColor = '#d4af37';
e.target.style.boxShadow = '0 0 0 3px rgba(212, 175, 55, 0.2)';
});
input.addEventListener('blur', function(e) {
e.target.style.borderColor = '';
e.target.style.boxShadow = '';
});
});
console.log(`Quantity inputs enabled: ${quantityInputs.length}`);
});
const LocalStorageHandler = {
FORM_DATA_KEY: 'styleFormData',
FORM_IMAGES_KEY: 'styleFormImages',
init: function() {
his.setupAutoSave();
his.restoreFormData();
his.setupButtons();
},
setupAutoSave: function() {
const form = document.getElementById('styleForm');
if (!form) return;
const inputs = form.querySelectorAll('input, textarea, select');
let saveTimeout;
inputs.forEach(input => {
if (input.type === 'text' || input.type === 'email' || input.type === 'tel' ||
input.type === 'number' || input.tagName === 'TEXTAREA') {
input.addEventListener('input', () => {
clearTimeout(saveTimeout);
saveTimeout = setTimeout(() => {
his.saveFormData();
}, 1000);
});
}
else if (input.type === 'checkbox' || input.type === 'radio' || input.tagName === 'SELECT') {
input.addEventListener('change', () => {
his.saveFormData();
});
}
});
const fileInputs = form.querySelectorAll('input[type="file"]');
fileInputs.forEach(input => {
input.addEventListener('change', (e) => {
his.saveImageFile(e.target);
});
});
},
saveFormData: function() {
const form = document.getElementById('styleForm');
if (!form) return;
const formData = {};
const inputs = form.querySelectorAll('input, textarea, select');
inputs.forEach(input => {
if (input.type === 'file') return;
if (input.type === 'checkbox') {
if (!formData[input.name]) {
formData[input.name] = [];
}
if (input.checked) {
formData[input.name].push(input.value);
}
} else if (input.type === 'radio') {
if (input.checked) {
formData[input.name] = input.value;
}
} else {
formData[input.name] = input.value;
}
});
formData.lastSaved = new Date().toISOString();
ry {
localStorage.setItem(this.FORM_DATA_KEY, JSON.stringify(formData));
console.log('Form data saved:', formData);
} catch (e) {
console.error('Failed to save form data:', e);
if (e.name === 'QuotaExceededError') {
alert('ローカルストレージの容量が不足しています。不要なデータを削除してください。');
}
}
},
saveImageFile: function(fileInput) {
if (!fileInput.files || !fileInput.files[0]) return;
const file = fileInput.files[0];
const reader = new FileReader();
reader.onload = (e) => {
ry {
const savedImages = JSON.parse(localStorage.getItem(this.FORM_IMAGES_KEY) || '{}');
savedImages[fileInput.name] = {
data: e.target.result,
name: file.name,
ype: file.type,
size: file.size,
lastModified: file.lastModified
};
localStorage.setItem(this.FORM_IMAGES_KEY, JSON.stringify(savedImages));
console.log(`Image saved: ${fileInput.name}`);
} catch (error) {
console.error('Failed to save image:', error);
if (error.name === 'QuotaExceededError') {
alert('画像サイズが大きすぎます。より小さい画像を使用してください。');
}
}
};
reader.readAsDataURL(file);
},
restoreFormData: function() {
ry {
const savedData = localStorage.getItem(this.FORM_DATA_KEY);
if (!savedData) return;
const formData = JSON.parse(savedData);
const form = document.getElementById('styleForm');
if (!form) return;
Object.keys(formData).forEach(name => {
if (name === 'lastSaved') return;
const value = formData[name];
if (Array.isArray(value)) {
value.forEach(val => {
const checkbox = form.querySelector(`input[name="${name}"][value="${val}"]`);
if (checkbox) checkbox.checked = true;
});
}
else {
const radios = form.querySelectorAll(`input[name="${name}"][type="radio"]`);
if (radios.length > 0) {
radios.forEach(radio => {
if (radio.value === value) {
radio.checked = true;
}
});
}
else {
const input = form.querySelector(`[name="${name}"]`);
if (input) {
input.value = value;
}
}
}
});
his.restoreImages();
if (formData.lastSaved) {
const lastSaved = new Date(formData.lastSaved);
console.log(`Form data restored from: ${lastSaved.toLocaleString('ja-JP')}`);
}
} catch (error) {
console.error('Failed to restore form data:', error);
}
},
restoreImages: function() {
ry {
const savedImages = localStorage.getItem(this.FORM_IMAGES_KEY);
if (!savedImages) return;
const images = JSON.parse(savedImages);
Object.keys(images).forEach(inputName => {
const imageData = images[inputName];
let previewElement;
if (inputName === 'facePhoto') {
previewElement = document.getElementById('facePhotoPreview');
} else if (inputName === 'bodyPhoto') {
previewElement = document.getElementById('bodyPhotoPreview');
}
if (previewElement && imageData.data) {
previewElement.innerHTML = `<img src="${imageData.data}" alt="${imageData.name}">`;
console.log(`Image restored: ${inputName}`);
}
});
} catch (error) {
console.error('Failed to restore images:', error);
}
},
showSaveNotification: function(message = '自動保存しました') {
let notification = document.getElementById('saveNotification');
if (!notification) {
notification = document.querySelector('.save-notification');
}
if (!notification) {
const notif = document.createElement('div');
notif.id = 'saveNotification';
notif.className = 'save-notification';
notif.innerHTML = `<span>✓ ${message}</span>`;
document.body.appendChild(notif);
notification = notif;
} else {
notification.querySelector('span').textContent = `✓ ${message}`;
}
setTimeout(() => {
const notif = document.getElementById('saveNotification');
if (notif) {
notif.classList.add('show');
setTimeout(() => {
notif.classList.remove('show');
}, 3000);
}
}, 100);
},
clearAllData: function() {
localStorage.removeItem(this.FORM_DATA_KEY);
localStorage.removeItem(this.FORM_IMAGES_KEY);
const form = document.getElementById('styleForm');
if (form) {
form.reset();
}
const previews = ['facePhotoPreview', 'bodyPhotoPreview'];
previews.forEach(id => {
const preview = document.getElementById(id);
if (preview) {
preview.innerHTML = '';
}
});
},
exportData: function() {
const exportData = {
formData: JSON.parse(localStorage.getItem(this.FORM_DATA_KEY) || '{}'),
images: JSON.parse(localStorage.getItem(this.FORM_IMAGES_KEY) || '{}'),
exportDate: new Date().toISOString()
};
const dataStr = JSON.stringify(exportData, null, 2);
const dataBlob = new Blob([dataStr], { type: 'application/json' });
const link = document.createElement('a');
link.href = URL.createObjectURL(dataBlob);
link.download = `form-data-${new Date().toISOString().split('T')[0]}.json`;
link.click();
},
importData: function(file) {
if (!file) return;
const reader = new FileReader();
reader.onload = (e) => {
ry {
const importedData = JSON.parse(e.target.result);
if (!importedData.formData || typeof importedData.formData !== 'object') {
hrow new Error('Invalid data format');
}
if (confirm('現在のデータを上書きしますか？')) {
localStorage.setItem(this.FORM_DATA_KEY, JSON.stringify(importedData.formData));
if (importedData.images) {
localStorage.setItem(this.FORM_IMAGES_KEY, JSON.stringify(importedData.images));
}
his.restoreFormData();
}
} catch (error) {
console.error('Import failed:', error);
alert('インポートに失敗しました。正しいファイルを選択してください。');
}
};
reader.readAsText(file);
}
};
document.addEventListener('DOMContentLoaded', () => {
LocalStorageHandler.init();
});
const FileDownloadHandler = {
init: function() {
his.setupDownloadButtons();
},
collectFormDataWithLabels: function() {
const form = document.getElementById('styleForm');
if (!form) return {};
const data = {
'基本情報': {},
'ライフスタイル': {},
'スタイル選好': {},
'サービス期待': {},
'その他': {}
};
data['基本情報']['お名前'] = form.querySelector('[name="name"]')?.value || '';
data['基本情報']['メールアドレス'] = form.querySelector('[name="email"]')?.value || '';
data['基本情報']['電話番号'] = form.querySelector('[name="phone"]')?.value || '';
data['基本情報']['性別'] = form.querySelector('[name="gender"]:checked')?.value === 'male' ? '男性' : '女性';
data['基本情報']['生年月日'] = `${form.querySelector('[name="birthYear"]')?.value || ''}年${form.querySelector('[name="birthMonth"]')?.value || ''}月${form.querySelector('[name="birthDay"]')?.value || ''}日`;
data['基本情報']['身長'] = form.querySelector('[name="height"]')?.value ? `${form.querySelector('[name="height"]').value}cm` : '';
data['基本情報']['体重'] = form.querySelector('[name="weight"]')?.value ? `${form.querySelector('[name="weight"]').value}kg` : '';
data['基本情報']['郵便番号'] = form.querySelector('[name="postalCode"]')?.value || '';
data['基本情報']['都道府県'] = form.querySelector('[name="prefecture"]')?.value || '';
data['基本情報']['市区町村'] = form.querySelector('[name="city"]')?.value || '';
data['基本情報']['番地'] = form.querySelector('[name="address"]')?.value || '';
data['基本情報']['建物名'] = form.querySelector('[name="building"]')?.value || '';
const businessScenes = Array.from(form.querySelectorAll('[name="businessScenes"]:checked'))
.map(cb => cb.nextElementSibling?.textContent || cb.value);
data['ライフスタイル']['ビジネスシーン'] = businessScenes.join('、');
const privateScenes = Array.from(form.querySelectorAll('[name="privateScenes"]:checked'))
.map(cb => cb.nextElementSibling?.textContent || cb.value);
data['ライフスタイル']['プライベートシーン'] = privateScenes.join('、');
data['その他']['登録日時'] = new Date().toLocaleString('ja-JP');
return data;
},
downloadAsTextFile: function() {
const data = this.collectFormDataWithLabels();
let textContent = 'スタイルフォーム入力内容\n';
extContent += '=' .repeat(50) + '\n\n';
for (const [category, items] of Object.entries(data)) {
extContent += `【${category}】\n`;
extContent += '-'.repeat(30) + '\n';
for (const [label, value] of Object.entries(items)) {
if (value) {
extContent += `${label}: ${value}\n`;
}
}
extContent += '\n';
}
const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
const link = document.createElement('a');
link.href = URL.createObjectURL(blob);
link.download = `style-form-${new Date().toISOString().split('T')[0]}.txt`;
link.click();
LocalStorageHandler.showSaveNotification('テキストファイルを保存しました');
},
downloadAsCSV: function() {
const form = document.getElementById('styleForm');
if (!form) return;
const headers = [];
const values = [];
const inputs = form.querySelectorAll('input:not([type="file"]), textarea, select');
inputs.forEach(input => {
let value = '';
let label = input.name || 'unknown';
if (input.type === 'checkbox' || input.type === 'radio') {
if (input.checked) {
const existingIndex = headers.indexOf(label);
if (existingIndex >= 0) {
values[existingIndex] = values[existingIndex] ?
values[existingIndex] + '；' + input.value : input.value;
} else {
headers.push(label);
values.push(input.value);
}
}
} else {
if (!headers.includes(label)) {
headers.push(label);
values.push(input.value || '');
}
}
});
let csv = '\uFEFF';
csv += headers.map(h => `"${h}"`).join(',') + '\n';
csv += values.map(v => `"${v.toString().replace(/"/g, '""')}"`).join(',') + '\n';
const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
const link = document.createElement('a');
link.href = URL.createObjectURL(blob);
link.download = `style-form-${new Date().toISOString().split('T')[0]}.csv`;
link.click();
LocalStorageHandler.showSaveNotification('CSVファイルを保存しました');
},
downloadImages: function() {
const savedImages = localStorage.getItem('styleFormImages');
if (!savedImages) {
alert('保存された画像がありません');
return;
}
const images = JSON.parse(savedImages);
let imageCount = 0;
Object.entries(images).forEach(([inputName, imageData]) => {
if (imageData.data) {
const base64Data = imageData.data.split(',')[1];
const byteCharacters = atob(base64Data);
const byteNumbers = new Array(byteCharacters.length);
for (let i = 0; i < byteCharacters.length; i++) {
byteNumbers[i] = byteCharacters.charCodeAt(i);
}
const byteArray = new Uint8Array(byteNumbers);
const blob = new Blob([byteArray], { type: imageData.type });
const link = document.createElement('a');
link.href = URL.createObjectURL(blob);
const extension = imageData.type.split('/')[1] || 'jpg';
link.download = `${inputName}-${new Date().toISOString().split('T')[0]}.${extension}`;
link.click();
imageCount++;
}
});
if (imageCount > 0) {
LocalStorageHandler.showSaveNotification(`${imageCount}個の画像を保存しました`);
}
},
createFullBackup: function() {
const data = this.collectFormDataWithLabels();
const savedImages = localStorage.getItem('styleFormImages');
const images = savedImages ? JSON.parse(savedImages) : {};
let htmlContent = `
<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<title>フォームバックアップ - ${new Date().toLocaleDateString('ja-JP')}</title>
<style>
body { font-family: 'Noto Sans JP', sans-serif; margin: 20px; background: #f5f5f5; }
.container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
h1 { color: #333; border-bottom: 3px solid #ddd; padding-bottom: 10px; }
.section { margin: 20px 0; }
.section h2 { color: #555; background: #f8f9fa; padding: 10px; border-radius: 4px; }
.field { margin: 10px 0; padding: 10px; background: #fafafa; border-left: 3px solid #007bff; }
.field-label { font-weight: bold; color: #666; }
.field-value { margin-left: 10px; color: #333; }
.images { margin-top: 30px; }
.image-container { margin: 20px 0; text-align: center; }
.image-container img { max-width: 500px; max-height: 500px; border: 1px solid #ddd; border-radius: 4px; }
</style>
</head>
<body>
<div class="container">
<h1>スタイルフォーム バックアップ</h1>
<p>保存日時: ${new Date().toLocaleString('ja-JP')}</p>
`;
for (const [category, items] of Object.entries(data)) {
htmlContent += `
<div class="section">
<h2>${category}</h2>`;
for (const [label, value] of Object.entries(items)) {
if (value) {
htmlContent += `
<div class="field">
<span class="field-label">${label}:</span>
<span class="field-value">${value}</span>
</div>`;
}
}
htmlContent += `
</div>`;
}
if (Object.keys(images).length > 0) {
htmlContent += `
<div class="images">
<h2>アップロード画像</h2>`;
Object.entries(images).forEach(([inputName, imageData]) => {
if (imageData.data) {
const label = inputName === 'facePhoto' ? '顔写真' : '全身写真';
htmlContent += `
<div class="image-container">
<h3>${label}</h3>
<img src="${imageData.data}" alt="${label}">
<p>ファイル名: ${imageData.name}</p>
</div>`;
}
});
htmlContent += `
</div>`;
}
htmlContent += `
</div>
</body>
</html>`;
const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
const link = document.createElement('a');
link.href = URL.createObjectURL(blob);
link.download = `form-backup-${new Date().toISOString().split('T')[0]}.html`;
link.click();
LocalStorageHandler.showSaveNotification('完全バックアップを作成しました');
}
};
document.addEventListener('DOMContentLoaded', () => {
FileDownloadHandler.init();
});
const GenderImageManager = {
imageMappings: {
lifestyleOffice: [
{
selector: 'img[src*="lifestyle-office-internal"]',
male: 'images/lifestyle-office-internal.webp',
female: 'images/lifestyle-office-internal-female.webp',
fallback: true
},
{
selector: 'img[src*="lifestyle-office-external"]',
male: 'images/lifestyle-office-external.webp',
female: 'images/lifestyle-office-external-female.webp'
},
{
selector: 'img[src*="lifestyle-office-desk"]',
male: 'images/lifestyle-office-desk.webp',
female: 'images/lifestyle-office-desk-female.webp'
},
{
selector: 'img[src*="lifestyle-hybrid"]',
male: 'images/lifestyle-hybrid.webp',
female: 'images/lifestyle-hybrid-female.webp'
},
{
selector: 'img[src*="lifestyle-remote"]',
male: 'images/lifestyle-remote.webp',
female: 'images/lifestyle-remote-female.webp'
},
{
selector: 'img[src*="lifestyle-home"]',
male: 'images/lifestyle-home.webp',
female: 'images/lifestyle-home-female.webp'
}
],
businessScenes: [
{
selector: 'img[src*="scene-internal-meeting"]',
male: 'images/scene-internal-meeting.webp',
female: 'images/scene-internal-meeting-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-external-meeting"]',
male: 'images/scene-external-meeting.webp',
female: 'images/scene-external-meeting-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-business-dining"]',
male: 'images/scene-business-dining.webp',
female: 'images/scene-business-dining-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-domestic-trip"]',
male: 'images/scene-domestic-trip.webp',
female: 'images/scene-domestic-trip-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-overseas-trip"]',
male: 'images/scene-overseas-trip.webp',
female: 'images/scene-overseas-trip-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-seminar"]',
male: 'images/scene-seminar.webp',
female: 'images/scene-seminar-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-exhibition"]',
male: 'images/scene-exhibition.webp',
female: 'images/scene-exhibition-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-site-visit"]',
male: 'images/scene-site-visit.webp',
female: 'images/scene-site-visit-female.webp',
fallback: true
}
],
privateScenes: [
{
selector: 'img[src*="scene-luxury-dining"]',
male: 'images/scene-luxury-dining.webp',
female: 'images/scene-luxury-dining-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-casual-dining"]',
male: 'images/scene-casual-dining.webp',
female: 'images/scene-casual-dining-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-shopping"]',
male: 'images/scene-shopping.webp',
female: 'images/scene-shopping-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-culture"]',
male: 'images/scene-culture.webp',
female: 'images/scene-culture-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-sports-watching"]',
male: 'images/scene-sports-watching.webp',
female: 'images/scene-sports-watching-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-golf"]',
male: 'images/scene-golf.webp',
female: 'images/scene-golf-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-fitness"]',
male: 'images/scene-fitness.webp',
female: 'images/scene-fitness-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-party"]',
male: 'images/scene-party.webp',
female: 'images/scene-party-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-ceremony"]',
male: 'images/scene-ceremony.webp',
female: 'images/scene-ceremony-female.webp',
fallback: true
},
{
selector: 'img[src*="scene-school-event"]',
male: 'images/scene-school-event.webp',
female: 'images/scene-school-event-female.webp',
fallback: true
}
],
dressCodes: [
{
selector: 'img[src*="dress-code-suit"]',
male: 'images/dress-code-suit.webp',
female: 'images/dress-code-suit-required-female.webp'
},
{
selector: 'img[src*="dress-code-business-casual"]',
male: 'images/dress-code-business-casual.webp',
female: 'images/dress-code-business-casual-female.webp'
},
{
selector: 'img[src*="dress-code-flexible"]',
male: 'images/dress-code-flexible.webp',
female: 'images/dress-code-flexible-female.webp',
fallback: true
},
{
selector: 'img[src*="dress-code-smart-casual"]',
male: 'images/dress-code-smart-casual.webp',
female: 'images/dress-code-smart-casual-female.webp',
fallback: true
},
{
selector: 'img[src*="dress-code-casual"]',
male: 'images/dress-code-casual.webp',
female: 'images/dress-code-casual-female.webp',
fallback: true
}
],
weekendActivities: [
{
selector: 'img[src*="weekend-business"]',
male: 'images/weekend-business.webp',
female: 'images/weekend-business-female.webp',
fallback: true
},
{
selector: 'img[src*="weekend-dining"]',
male: 'images/weekend-dining.webp',
female: 'images/weekend-dining-female.webp',
fallback: true
},
{
selector: 'img[src*="weekend-date"]',
male: 'images/weekend-date.webp',
female: 'images/weekend-date-female.webp',
fallback: true
},
{
selector: 'img[src*="weekend-family"]',
male: 'images/weekend-family.webp',
female: 'images/weekend-family-female.webp',
fallback: true
},
{
selector: 'img[src*="weekend-sports"]',
male: 'images/weekend-sports.webp',
female: 'images/weekend-sports-female.webp',
fallback: true
}
],
items: [
{
selector: 'img[src*="item-suit"]',
male: 'images/item-suit.webp',
female: 'images/item-suit-female.webp',
fallback: true
},
{
selector: 'img[src*="item-jacket"]',
male: 'images/item-jacket1.webp',
female: 'images/item-jacket-female.webp',
fallback: true
},
{
selector: 'img[src*="item-shirt"]',
male: 'images/item-shirt2.webp',
female: 'images/item-blouse.webp',
fallback: true
},
{
selector: 'img[src*="item-pants"]',
male: 'images/item-pants1.webp',
female: 'images/item-skirt.webp',
fallback: true
},
{
selector: 'img[src*="item-shoes"]',
male: 'images/item-shoes1.webp',
female: 'images/item-heels.webp',
fallback: true
},
{
selector: 'img[src*="item-bag"]',
male: 'images/item-bag1.webp',
female: 'images/item-bag-female.webp',
fallback: true
},
{
selector: 'img[src*="item-accessories"]',
male: 'images/item-accessories.webp',
female: 'images/item-accessories-female.webp',
fallback: true
}
],
clothingItems: [
{
selector: 'img[src*="item-tshirt"]',
male: 'images/item-tshirt.webp',
female: 'images/item-tshirt-female.webp',
fallback: true
},
{
selector: 'img[src*="shirt1"]',
male: 'images/shirt1.webp',
female: 'images/shirt1-female.webp',
fallback: true
},
{
selector: 'img[src*="item-knit"]',
male: 'images/item-knit.webp',
female: 'images/item-knit-female.webp',
fallback: true
},
{
selector: 'img[src*="item-jacket1"]',
male: 'images/item-jacket1.webp',
female: 'images/item-jacket1-female.webp',
fallback: true
},
{
selector: 'img[src*="item-jacket2"]',
male: 'images/item-jacket2.webp',
female: 'images/item-jacket2-female.webp',
fallback: true
},
{
selector: 'img[src*="item-pants1"]',
male: 'images/item-pants1.webp',
female: 'images/item-pants1-female.webp',
fallback: true
},
{
selector: 'img[src*="item-pants2"]',
male: 'images/item-pants2.webp',
female: 'images/item-pants2-female.webp',
fallback: true
},
{
selector: 'img[src*="item-shoes1"]',
male: 'images/item-shoes1.webp',
female: 'images/item-shoes1-female.webp',
fallback: true
},
{
selector: 'img[src*="item-shoes2"]',
male: 'images/item-shoes2.webp',
female: 'images/item-shoes2-female.webp',
fallback: true
},
{
selector: 'img[src*="item-underwear"]',
male: 'images/item-underwear.webp',
female: 'images/item-underwear.webp',
fallback: true
},
{
selector: 'img[src*="item-hat"]',
male: 'images/item-hat.webp',
female: 'images/item-hat.webp',
fallback: true
},
{
selector: 'img[src*="item-glasses"]',
male: 'images/item-glasses.webp',
female: 'images/item-glasses.webp',
fallback: true
},
{
selector: 'img[src*="item-watch"]',
male: 'images/item-watch.webp',
female: 'images/item-watch-female.webp',
fallback: true
}
],
avoidItems: [
{
selector: 'img[src*="avoid-logo"]',
male: 'images/avoid-logo.webp',
female: 'images/avoid-logo-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-bold-print"]',
male: 'images/avoid-bold-print.webp',
female: 'images/avoid-bold-print-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-animal-pattern"]',
male: 'images/avoid-animal-pattern.webp',
female: 'images/avoid-animal-pattern-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-oversized"]',
male: 'images/avoid-oversized.webp',
female: 'images/avoid-oversized-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-tight"]',
male: 'images/avoid-tight.webp',
female: 'images/avoid-tight-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-mini-length"]',
male: 'images/avoid-mini-length.webp',
female: 'images/avoid-mini-length-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-high-heels"]',
male: 'images/avoid-high-heels.webp',
female: 'images/avoid-high-heels-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-bright-color"]',
male: 'images/avoid-bright-color.webp',
female: 'images/avoid-bright-color-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-complex-pattern"]',
male: 'images/avoid-complex-pattern.webp',
female: 'images/avoid-complex-pattern-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-excessive-exposure"]',
male: 'images/avoid-excessive-exposure.webp',
female: 'images/avoid-excessive-exposure-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-flashy-decoration"]',
male: 'images/avoid-flashy-decoration.webp',
female: 'images/avoid-flashy-decoration-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-frills-lace"]',
male: 'images/avoid-frills-lace.webp',
female: 'images/avoid-frills-lace-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-rough-texture"]',
male: 'images/avoid-rough-texture.webp',
female: 'images/avoid-rough-texture-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-sporty-casual"]',
male: 'images/avoid-sporty-casual.webp',
female: 'images/avoid-sporty-casual.webp',
fallback: true
},
{
selector: 'img[src*="avoid-synthetic"]',
male: 'images/avoid-synthetic.webp',
female: 'images/avoid-synthetic-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-thin-material"]',
male: 'images/avoid-thin-material.webp',
female: 'images/avoid-thin-material-female.webp',
fallback: true
},
{
selector: 'img[src*="avoid-other"]',
male: 'images/avoid-other.webp',
female: 'images/avoid-other-female.webp',
fallback: true
}
],
stylePatterns: [
{
selector: 'img[src*="style-male"]',
male: 'self',
female: function(src) {
return src.replace('style-male', 'style-female');
},
dynamic: true
},
{
selector: 'img[src*="style-female"]',
male: function(src) {
return src.replace('style-female', 'style-male');
},
female: 'self',
dynamic: true
}
],
coordination: [
{
selector: '.coordination-image[data-coordination-type="7"]',
male: 'images/coordination-7.webp',
female: 'images/coordination-7-female.webp',
fallback: true
},
{
selector: '.coordination-image[data-coordination-type="14"]',
male: 'images/coordination-14.webp',
female: 'images/coordination-14-female.webp',
fallback: true
}
],
backgrounds: [
{
selector: '.background-style',
male: 'images/fashion-store-background.webp',
female: 'images/fashion-store-background-female.webp',
ype: 'background'
},
{
selector: '.hero-section',
male: 'images/hero-male.webp',
female: 'images/hero-female.webp',
ype: 'background',
fallback: true
}
],
placeholders: [
{
selector: 'img[src*="placeholder"]',
male: 'images/placeholder-male.webp',
female: 'images/placeholder.webp',
fallback: true
}
],
ravelImages: [
{
selector: 'img[src*="travel-domestic-city"]',
male: 'images/travel-domestic-city.webp',
female: 'images/travel-domestic-city-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-domestic-resort"]',
male: 'images/travel-domestic-resort.webp',
female: 'images/travel-domestic-resort-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-hot-springs"]',
male: 'images/travel-hot-springs.webp',
female: 'images/travel-hot-springs-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-outdoor"]',
male: 'images/travel-outdoor.webp',
female: 'images/travel-outdoor-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-overseas-asia"]',
male: 'images/travel-overseas-asia.webp',
female: 'images/travel-overseas-asia-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-overseas-western"]',
male: 'images/travel-overseas-western.webp',
female: 'images/travel-overseas-western-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-overseas-resort"]',
male: 'images/travel-overseas-resort.webp',
female: 'images/travel-overseas-resort-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-dest-france"]',
male: 'images/travel-dest-france.webp',
female: 'images/travel-dest-france-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-dest-italy"]',
male: 'images/travel-dest-italy.webp',
female: 'images/travel-dest-italy-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-dest-spain"]',
male: 'images/travel-dest-spain.webp',
female: 'images/travel-dest-spain-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-dest-germany"]',
male: 'images/travel-dest-germany.webp',
female: 'images/travel-dest-germany-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-dest-dubai"]',
male: 'images/travel-dest-dubai.webp',
female: 'images/travel-dest-dubai-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-dest-korea"]',
male: 'images/travel-dest-korea.webp',
female: 'images/travel-dest-korea-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-dest-thailand"]',
male: 'images/travel-dest-thailand.webp',
female: 'images/travel-dest-thailand-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-dest-malaysia"]',
male: 'images/travel-dest-malaysia.webp',
female: 'images/travel-dest-malaysia-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-dest-other-asia"]',
male: 'images/travel-dest-other-asia.webp',
female: 'images/travel-dest-other-asia-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-other"]',
male: 'images/travel-other.webp',
female: 'images/travel-other-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-overseas-hawaii"]',
male: 'images/travel-overseas-hawaii.webp',
female: 'images/travel-overseas-hawaii-female.webp',
fallback: true
},
{
selector: 'img[src*="travel-overseas-other"]',
male: 'images/travel-overseas-other.webp',
female: 'images/travel-overseas-other-female.webp',
fallback: true
}
],
serviceImages: [
{
selector: 'img[src*="service-app"]',
male: 'images/service-app.webp',
female: 'images/service-app-female.webp',
fallback: true
},
{
selector: 'img[src*="service-expectations"]',
male: 'images/service-expectations.webp',
female: 'images/service-expectations-female.webp',
fallback: true
},
{
selector: 'img[src*="service-gift"]',
male: 'images/service-gift.webp',
female: 'images/service-gift-female.webp',
fallback: true
},
{
selector: 'img[src*="service-partner"]',
male: 'images/service-partner.webp',
female: 'images/service-partner-female.webp',
fallback: true
},
{
selector: 'img[src*="service-transport"]',
male: 'images/service-transport.webp',
female: 'images/service-transport-female.webp',
fallback: true
}
],
otherImages: [
{
selector: 'img[src*="lifestyle-other"]',
male: 'images/lifestyle-other.webp',
female: 'images/lifestyle-other-female.webp',
fallback: true
},
{
selector: 'img[src="images/hat.webp"]',
male: 'images/hat.webp',
female: 'images/hat-female.webp',
fallback: true
}
]
},
init: function() {
console.log('[GenderImageManager] Initializing...');
his.setupGenderListener();
his.updateAllImages();
console.log('[GenderImageManager] Initialization complete');
},
setupGenderListener: function() {
const genderRadios = document.querySelectorAll('input[name="gender"]');
genderRadios.forEach(radio => {
radio.addEventListener('change', () => {
if (radio.checked) {
his.updateAllImages();
}
});
});
},
getCurrentGender: function() {
const femaleRadio = document.getElementById('gender-female');
return (femaleRadio && femaleRadio.checked) ? 'female' : 'male';
},
updateAllImages: function() {
const gender = this.getCurrentGender();
console.log(`[GenderImageManager] Updating all images for gender: ${gender}`);
Object.entries(this.imageMappings).forEach(([category, mappings]) => {
console.log(`[GenderImageManager] Updating category: ${category} with ${mappings.length} mappings`);
his.updateImageCategory(mappings, gender);
});
his.updateCustomImages(gender);
},
updateImageCategory: function(mappings, gender) {
mappings.forEach(config => {
const elements = document.querySelectorAll(config.selector);
elements.forEach(element => {
his.updateElement(element, config, gender);
});
});
},
updateElement: function(element, config, gender) {
let newSrc = config[gender];
if (config.dynamic) {
if (newSrc === 'self') {
return;
} else if (typeof newSrc === 'function') {
newSrc = newSrc(element.src || element.style.backgroundImage);
}
}
if (config.type === 'background') {
his.updateBackgroundImage(element, newSrc, config, gender);
} else {
his.updateImageSrc(element, newSrc, config, gender);
}
},
updateImageSrc: function(img, newSrc, config, gender) {
if (!newSrc || img.src === newSrc) return;
if (config.fallback) {
his.updateWithFallback(img, newSrc, config[gender === 'male' ? 'female' : 'male']);
} else {
his.applyImageUpdate(img, newSrc);
}
},
updateBackgroundImage: function(element, newSrc, config, gender) {
if (!newSrc) return;
const updateBg = (src) => {
element.style.transition = 'opacity 0.3s ease';
element.style.opacity = '0';
setTimeout(() => {
element.style.backgroundImage = `url(${src})`;
element.style.opacity = '1';
}, 300);
};
if (config.fallback) {
his.checkImageExists(newSrc).then(exists => {
updateBg(exists ? newSrc : config[gender === 'male' ? 'female' : 'male']);
});
} else {
updateBg(newSrc);
}
},
updateWithFallback: function(img, primarySrc, fallbackSrc) {
his.checkImageExists(primarySrc).then(exists => {
his.applyImageUpdate(img, exists ? primarySrc : fallbackSrc);
});
},
applyImageUpdate: function(img, src) {
img.style.transition = 'opacity 0.3s ease';
img.style.opacity = '0';
setTimeout(() => {
img.src = src;
img.onload = () => {
img.style.opacity = '1';
};
img.onerror = () => {
console.warn(`Failed to load image: ${src}`);
img.style.opacity = '1';
};
}, 300);
},
checkImageExists: function(url) {
return new Promise(resolve => {
const img = new Image();
img.onload = () => resolve(true);
img.onerror = () => resolve(false);
img.src = url;
});
},
updateCustomImages: function(gender) {
if (typeof updateCoordinationImages === 'function') {
updateCoordinationImages(gender);
}
if (typeof updatePatternDisplay === 'function') {
const patternContainer = document.querySelector('.pattern-selections-container');
const patternSelections = document.querySelector('.pattern-selections');
if (patternContainer && patternSelections) {
updatePatternDisplay(patternContainer, patternSelections);
}
}
},
addCustomMapping: function(category, config) {
if (!this.imageMappings[category]) {
his.imageMappings[category] = [];
}
his.imageMappings[category].push(config);
},
updateSpecificImage: function(selector, maleImage, femaleImage) {
const gender = this.getCurrentGender();
const elements = document.querySelectorAll(selector);
elements.forEach(img => {
const newSrc = gender === 'male' ? maleImage : femaleImage;
his.applyImageUpdate(img, newSrc);
});
}
};
if (window.updateFormContent && !window.originalUpdateFormContent) {
window.originalUpdateFormContent = window.updateFormContent;
}
window.updateFormContent = function(gender) {
if (window.originalUpdateFormContent) {
window.originalUpdateFormContent(gender);
}
GenderImageManager.updateAllImages();
};
window.GenderImageManager = GenderImageManager;
document.addEventListener('DOMContentLoaded', () => {
GenderImageManager.init();
});
const DressCodeGenderSwitch = {
init: function() {
his.setupGenderListener();
his.updateDressCodeDisplay();
his.setupOtherTextInput();
},
setupGenderListener: function() {
const genderRadios = document.querySelectorAll('input[name="gender"]');
genderRadios.forEach(radio => {
radio.addEventListener('change', () => {
if (radio.checked) {
his.updateDressCodeDisplay();
}
});
});
},
getCurrentGender: function() {
const femaleRadio = document.getElementById('gender-female');
return (femaleRadio && femaleRadio.checked) ? 'female' : 'male';
},
updateDressCodeDisplay: function() {
const gender = this.getCurrentGender();
const maleSection = document.getElementById('male-dress-regulations');
const femaleSection = document.getElementById('female-dress-regulations');
if (maleSection && femaleSection) {
if (gender === 'female') {
maleSection.style.display = 'none';
femaleSection.style.display = 'grid';
const maleCheckboxes = maleSection.querySelectorAll('input[type="checkbox"]');
maleCheckboxes.forEach(cb => cb.checked = false);
} else {
maleSection.style.display = 'grid';
femaleSection.style.display = 'none';
const femaleCheckboxes = femaleSection.querySelectorAll('input[type="checkbox"]');
femaleCheckboxes.forEach(cb => cb.checked = false);
const otherTextInput = document.getElementById('dress-regulation-other-female-text');
if (otherTextInput) {
otherTextInput.value = '';
}
}
}
},
setupOtherTextInput: function() {
const otherCheckbox = document.getElementById('regulation-other-female');
const otherTextInput = document.getElementById('dress-regulation-other-female-text');
if (otherCheckbox && otherTextInput) {
otherCheckbox.addEventListener('change', function() {
if (this.checked) {
otherTextInput.style.display = 'block';
otherTextInput.focus();
} else {
otherTextInput.style.display = 'none';
otherTextInput.value = '';
}
});
otherTextInput.addEventListener('input', function() {
if (this.value.trim()) {
otherCheckbox.checked = true;
}
});
}
},
getDressCodeData: function() {
const gender = this.getCurrentGender();
const data = {
gender: gender,
dressCodes: []
};
if (gender === 'female') {
const femaleCheckboxes = document.querySelectorAll('#female-dress-regulations input[type="checkbox"]:checked');
femaleCheckboxes.forEach(checkbox => {
const dressCode = {
value: checkbox.value,
label: checkbox.closest('label').querySelector('.regulation-title').textConten
};
if (checkbox.value === 'other-female') {
const otherText = document.getElementById('dress-regulation-other-female-text').value;
dressCode.otherText = otherText;
}
data.dressCodes.push(dressCode);
});
} else {
const maleCheckboxes = document.querySelectorAll('#male-dress-regulations input[type="checkbox"]:checked');
maleCheckboxes.forEach(checkbox => {
data.dressCodes.push({
value: checkbox.value,
label: checkbox.closest('label').querySelector('.regulation-title').textConten
});
});
}
return data;
}
};
document.addEventListener('DOMContentLoaded', () => {
DressCodeGenderSwitch.init();
});
window.DressCodeGenderSwitch = DressCodeGenderSwitch;
const WantedItemsInputHandler = {
init: function() {
his.setupQuantityInputs();
his.setupKeyboardShortcuts();
his.setupAutoFocus();
},
setupQuantityInputs: function() {
const quantityInputs = document.querySelectorAll('.wanted-items-grid .quantity-input');
console.log('Found quantity inputs:', quantityInputs.length);
quantityInputs.forEach((input, index) => {
console.log(`Setting up input ${index}:`, input);
input.disabled = false;
input.removeAttribute('readonly');
input.style.pointerEvents = 'auto';
input.style.cursor = 'text';
input.style.cssText += '; pointer-events: auto !important; cursor: text !important; opacity: 1 !important; user-select: text !important;';
input.tabIndex = 100 + index;
input.addEventListener('input', function(e) {
his.handleQuantityInput(e.target);
}.bind(this));
input.addEventListener('focus', function(e) {
e.target.select();
his.highlightItem(e.target);
}.bind(this));
input.addEventListener('blur', function(e) {
his.removeHighlight(e.target);
}.bind(this));
input.addEventListener('wheel', function(e) {
e.preventDefault();
his.handleWheel(e);
}.bind(this));
input.addEventListener('keydown', function(e) {
his.handleKeydown(e);
}.bind(this));
});
},
handleQuantityInput: function(input) {
let value = parseInt(input.value);
if (isNaN(value) || value < 0) {
input.value = '';
} else if (value > 10) {
input.value = 10;
his.showTooltip(input, '最大数量は10です');
}
his.updateRelatedCheckbox(input, value > 0);
},
handleWheel: function(e) {
const input = e.target;
const delta = e.deltaY < 0 ? 1 : -1;
const currentValue = parseInt(input.value) || 0;
const newValue = Math.max(0, Math.min(10, currentValue + delta));
input.value = newValue || '';
his.handleQuantityInput(input);
},
handleKeydown: function(e) {
const input = e.target;
switch(e.key) {
case 'ArrowUp':
e.preventDefault();
his.incrementValue(input, 1);
break;
case 'ArrowDown':
e.preventDefault();
his.incrementValue(input, -1);
break;
case 'Enter':
his.focusNextInput(input);
break;
}
},
incrementValue: function(input, delta) {
const currentValue = parseInt(input.value) || 0;
const newValue = Math.max(0, Math.min(10, currentValue + delta));
input.value = newValue || '';
his.handleQuantityInput(input);
},
focusNextInput: function(currentInput) {
const allInputs = Array.from(document.querySelectorAll('.wanted-items-grid .quantity-input'));
const currentIndex = allInputs.indexOf(currentInput);
if (currentIndex < allInputs.length - 1) {
allInputs[currentIndex + 1].focus();
}
},
highlightItem: function(input) {
const itemRequest = input.closest('.item-request');
if (itemRequest) {
itemRequest.classList.add('focused');
itemRequest.style.backgroundColor = 'rgba(212, 175, 55, 0.1)';
itemRequest.style.borderColor = 'var(--accent-gold)';
}
},
removeHighlight: function(input) {
const itemRequest = input.closest('.item-request');
if (itemRequest) {
itemRequest.classList.remove('focused');
itemRequest.style.backgroundColor = '';
itemRequest.style.borderColor = '';
}
},
showTooltip: function(input, message) {
const existingTooltip = input.parentElement.querySelector('.quantity-tooltip');
if (existingTooltip) {
existingTooltip.remove();
}
const tooltip = document.createElement('div');
ooltip.className = 'quantity-tooltip';
ooltip.textContent = message;
ooltip.style.cssText = `
position: absolute;
bottom: 100%;
left: 50%;
ransform: translateX(-50%);
background: #333;
color: white;
padding: 4px 8px;
border-radius: 4px;
font-size: 12px;
white-space: nowrap;
z-index: 1000;
pointer-events: none;
`;
input.parentElement.style.position = 'relative';
input.parentElement.appendChild(tooltip);
setTimeout(() => {
ooltip.remove();
}, 2000);
},
updateRelatedCheckbox: function(input, shouldCheck) {
const hasWantedItems = document.querySelector('[name="hasWantedItems"][value="yes"]');
if (hasWantedItems && shouldCheck) {
hasWantedItems.checked = true;
const wantedItemsDetail = document.getElementById('wantedItemsDetail');
if (wantedItemsDetail) {
wantedItemsDetail.style.display = 'block';
}
}
},
setupKeyboardShortcuts: function() {
document.addEventListener('keydown', (e) => {
if ((e.ctrlKey || e.metaKey) && e.key >= '1' && e.key <= '8') {
const index = parseInt(e.key) - 1;
const inputs = document.querySelectorAll('.wanted-items-grid .quantity-input');
if (inputs[index]) {
inputs[index].focus();
inputs[index].value = 1;
his.handleQuantityInput(inputs[index]);
}
}
});
},
setupAutoFocus: function() {
const hasWantedItemsRadios = document.querySelectorAll('[name="hasWantedItems"]');
hasWantedItemsRadios.forEach(radio => {
radio.addEventListener('change', (e) => {
if (e.target.value === 'yes' && e.target.checked) {
setTimeout(() => {
const firstInput = document.querySelector('.wanted-items-grid .quantity-input');
if (firstInput) {
firstInput.focus();
}
}, 300);
}
});
});
},
clearAll: function() {
const inputs = document.querySelectorAll('.wanted-items-grid .quantity-input');
inputs.forEach(input => {
input.value = '';
});
},
getQuantityData: function() {
const data = {};
const inputs = document.querySelectorAll('.wanted-items-grid .quantity-input');
inputs.forEach(input => {
if (input.value) {
data[input.name] = parseInt(input.value);
}
});
return data;
}
};
document.addEventListener('DOMContentLoaded', () => {
console.log('WantedItemsInputHandler: DOMContentLoaded');
WantedItemsInputHandler.init();
const observer = new MutationObserver((mutations) => {
mutations.forEach((mutation) => {
if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
const wantedItemsDetail = document.getElementById('wantedItemsDetail');
if (wantedItemsDetail && wantedItemsDetail.style.display !== 'none') {
console.log('wantedItemsDetail is now visible, reinitializing inputs');
WantedItemsInputHandler.setupQuantityInputs();
}
}
});
});
const wantedItemsDetail = document.getElementById('wantedItemsDetail');
if (wantedItemsDetail) {
observer.observe(wantedItemsDetail, { attributes: true });
}
});
window.WantedItemsInputHandler = WantedItemsInputHandler;
const FormDataExporter = {
collectFormData: function() {
const uploadedImages = window.ImageUploadHandler ?
window.ImageUploadHandler.getUploadedImages() : {};
const formData = {
imestamp: new Date().toISOString(),
gender: document.querySelector('input[name="gender"]:checked')?.value || '',
lastName: document.getElementById('lastName')?.value || '',
firstName: document.getElementById('firstName')?.value || '',
lastNameKana: document.getElementById('lastNameKana')?.value || '',
firstNameKana: document.getElementById('firstNameKana')?.value || '',
birthDate: document.getElementById('birthDate')?.value || '',
height: document.getElementById('height')?.value || '',
weight: document.getElementById('weight')?.value || '',
email: document.getElementById('email')?.value || '',
phoneNumber: document.getElementById('phoneNumber')?.value || '',
postalCode: document.getElementById('postalCode')?.value || '',
prefecture: document.getElementById('prefecture')?.value || '',
city: document.getElementById('city')?.value || '',
address: document.getElementById('address')?.value || '',
workStyle: this.getCheckboxValues('workStyle'),
businessScenes: this.getCheckboxValues('businessScene'),
privateScenes: this.getCheckboxValues('privateScene'),
weekendActivities: this.getCheckboxValues('weekendActivity'),
domesticTravel: this.getCheckboxValues('domesticTravel'),
overseasTravel: this.getCheckboxValues('overseasTravel'),
dressRegulation: this.getDressCodeData(),
attractiveStyles: this.getCheckboxValues('attractiveStyle'),
avoidItems: this.getCheckboxValues('avoidItems'),
brandPreferences: this.getBrandPreferences(),
fashionKnowledge: document.querySelector('input[name="fashionKnowledge"]:checked')?.value || '',
clothingItems: this.getClothingItemsWithBudget(),
wantedItems: this.getWantedItemsData(),
companyName: document.getElementById('companyName')?.value || '',
department: document.getElementById('department')?.value || '',
companySize: document.querySelector('input[name="companySize"]:checked')?.value || '',
annualRevenue: document.querySelector('input[name="annualRevenue"]:checked')?.value || '',
ageDemo: this.getCheckboxValues('ageDemo'),
appUsage: document.querySelector('input[name="appUsage"]:checked')?.value || '',
partnerService: document.querySelector('input[name="partnerService"]:checked')?.value || '',
fittingTime: document.querySelector('input[name="fittingTime"]:checked')?.value || '',
giftService: document.querySelector('input[name="giftService"]:checked')?.value || '',
giftFrequency: document.querySelector('input[name="giftFrequency"]:checked')?.value || '',
ransportService: document.querySelector('input[name="transportService"]:checked')?.value || '',
serviceExpectations: this.getCheckboxValues('serviceExpectations'),
fashionLiteracy: document.querySelector('input[name="fashionLiteracy"]:checked')?.value || '',
comments: document.getElementById('comments')?.value || '',
images: uploadedImages
};
return formData;
},
getCheckboxValues: function(name) {
const checkedBoxes = document.querySelectorAll(`input[name="${name}"]:checked`);
return Array.from(checkedBoxes).map(cb => cb.value).join(';');
},
getDressCodeData: function() {
if (typeof DressCodeGenderSwitch !== 'undefined') {
const data = DressCodeGenderSwitch.getDressCodeData();
return data.dressCodes.map(dc => {
if (dc.otherText) {
return `${dc.value}:${dc.otherText}`;
}
return dc.value;
}).join(';');
}
return this.getCheckboxValues('dressRegulation');
},
getBrandPreferences: function() {
const brandInputs = document.querySelectorAll('input[name^="brandPreference_"]');
const preferences = [];
brandInputs.forEach(input => {
if (input.value) {
const brandName = input.name.replace('brandPreference_', '');
preferences.push(`${brandName}:${input.value}`);
}
});
return preferences.join(';');
},
getClothingItemsWithBudget: function() {
const items = [];
const checkedItems = document.querySelectorAll('input[name="clothingItems"]:checked');
checkedItems.forEach(item => {
const itemValue = item.value;
const budgetName = `${itemValue}Budget`;
const budgets = this.getCheckboxValues(budgetName);
if (budgets) {
items.push(`${itemValue}:${budgets}`);
} else {
items.push(itemValue);
}
});
return items.join(';');
},
getWantedItemsData: function() {
const wantedItems = [];
const quantityInputs = document.querySelectorAll('.wanted-items-grid .quantity-input');
quantityInputs.forEach(input => {
if (input.value && parseInt(input.value) > 0) {
const itemName = input.name || input.closest('.item-request').querySelector('.item-name').textContent;
wantedItems.push(`${itemName}:${input.value}`);
}
});
return wantedItems.join(';');
},
generateCSVHeader: function() {
return [
'タイムスタンプ', '性別', '姓', '名', '姓（カナ）', '名（カナ）', '生年月日', '身長', '体重',
'メールアドレス', '電話番号', '郵便番号', '都道府県', '市区町村', '住所',
'働き方', 'ビジネスシーン', 'プライベートシーン', '週末の活動',
'国内旅行', '海外旅行', 'ドレスコード',
'魅力を感じるスタイル', '避けたいアイテム', 'ブランド好み',
'ファッション知識', '所持アイテム', '希望アイテム',
'会社名', '役職', '社員数', '年間売上', '社員年齢層',
'アプリ利用', 'パートナー制度', 'フィッティング時間', 'ギフトサービス', 'ギフト頻度',
'配送サービス', 'サービス期待', 'ファッションリテラシー', 'コメント'
].join(',');
},
formatDataAsCSVRow: function(data) {
const values = [
data.timestamp,
data.gender,
data.lastName,
data.firstName,
data.lastNameKana,
data.firstNameKana,
data.birthDate,
data.height,
data.weight,
data.email,
data.phoneNumber,
data.postalCode,
data.prefecture,
data.city,
data.address,
data.workStyle,
data.businessScenes,
data.privateScenes,
data.weekendActivities,
data.domesticTravel,
data.overseasTravel,
data.dressRegulation,
data.attractiveStyles,
data.avoidItems,
data.brandPreferences,
data.fashionKnowledge,
data.clothingItems,
data.wantedItems,
data.companyName,
data.department,
data.companySize,
data.annualRevenue,
data.ageDemo,
data.appUsage,
data.partnerService,
data.fittingTime,
data.giftService,
data.giftFrequency,
data.transportService,
data.serviceExpectations,
data.fashionLiteracy,
data.comments
];
return values.map(value => {
if (typeof value === 'string' && (value.includes(',') || value.includes('"') || value.includes('\n'))) {
return `"${value.replace(/"/g, '""')}"`;
}
return value;
}).join(',');
},
downloadCSV: function(filename = 'form_data.csv') {
const data = this.collectFormData();
const csvContent = this.generateCSVHeader() + '\n' + this.formatDataAsCSVRow(data);
const bom = '\uFEFF';
const blob = new Blob([bom + csvContent], { type: 'text/csv;charset=utf-8;' });
const link = document.createElement('a');
const url = URL.createObjectURL(blob);
link.setAttribute('href', url);
link.setAttribute('download', filename);
link.style.display = 'none';
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
URL.revokeObjectURL(url);
},
getDataAsJSON: function() {
return JSON.stringify(this.collectFormData(), null, 2);
}
};
window.FormDataExporter = FormDataExporter;
const FormAPIConnector = {
config: {
apiUrl: window.location.hostname === 'localhost'
? 'http:
: '/api/submit-form'
},
submitForm: async function() {
ry {
if (typeof FormDataExporter === 'undefined') {
hrow new Error('FormDataExporter が見つかりません');
}
his.showLoading();
const formData = FormDataExporter.collectFormData();
const response = await fetch(this.config.apiUrl, {
method: 'POST',
headers: {
'Content-Type': 'application/json',
},
body: JSON.stringify(formData)
});
const result = await response.json();
if (!response.ok) {
hrow new Error(result.message || 'サーバーエラーが発生しました');
}
his.handleSuccess(result);
return result;
} catch (error) {
console.error('Form submission error:', error);
his.showError(error.message);
hrow error;
} finally {
his.hideLoading();
}
},
handleSuccess: function(result) {
his.showSuccess(result.message || 'データが正常に送信されました');
if (result.id) {
const inquiryNumber = document.getElementById('inquiryNumber');
if (inquiryNumber) {
inquiryNumber.textContent = result.id;
}
}
const completionScreen = document.getElementById('completionScreen');
const formContainer = document.querySelector('.complete-form-container');
if (completionScreen && formContainer) {
formContainer.style.display = 'none';
completionScreen.style.display = 'flex';
window.scrollTo({ top: 0, behavior: 'smooth' });
}
if (typeof LocalStorageHandler !== 'undefined') {
LocalStorageHandler.clearAll();
}
},
showLoading: function() {
his.hideLoading();
const loading = document.createElement('div');
loading.id = 'api-loading';
loading.innerHTML = `
<div class="loading-overlay">
<div class="loading-content">
<div class="spinner"></div>
<p>送信中...</p>
</div>
</div>
`;
const style = document.createElement('style');
style.id = 'api-loading-style';
style.textContent = `
#api-loading {
position: fixed;
op: 0;
left: 0;
width: 100%;
height: 100%;
background: rgba(0, 0, 0, 0.8);
display: flex;
align-items: center;
justify-content: center;
z-index: 9999;
}
.loading-content {
ext-align: center;
color: white;
}
.spinner {
width: 60px;
height: 60px;
margin: 0 auto 20px;
border: 4px solid rgba(255, 255, 255, 0.3);
border-top-color: #D4AF37;
border-radius: 50%;
animation: spin 1s linear infinite;
}
@keyframes spin {
o { transform: rotate(360deg); }
}
.loading-content p {
font-size: 18px;
font-weight: 300;
letter-spacing: 0.1em;
}
`;
document.head.appendChild(style);
document.body.appendChild(loading);
},
hideLoading: function() {
const loading = document.getElementById('api-loading');
const style = document.getElementById('api-loading-style');
if (loading) loading.remove();
if (style) style.remove();
},
showSuccess: function(message) {
const notification = document.createElement('div');
notification.className = 'api-notification success';
notification.innerHTML = `
<div class="notification-content">
<span class="notification-icon">✓</span>
<span class="notification-message">${message}</span>
</div>
`;
if (!document.getElementById('api-notification-style')) {
const style = document.createElement('style');
style.id = 'api-notification-style';
style.textContent = `
.api-notification {
position: fixed;
op: 20px;
right: 20px;
padding: 16px 24px;
border-radius: 8px;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
z-index: 10000;
animation: slideIn 0.3s ease;
max-width: 400px;
}
.api-notification.success {
background: #10B981;
color: white;
}
.api-notification.error {
background: #EF4444;
color: white;
}
.notification-content {
display: flex;
align-items: center;
gap: 12px;
}
.notification-icon {
font-size: 20px;
font-weight: bold;
}
.notification-message {
font-size: 16px;
line-height: 1.4;
}
@keyframes slideIn {
from {
ransform: translateX(120%);
opacity: 0;
}
o {
ransform: translateX(0);
opacity: 1;
}
}
`;
document.head.appendChild(style);
}
document.body.appendChild(notification);
setTimeout(() => {
notification.style.animation = 'slideIn 0.3s ease reverse';
setTimeout(() => notification.remove(), 300);
}, 5000);
},
showError: function(message) {
const notification = document.createElement('div');
notification.className = 'api-notification error';
notification.innerHTML = `
<div class="notification-content">
<span class="notification-icon">✗</span>
<span class="notification-message">${message}</span>
</div>
`;
document.body.appendChild(notification);
setTimeout(() => {
notification.style.animation = 'slideIn 0.3s ease reverse';
setTimeout(() => notification.remove(), 300);
}, 8000);
},
downloadBackup: function() {
if (typeof FormDataExporter !== 'undefined') {
FormDataExporter.downloadCSV(`form_backup_${new Date().toISOString().split('T')[0]}.csv`);
}
}
};
document.addEventListener('DOMContentLoaded', () => {
const submitButton = document.querySelector('.submit-btn');
const form = document.querySelector('#personalStyleForm');
if (submitButton && form) {
const newSubmitButton = submitButton.cloneNode(true);
submitButton.parentNode.replaceChild(newSubmitButton, submitButton);
newSubmitButton.addEventListener('click', async (e) => {
e.preventDefault();
if (!form.checkValidity()) {
form.reportValidity();
return;
}
ry {
await FormAPIConnector.submitForm();
} catch (error) {
console.error('Submission failed:', error);
}
});
}
if (window.location.hostname === 'localhost') {
const backupBtn = document.createElement('button');
backupBtn.textContent = 'CSVバックアップ';
backupBtn.style.cssText = `
position: fixed;
bottom: 20px;
left: 20px;
padding: 10px 20px;
background: #6B7280;
color: white;
border: none;
border-radius: 5px;
cursor: pointer;
z-index: 1000;
`;
backupBtn.onclick = () => FormAPIConnector.downloadBackup();
document.body.appendChild(backupBtn);
}
});
window.FormAPIConnector = FormAPIConnector;
const ImageUploadHandler = {
config: {
maxFileSize: 10 * 1024 * 1024,
allowedTypes: ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],
imageQuality: 0.8,
maxWidth: 1200,
maxHeight: 1200
},
init: function() {
his.addUploadSection();
his.setupEventListeners();
his.addStyles();
},
addUploadSection: function() {
const section1 = document.getElementById('section1');
if (section1) {
const uploadSection = this.createUploadSection();
section1.appendChild(uploadSection);
}
},
setupEventListeners: function() {
his.setupUploadArea('face');
his.setupUploadArea('body');
his.setupUploadArea('other', true);
},
setupUploadArea: function(type, multiple = false) {
const area = document.getElementById(`${type}-upload-area`);
const input = document.getElementById(`${type}-photo-input`);
const placeholder = document.getElementById(`${type}-upload-placeholder`);
if (!area || !input || !placeholder) return;
placeholder.addEventListener('click', () => input.click());
area.addEventListener('dragover', (e) => {
e.preventDefault();
area.classList.add('drag-over');
});
area.addEventListener('dragleave', () => {
area.classList.remove('drag-over');
});
area.addEventListener('drop', (e) => {
e.preventDefault();
area.classList.remove('drag-over');
const files = multiple ? e.dataTransfer.files : [e.dataTransfer.files[0]];
his.handleFiles(type, files, multiple);
});
input.addEventListener('change', (e) => {
const files = multiple ? e.target.files : [e.target.files[0]];
his.handleFiles(type, files, multiple);
});
},
handleFiles: async function(type, files, multiple = false) {
const validFiles = [];
for (const file of files) {
if (this.validateFile(file)) {
validFiles.push(file);
}
}
if (validFiles.length === 0) return;
if (multiple) {
for (const file of validFiles) {
await this.processImage(type, file, true);
}
} else {
await this.processImage(type, validFiles[0]);
}
},
validateFile: function(file) {
if (!this.config.allowedTypes.includes(file.type)) {
alert('対応していないファイル形式です。JPEG、PNG、WebPのみ対応しています。');
return false;
}
if (file.size > this.config.maxFileSize) {
alert('ファイルサイズが大きすぎます。10MB以下の画像を選択してください。');
return false;
}
return true;
},
processImage: async function(type, file, isMultiple = false) {
ry {
const originalDataUrl = await this.readFile(file);
const compressedDataUrl = await this.compressImage(originalDataUrl);
his.showPreview(type, compressedDataUrl, isMultiple);
his.saveImageData(type, compressedDataUrl, file.name);
} catch (error) {
console.error('画像処理エラー:', error);
alert('画像の処理中にエラーが発生しました。');
}
},
readFile: function(file) {
return new Promise((resolve, reject) => {
const reader = new FileReader();
reader.onload = (e) => resolve(e.target.result);
reader.onerror = reject;
reader.readAsDataURL(file);
});
},
compressImage: function(dataUrl) {
return new Promise((resolve) => {
const img = new Image();
img.onload = () => {
const canvas = document.createElement('canvas');
const ctx = canvas.getContext('2d');
let { width, height } = img;
if (width > this.config.maxWidth || height > this.config.maxHeight) {
const ratio = Math.min(
his.config.maxWidth / width,
his.config.maxHeight / heigh
);
width *= ratio;
height *= ratio;
}
canvas.width = width;
canvas.height = height;
ctx.drawImage(img, 0, 0, width, height);
resolve(canvas.toDataURL('image/jpeg', this.config.imageQuality));
};
img.src = dataUrl;
});
},
showPreview: function(type, dataUrl, isMultiple = false) {
const placeholder = document.getElementById(`${type}-upload-placeholder`);
const preview = document.getElementById(`${type}-preview`);
if (isMultiple) {
placeholder.style.display = 'none';
preview.style.display = 'block';
const container = document.getElementById('other-preview-container');
const imageDiv = document.createElement('div');
imageDiv.className = 'preview-item';
imageDiv.innerHTML = `
<img src="${dataUrl}" alt="プレビュー">
<button type="button" class="remove-btn" onclick="this.parentElement.remove()">×</button>
`;
container.appendChild(imageDiv);
} else {
const img = document.getElementById(`${type}-preview-img`);
placeholder.style.display = 'none';
preview.style.display = 'block';
img.src = dataUrl;
}
},
removeImage: function(type) {
const placeholder = document.getElementById(`${type}-upload-placeholder`);
const preview = document.getElementById(`${type}-preview`);
const img = document.getElementById(`${type}-preview-img`);
placeholder.style.display = 'block';
preview.style.display = 'none';
img.src = '';
his.clearImageData(type);
},
saveImageData: function(type, dataUrl, fileName) {
if (!window.uploadedImages) {
window.uploadedImages = {};
}
if (type === 'other') {
if (!window.uploadedImages.other) {
window.uploadedImages.other = [];
}
window.uploadedImages.other.push({
dataUrl: dataUrl,
fileName: fileName,
uploadedAt: new Date().toISOString()
});
} else {
window.uploadedImages[type] = {
dataUrl: dataUrl,
fileName: fileName,
uploadedAt: new Date().toISOString()
};
}
},
clearImageData: function(type) {
if (window.uploadedImages) {
delete window.uploadedImages[type];
}
},
getUploadedImages: function() {
return window.uploadedImages || {};
},
addStyles: function() {
const style = document.createElement('style');
style.textContent = `
.image-upload-section {
margin-top: 40px;
padding-top: 40px;
border-top: 1px solid #eee;
}
.upload-grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
gap: 30px;
margin-top: 30px;
}
.upload-card {
background: #f9f9f9;
border-radius: 12px;
padding: 20px;
}
.upload-title {
margin: 0 0 15px;
font-size: 16px;
font-weight: 600;
color: #333;
}
.upload-area {
border: 2px dashed #ddd;
border-radius: 8px;
background: white;
ransition: all 0.3s ease;
position: relative;
overflow: hidden;
}
.upload-area.drag-over {
border-color: var(--accent-gold);
background: #fffef5;
}
.upload-placeholder {
padding: 40px 20px;
ext-align: center;
cursor: pointer;
}
.upload-icon {
font-size: 48px;
margin-bottom: 10px;
opacity: 0.6;
}
.upload-placeholder p {
margin: 5px 0;
color: #666;
font-size: 14px;
}
.upload-hint {
font-size: 12px !important;
color: #999 !important;
}
.upload-preview {
position: relative;
}
.upload-preview img {
width: 100%;
height: 250px;
object-fit: cover;
border-radius: 8px;
}
.remove-btn {
position: absolute;
op: 10px;
right: 10px;
background: rgba(0, 0, 0, 0.7);
color: white;
border: none;
border-radius: 50%;
width: 30px;
height: 30px;
cursor: pointer;
font-size: 16px;
display: flex;
align-items: center;
justify-content: center;
ransition: background 0.2s;
}
.remove-btn:hover {
background: rgba(0, 0, 0, 0.9);
}
.multiple-preview {
display: grid;
grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
gap: 10px;
padding: 10px;
}
.preview-item {
position: relative;
}
.preview-item img {
width: 100%;
height: 100px;
object-fit: cover;
border-radius: 4px;
}
.preview-item .remove-btn {
width: 24px;
height: 24px;
font-size: 14px;
}
.upload-note {
margin-top: 20px;
font-size: 12px;
color: #666;
ext-align: center;
}
@media (max-width: 768px) {
.upload-grid {
grid-template-columns: 1fr;
}
}
`;
document.head.appendChild(style);
}
};
document.addEventListener('DOMContentLoaded', () => {
ImageUploadHandler.init();
});
window.ImageUploadHandler = ImageUploadHandler;
const GoogleSheetsConnector = {
config: {
scriptUrl: (typeof Config !== 'undefined' && Config.GOOGLE_SHEETS_URL)
? Config.GOOGLE_SHEETS_URL
: (localStorage.getItem('googleSheetsUrl') || 'https:
sheetName: (typeof Config !== 'undefined' && Config.SHEET_NAME) ? Config.SHEET_NAME : 'フォーム回答'
},
submitToGoogleSheets: async function(formData, images = null) {
ry {
his.showLoading();
const payload = {
action: 'append',
data: formData,
sheetName: this.config.sheetName,
images: images
};
const response = await fetch(this.config.scriptUrl, {
method: 'POST',
mode: 'no-cors',
headers: {
'Content-Type': 'application/json',
},
body: JSON.stringify(payload)
});
his.showSuccess();
return true;
} catch (error) {
console.error('Google Sheets送信エラー:', error);
his.showError(error.message);
return false;
} finally {
his.hideLoading();
}
},
submitForm: async function() {
if (typeof FormDataExporter === 'undefined') {
console.error('FormDataExporter が見つかりません');
return false;
}
const formData = FormDataExporter.collectFormData();
const rowData = [
formData.timestamp,
formData.gender,
formData.lastName,
formData.firstName,
formData.lastNameKana,
formData.firstNameKana,
formData.birthDate,
formData.height,
formData.weight,
formData.email,
formData.phoneNumber,
formData.postalCode,
formData.prefecture,
formData.city,
formData.address,
formData.workStyle,
formData.businessScenes,
formData.privateScenes,
formData.weekendActivities,
formData.domesticTravel,
formData.overseasTravel,
formData.dressRegulation,
formData.attractiveStyles,
formData.avoidItems,
formData.brandPreferences,
formData.fashionKnowledge,
formData.clothingItems,
formData.wantedItems,
formData.companyName,
formData.department,
formData.companySize,
formData.annualRevenue,
formData.ageDemo,
formData.appUsage,
formData.partnerService,
formData.fittingTime,
formData.giftService,
formData.giftFrequency,
formData.transportService,
formData.serviceExpectations,
formData.fashionLiteracy,
formData.comments
];
const images = formData.images;
return await this.submitToGoogleSheets(rowData, images);
},
showLoading: function() {
const loading = document.createElement('div');
loading.id = 'sheets-loading';
loading.innerHTML = `
<div class="loading-overlay">
<div class="loading-spinner">
<div class="spinner"></div>
<p>Google Sheetsに送信中...</p>
</div>
</div>
`;
loading.style.cssText = `
position: fixed;
op: 0;
left: 0;
width: 100%;
height: 100%;
background: rgba(0, 0, 0, 0.7);
display: flex;
align-items: center;
justify-content: center;
z-index: 9999;
`;
document.body.appendChild(loading);
},
hideLoading: function() {
const loading = document.getElementById('sheets-loading');
if (loading) {
loading.remove();
}
},
showSuccess: function() {
const notification = document.createElement('div');
notification.className = 'sheets-notification success';
notification.innerHTML = `
<span>✓ Google Sheetsへの送信が完了しました</span>
`;
notification.style.cssText = `
position: fixed;
op: 20px;
right: 20px;
background: #4caf50;
color: white;
padding: 15px 20px;
border-radius: 5px;
box-shadow: 0 2px 5px rgba(0,0,0,0.2);
z-index: 10000;
animation: slideIn 0.3s ease;
`;
document.body.appendChild(notification);
setTimeout(() => {
notification.remove();
}, 5000);
},
showError: function(message) {
const notification = document.createElement('div');
notification.className = 'sheets-notification error';
notification.innerHTML = `
<span>✗ エラー: ${message}</span>
`;
notification.style.cssText = `
position: fixed;
op: 20px;
right: 20px;
background: #f44336;
color: white;
padding: 15px 20px;
border-radius: 5px;
box-shadow: 0 2px 5px rgba(0,0,0,0.2);
z-index: 10000;
animation: slideIn 0.3s ease;
`;
document.body.appendChild(notification);
setTimeout(() => {
notification.remove();
}, 5000);
}
};
const style = document.createElement('style');
style.textContent = `
@keyframes slideIn {
from {
ransform: translateX(100%);
opacity: 0;
}
o {
ransform: translateX(0);
opacity: 1;
}
}
.loading-spinner {
ext-align: center;
color: white;
}
.spinner {
width: 50px;
height: 50px;
margin: 0 auto 20px;
border: 5px solid rgba(255, 255, 255, 0.3);
border-top-color: white;
border-radius: 50%;
animation: spin 1s linear infinite;
}
@keyframes spin {
o { transform: rotate(360deg); }
}
`;
document.head.appendChild(style);
window.GoogleSheetsConnector = GoogleSheetsConnector;
const FormSubmissionHandler = {
init: function() {
const form = document.getElementById('personalStyleForm');
const submitBtn = document.getElementById('submitBtn');
if (form && submitBtn) {
form.addEventListener('submit', this.handleSubmit.bind(this));
}
},
handleSubmit: async function(e) {
e.preventDefault();
const submitBtn = document.getElementById('submitBtn');
const btnText = submitBtn.querySelector('.btn-text');
const btnLoading = submitBtn.querySelector('.btn-loading');
ry {
submitBtn.disabled = true;
btnText.style.display = 'none';
btnLoading.style.display = 'inline-block';
const success = await GoogleSheetsConnector.submitForm();
if (success) {
his.showSuccessMessage();
}
} catch (error) {
console.error('送信エラー:', error);
his.showErrorMessage();
} finally {
submitBtn.disabled = false;
btnText.style.display = 'inline-block';
btnLoading.style.display = 'none';
}
},
showSuccessMessage: function() {
const message = document.createElement('div');
message.className = 'submission-message success';
message.innerHTML = `
<div class="message-content">
<h3>送信完了</h3>
<p>フォームが正常に送信されました。</p>
<p>ご回答ありがとうございました。</p>
</div>
`;
message.style.cssText = `
position: fixed;
op: 50%;
left: 50%;
ransform: translate(-50%, -50%);
background: white;
padding: 40px;
border-radius: 10px;
box-shadow: 0 5px 20px rgba(0,0,0,0.2);
z-index: 10000;
ext-align: center;
max-width: 400px;
`;
document.body.appendChild(message);
setTimeout(() => {
message.remove();
}, 5000);
},
showErrorMessage: function() {
const message = document.createElement('div');
message.className = 'submission-message error';
message.innerHTML = `
<div class="message-content">
<h3>送信エラー</h3>
<p>フォームの送信中にエラーが発生しました。</p>
<p>しばらく待ってから再度お試しください。</p>
</div>
`;
message.style.cssText = `
position: fixed;
op: 50%;
left: 50%;
ransform: translate(-50%, -50%);
background: white;
padding: 40px;
border-radius: 10px;
box-shadow: 0 5px 20px rgba(0,0,0,0.2);
z-index: 10000;
ext-align: center;
max-width: 400px;
border: 2px solid #f44336;
`;
document.body.appendChild(message);
setTimeout(() => {
message.remove();
}, 5000);
}
};
document.addEventListener('DOMContentLoaded', () => {
FormSubmissionHandler.init();
});
window.FormSubmissionHandler = FormSubmissionHandler;